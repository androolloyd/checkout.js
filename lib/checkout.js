// Generated by CoffeeScript 1.9.2
var API, ItemRef, Order, Payment, User, checkout, riot, screens, theme;

riot = require('riot');

require('./tags/checkbox');

require('./tags/checkout');

require('./tags/modal');

require('./tags/progressbar');

screens = require('./screens');

API = require('./models/api');

ItemRef = require('./models/itemRef');

User = require('./models/user');

Order = require('./models/order');

Payment = require('./models/payment');

theme = require('./utils/theme');

checkout = function(id, api, order, user, config) {
  if (user == null) {
    user = new User;
  }
  if (config == null) {
    config = {};
  }
  config.callToActions = config.callToActions || ['Pre-Order', 'Confirm'];
  config.thankYouHeader = config.thankYouHeader || 'Thank You';
  config.thankYouBody = config.thankYouBody || 'You will receive a confirmation email for your preorder.';
  config.shareHeader = config.shareHeader || 'Follow us to get the latest updates';
  config.screens = config.screens || [screens.card, screens.shipping];
  config.facebook = config.facebook || '';
  config.googlePlus = config.googlePlus || '';
  config.twitter = config.twitter || '';
  return api.getItems(order, function(order) {
    var $modal, i, len, model, ref, screen;
    $modal = $('modal').remove();
    $modal = $('<modal>\n  <checkout api="{ opts.api }" model="{ opts.model }" config="{ opts.config }">\n  </checkout>\n</modal>');
    $(window).off('.crowdstart-modal').on('scroll.crowdstart-modal', function() {
      return $modal.children().last().css('top', $(this).scrollTop() + 'px');
    });
    ref = config.screens;
    for (i = 0, len = ref.length; i < len; i++) {
      screen = ref[i];
      $modal.find('checkout').append($("<" + screen.tag + " api=\"{ opts.api }\" model=\"{ opts.model }\" config=\"{ opts.config }\">\n<" + screen.tag + "/card>"));
    }
    $('body').prepend($modal);
    $('head').append($('<link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">'));
    model = {
      payment: new Payment,
      order: order,
      user: user
    };
    return riot.mount('modal', {
      id: id,
      api: api,
      model: model,
      config: config
    });
  });
};

if (typeof window !== "undefined" && window !== null) {
  window.Crowdstart = {
    API: API,
    Checkout: checkout,
    ItemRef: ItemRef,
    Order: Order,
    User: User,
    setTheme: theme.setTheme
  };
}

module.exports = checkout;

//# sourceMappingURL=checkout.js.map
