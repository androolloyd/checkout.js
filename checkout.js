(function (global) {
  var process = {
    title: 'browser',
    browser: true,
    env: {},
    argv: [],
    nextTick: function (fn) {
      setTimeout(fn, 0)
    },
    cwd: function () {
      return '/'
    },
    chdir: function () {
    }
  };
  // Require module
  function require(file, callback) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    // Handle async require
    if (typeof callback == 'function') {
      require.load(file, callback);
      return
    }
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
      id: file,
      require: require,
      filename: file,
      exports: {},
      loaded: false,
      parent: null,
      children: []
    };
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0
  };
  // define normal static module
  require.define = function (file, fn) {
    require.modules[file] = fn
  };
  require.waiting = {};
  // define asynchrons module
  require.async = function (url, fn) {
    require.modules[url] = fn;
    while (cb = require.waiting[url].shift())
      cb(require(url))
  };
  // Load module asynchronously
  require.load = function (url, cb) {
    var script = document.createElement('script'), existing = document.getElementsByTagName('script')[0], callbacks = require.waiting[url] = require.waiting[url] || [];
    // we'll be called when asynchronously defined.
    callbacks.push(cb);
    // load module
    script.type = 'text/javascript';
    script.async = true;
    script.src = url;
    existing.parentNode.insertBefore(script, existing)
  };
  global.require = require;
  // source: node_modules/riot/riot.js
  require.define('riot/riot', function (module, exports, __dirname, __filename) {
    /* Riot v2.2.4, @license MIT, (c) 2015 Muut Inc. + contributors */
    ;
    (function (window, undefined) {
      'use strict';
      var riot = {
          version: 'v2.2.4',
          settings: {}
        },
        //// be aware, internal usage
        // counter to give a unique id to all the Tag instances
        __uid = 0,
        // riot specific prefixes
        RIOT_PREFIX = 'riot-', RIOT_TAG = RIOT_PREFIX + 'tag',
        // for typeof == '' comparisons
        T_STRING = 'string', T_OBJECT = 'object', T_UNDEF = 'undefined', T_FUNCTION = 'function',
        // special native tags that cannot be treated like the others
        SPECIAL_TAGS_REGEX = /^(?:opt(ion|group)|tbody|col|t[rhd])$/, RESERVED_WORDS_BLACKLIST = [
          '_item',
          '_id',
          'update',
          'root',
          'mount',
          'unmount',
          'mixin',
          'isMounted',
          'isLoop',
          'tags',
          'parent',
          'opts',
          'trigger',
          'on',
          'off',
          'one'
        ],
        // version# for IE 8-11, 0 for others
        IE_VERSION = (window && window.document || {}).documentMode | 0,
        // Array.isArray for IE8 is in the polyfills
        isArray = Array.isArray;
      riot.observable = function (el) {
        el = el || {};
        var callbacks = {}, _id = 0;
        el.on = function (events, fn) {
          if (isFunction(fn)) {
            if (typeof fn.id === T_UNDEF)
              fn._id = _id++;
            events.replace(/\S+/g, function (name, pos) {
              (callbacks[name] = callbacks[name] || []).push(fn);
              fn.typed = pos > 0
            })
          }
          return el
        };
        el.off = function (events, fn) {
          if (events == '*')
            callbacks = {};
          else {
            events.replace(/\S+/g, function (name) {
              if (fn) {
                var arr = callbacks[name];
                for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                  if (cb._id == fn._id)
                    arr.splice(i--, 1)
                }
              } else {
                callbacks[name] = []
              }
            })
          }
          return el
        };
        // only single event supported
        el.one = function (name, fn) {
          function on() {
            el.off(name, on);
            fn.apply(el, arguments)
          }
          return el.on(name, on)
        };
        el.trigger = function (name) {
          var args = [].slice.call(arguments, 1), fns = callbacks[name] || [];
          for (var i = 0, fn; fn = fns[i]; ++i) {
            if (!fn.busy) {
              fn.busy = 1;
              fn.apply(el, fn.typed ? [name].concat(args) : args);
              if (fns[i] !== fn) {
                i--
              }
              fn.busy = 0
            }
          }
          if (callbacks.all && name != 'all') {
            el.trigger.apply(el, [
              'all',
              name
            ].concat(args))
          }
          return el
        };
        return el
      };
      riot.mixin = function () {
        var mixins = {};
        return function (name, mixin) {
          if (!mixin)
            return mixins[name];
          mixins[name] = mixin
        }
      }();
      (function (riot, evt, win) {
        // browsers only
        if (!win)
          return;
        var loc = win.location, fns = riot.observable(), started = false, current;
        function hash() {
          return loc.href.split('#')[1] || ''  // why not loc.hash.splice(1) ?
        }
        function parser(path) {
          return path.split('/')
        }
        function emit(path) {
          if (path.type)
            path = hash();
          if (path != current) {
            fns.trigger.apply(null, ['H'].concat(parser(path)));
            current = path
          }
        }
        var r = riot.route = function (arg) {
          // string
          if (arg[0]) {
            loc.hash = arg;
            emit(arg)  // function
          } else {
            fns.on('H', arg)
          }
        };
        r.exec = function (fn) {
          fn.apply(null, parser(hash()))
        };
        r.parser = function (fn) {
          parser = fn
        };
        r.stop = function () {
          if (started) {
            if (win.removeEventListener)
              win.removeEventListener(evt, emit, false)  //@IE8 - the if()
;
            else
              win.detachEvent('on' + evt, emit);
            //@IE8
            fns.off('*');
            started = false
          }
        };
        r.start = function () {
          if (!started) {
            if (win.addEventListener)
              win.addEventListener(evt, emit, false)  //@IE8 - the if()
;
            else
              win.attachEvent('on' + evt, emit);
            //IE8
            started = true
          }
        };
        // autostart the router
        r.start()
      }(riot, 'hashchange', window));
      /*

//// How it works?


Three ways:

1. Expressions: tmpl('{ value }', data).
   Returns the result of evaluated expression as a raw object.

2. Templates: tmpl('Hi { name } { surname }', data).
   Returns a string with evaluated expressions.

3. Filters: tmpl('{ show: !done, highlight: active }', data).
   Returns a space separated list of trueish keys (mainly
   used for setting html classes), e.g. "show highlight".


// Template examples

tmpl('{ title || "Untitled" }', data)
tmpl('Results are { results ? "ready" : "loading" }', data)
tmpl('Today is { new Date() }', data)
tmpl('{ message.length > 140 && "Message is too long" }', data)
tmpl('This item got { Math.round(rating) } stars', data)
tmpl('<h1>{ title }</h1>{ body }', data)


// Falsy expressions in templates

In templates (as opposed to single expressions) all falsy values
except zero (undefined/null/false) will default to empty string:

tmpl('{ undefined } - { false } - { null } - { 0 }', {})
// will return: " - - - 0"

*/
      var brackets = function (orig) {
        var cachedBrackets, r, b, re = /[{}]/g;
        return function (x) {
          // make sure we use the current setting
          var s = riot.settings.brackets || orig;
          // recreate cached vars if needed
          if (cachedBrackets !== s) {
            cachedBrackets = s;
            b = s.split(' ');
            r = b.map(function (e) {
              return e.replace(/(?=.)/g, '\\')
            })
          }
          // if regexp given, rewrite it with current brackets (only if differ from default)
          return x instanceof RegExp ? s === orig ? x : new RegExp(x.source.replace(re, function (b) {
            return r[~~(b === '}')]
          }), x.global ? 'g' : '') : // else, get specific bracket
          b[x]
        }
      }('{ }');
      var tmpl = function () {
        var cache = {}, OGLOB = '"in d?d:' + (window ? 'window).' : 'global).'), reVars = /(['"\/])(?:[^\\]*?|\\.|.)*?\1|\.\w*|\w*:|\b(?:(?:new|typeof|in|instanceof) |(?:this|true|false|null|undefined)\b|function\s*\()|([A-Za-z_$]\w*)/g;
        // build a template (or get it from cache), render with data
        return function (str, data) {
          return str && (cache[str] || (cache[str] = tmpl(str)))(data)
        };
        // create a template instance
        function tmpl(s, p) {
          if (s.indexOf(brackets(0)) < 0) {
            // return raw text
            s = s.replace(/\n|\r\n?/g, '\n');
            return function () {
              return s
            }
          }
          // temporarily convert \{ and \} to a non-character
          s = s.replace(brackets(/\\{/g), '￰').replace(brackets(/\\}/g), '￱');
          // split string to expression and non-expresion parts
          p = split(s, extract(s, brackets(/{/), brackets(/}/)));
          // is it a single expression or a template? i.e. {x} or <b>{x}</b>
          s = p.length === 2 && !p[0] ? // if expression, evaluate it
          expr(p[1]) : // if template, evaluate all expressions in it
          '[' + p.map(function (s, i) {
            // is it an expression or a string (every second part is an expression)
            return i % 2 ? // evaluate the expressions
            expr(s, true) : // process string parts of the template:
            '"' + s  // preserve new lines
.replace(/\n|\r\n?/g, '\\n')  // escape quotes
.replace(/"/g, '\\"') + '"'
          }).join(',') + '].join("")';
          return new Function('d', 'return ' + s  // bring escaped { and } back
.replace(/\uFFF0/g, brackets(0)).replace(/\uFFF1/g, brackets(1)) + ';')
        }
        // parse { ... } expression
        function expr(s, n) {
          s = s  // convert new lines to spaces
.replace(/\n|\r\n?/g, ' ')  // trim whitespace, brackets, strip comments
.replace(brackets(/^[{ ]+|[ }]+$|\/\*.+?\*\//g), '');
          // is it an object literal? i.e. { key : value }
          return /^\s*[\w- "']+ *:/.test(s) ? // if object literal, return trueish keys
          // e.g.: { show: isOpen(), done: item.done } -> "show done"
          '[' + // extract key:val pairs, ignoring any nested objects
          extract(s, // name part: name:, "name":, 'name':, name :
          /["' ]*[\w- ]+["' ]*:/, // expression part: everything upto a comma followed by a name (see above) or end of line
          /,(?=["' ]*[\w- ]+["' ]*:)|}|$/).map(function (pair) {
            // get key, val parts
            return pair.replace(/^[ "']*(.+?)[ "']*: *(.+?),? *$/, function (_, k, v) {
              // wrap all conditional parts to ignore errors
              return v.replace(/[^&|=!><]+/g, wrap) + '?"' + k + '":"",'
            })
          }).join('') + '].join(" ").trim()' : // if js expression, evaluate as javascript
          wrap(s, n)
        }
        // execute js w/o breaking on errors or undefined vars
        function wrap(s, nonull) {
          s = s.trim();
          return !s ? '' : '(function(v){try{v=' + // prefix vars (name => data.name)
          s.replace(reVars, function (s, _, v) {
            return v ? '(("' + v + OGLOB + v + ')' : s
          }) + // default to empty string for falsy values except zero
          '}catch(e){}return ' + (nonull === true ? '!v&&v!==0?"":v' : 'v') + '}).call(d)'
        }
        // split string by an array of substrings
        function split(str, substrings) {
          var parts = [];
          substrings.map(function (sub, i) {
            // push matched expression and part before it
            i = str.indexOf(sub);
            parts.push(str.slice(0, i), sub);
            str = str.slice(i + sub.length)
          });
          if (str)
            parts.push(str);
          // push the remaining part
          return parts
        }
        // match strings between opening and closing regexp, skipping any inner/nested matches
        function extract(str, open, close) {
          var start, level = 0, matches = [], re = new RegExp('(' + open.source + ')|(' + close.source + ')', 'g');
          str.replace(re, function (_, open, close, pos) {
            // if outer inner bracket, mark position
            if (!level && open)
              start = pos;
            // in(de)crease bracket level
            level += open ? 1 : -1;
            // if outer closing bracket, grab the match
            if (!level && close != null)
              matches.push(str.slice(start, pos + close.length))
          });
          return matches
        }
      }();
      /*
  lib/browser/tag/mkdom.js

  Includes hacks needed for the Internet Explorer version 9 and bellow

*/
      // http://kangax.github.io/compat-table/es5/#ie8
      // http://codeplanet.io/dropping-ie8/
      var mkdom = function (checkIE) {
        var rootEls = {
            'tr': 'tbody',
            'th': 'tr',
            'td': 'tr',
            'tbody': 'table',
            'col': 'colgroup'
          }, GENERIC = 'div';
        checkIE = checkIE && checkIE < 10;
        // creates any dom element in a div, table, or colgroup container
        function _mkdom(html) {
          var match = html && html.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), rootTag = rootEls[tagName] || GENERIC, el = mkEl(rootTag);
          el.stub = true;
          if (checkIE && tagName && (match = tagName.match(SPECIAL_TAGS_REGEX)))
            ie9elem(el, html, tagName, !!match[1]);
          else
            el.innerHTML = html;
          return el
        }
        // creates tr, th, td, option, optgroup element for IE8-9
        /* istanbul ignore next */
        function ie9elem(el, html, tagName, select) {
          var div = mkEl(GENERIC), tag = select ? 'select>' : 'table>', child;
          div.innerHTML = '<' + tag + html + '</' + tag;
          child = div.getElementsByTagName(tagName)[0];
          if (child)
            el.appendChild(child)
        }
        // end ie9elem()
        return _mkdom
      }(IE_VERSION);
      // { key, i in items} -> { key, i, items }
      function loopKeys(expr) {
        var b0 = brackets(0), els = expr.trim().slice(b0.length).match(/^\s*(\S+?)\s*(?:,\s*(\S+))?\s+in\s+(.+)$/);
        return els ? {
          key: els[1],
          pos: els[2],
          val: b0 + els[3]
        } : { val: expr }
      }
      function mkitem(expr, key, val) {
        var item = {};
        item[expr.key] = key;
        if (expr.pos)
          item[expr.pos] = val;
        return item
      }
      /* Beware: heavy stuff */
      function _each(dom, parent, expr) {
        remAttr(dom, 'each');
        var tagName = getTagName(dom), template = dom.outerHTML, hasImpl = !!tagImpl[tagName], impl = tagImpl[tagName] || { tmpl: template }, root = dom.parentNode, placeholder = document.createComment('riot placeholder'), tags = [], child = getTag(dom), checksum;
        root.insertBefore(placeholder, dom);
        expr = loopKeys(expr);
        // clean template code
        parent.one('premount', function () {
          if (root.stub)
            root = parent.root;
          // remove the original DOM node
          dom.parentNode.removeChild(dom)
        }).on('update', function () {
          var items = tmpl(expr.val, parent);
          // object loop. any changes cause full redraw
          if (!isArray(items)) {
            checksum = items ? JSON.stringify(items) : '';
            items = !items ? [] : Object.keys(items).map(function (key) {
              return mkitem(expr, key, items[key])
            })
          }
          var frag = document.createDocumentFragment(), i = tags.length, j = items.length;
          // unmount leftover items
          while (i > j) {
            tags[--i].unmount();
            tags.splice(i, 1)
          }
          for (i = 0; i < j; ++i) {
            var _item = !checksum && !!expr.key ? mkitem(expr, items[i], i) : items[i];
            if (!tags[i]) {
              // mount new
              (tags[i] = new Tag(impl, {
                parent: parent,
                isLoop: true,
                hasImpl: hasImpl,
                root: SPECIAL_TAGS_REGEX.test(tagName) ? root : dom.cloneNode(),
                item: _item
              }, dom.innerHTML)).mount();
              frag.appendChild(tags[i].root)
            } else
              tags[i].update(_item);
            tags[i]._item = _item
          }
          root.insertBefore(frag, placeholder);
          if (child)
            parent.tags[tagName] = tags
        }).one('updated', function () {
          var keys = Object.keys(parent);
          // only set new values
          walk(root, function (node) {
            // only set element node and not isLoop
            if (node.nodeType == 1 && !node.isLoop && !node._looped) {
              node._visited = false;
              // reset _visited for loop node
              node._looped = true;
              // avoid set multiple each
              setNamed(node, parent, keys)
            }
          })
        })
      }
      function parseNamedElements(root, tag, childTags) {
        walk(root, function (dom) {
          if (dom.nodeType == 1) {
            dom.isLoop = dom.isLoop || (dom.parentNode && dom.parentNode.isLoop || dom.getAttribute('each')) ? 1 : 0;
            // custom child tag
            var child = getTag(dom);
            if (child && !dom.isLoop) {
              childTags.push(initChildTag(child, dom, tag))
            }
            if (!dom.isLoop)
              setNamed(dom, tag, [])
          }
        })
      }
      function parseExpressions(root, tag, expressions) {
        function addExpr(dom, val, extra) {
          if (val.indexOf(brackets(0)) >= 0) {
            var expr = {
              dom: dom,
              expr: val
            };
            expressions.push(extend(expr, extra))
          }
        }
        walk(root, function (dom) {
          var type = dom.nodeType;
          // text node
          if (type == 3 && dom.parentNode.tagName != 'STYLE')
            addExpr(dom, dom.nodeValue);
          if (type != 1)
            return;
          /* element */
          // loop
          var attr = dom.getAttribute('each');
          if (attr) {
            _each(dom, tag, attr);
            return false
          }
          // attribute expressions
          each(dom.attributes, function (attr) {
            var name = attr.name, bool = name.split('__')[1];
            addExpr(dom, attr.value, {
              attr: bool || name,
              bool: bool
            });
            if (bool) {
              remAttr(dom, name);
              return false
            }
          });
          // skip custom tags
          if (getTag(dom))
            return false
        })
      }
      function Tag(impl, conf, innerHTML) {
        var self = riot.observable(this), opts = inherit(conf.opts) || {}, dom = mkdom(impl.tmpl), parent = conf.parent, isLoop = conf.isLoop, hasImpl = conf.hasImpl, item = cleanUpData(conf.item), expressions = [], childTags = [], root = conf.root, fn = impl.fn, tagName = root.tagName.toLowerCase(), attr = {}, propsInSyncWithParent = [];
        if (fn && root._tag) {
          root._tag.unmount(true)
        }
        // not yet mounted
        this.isMounted = false;
        root.isLoop = isLoop;
        // keep a reference to the tag just created
        // so we will be able to mount this tag multiple times
        root._tag = this;
        // create a unique id to this tag
        // it could be handy to use it also to improve the virtual dom rendering speed
        this._id = __uid++;
        extend(this, {
          parent: parent,
          root: root,
          opts: opts,
          tags: {}
        }, item);
        // grab attributes
        each(root.attributes, function (el) {
          var val = el.value;
          // remember attributes with expressions only
          if (brackets(/{.*}/).test(val))
            attr[el.name] = val
        });
        if (dom.innerHTML && !/^(select|optgroup|table|tbody|tr|col(?:group)?)$/.test(tagName))
          // replace all the yield tags with the tag inner html
          dom.innerHTML = replaceYield(dom.innerHTML, innerHTML);
        // options
        function updateOpts() {
          var ctx = hasImpl && isLoop ? self : parent || self;
          // update opts from current DOM attributes
          each(root.attributes, function (el) {
            opts[el.name] = tmpl(el.value, ctx)
          });
          // recover those with expressions
          each(Object.keys(attr), function (name) {
            opts[name] = tmpl(attr[name], ctx)
          })
        }
        function normalizeData(data) {
          for (var key in item) {
            if (typeof self[key] !== T_UNDEF)
              self[key] = data[key]
          }
        }
        function inheritFromParent() {
          if (!self.parent || !isLoop)
            return;
          each(Object.keys(self.parent), function (k) {
            // some properties must be always in sync with the parent tag
            var mustSync = !~RESERVED_WORDS_BLACKLIST.indexOf(k) && ~propsInSyncWithParent.indexOf(k);
            if (typeof self[k] === T_UNDEF || mustSync) {
              // track the property to keep in sync
              // so we can keep it updated
              if (!mustSync)
                propsInSyncWithParent.push(k);
              self[k] = self.parent[k]
            }
          })
        }
        this.update = function (data) {
          // make sure the data passed will not override
          // the component core methods
          data = cleanUpData(data);
          // inherit properties from the parent
          inheritFromParent();
          // normalize the tag properties in case an item object was initially passed
          if (data && typeof item === T_OBJECT) {
            normalizeData(data);
            item = data
          }
          extend(self, data);
          updateOpts();
          self.trigger('update', data);
          update(expressions, self);
          self.trigger('updated')
        };
        this.mixin = function () {
          each(arguments, function (mix) {
            mix = typeof mix === T_STRING ? riot.mixin(mix) : mix;
            each(Object.keys(mix), function (key) {
              // bind methods to self
              if (key != 'init')
                self[key] = isFunction(mix[key]) ? mix[key].bind(self) : mix[key]
            });
            // init method will be called automatically
            if (mix.init)
              mix.init.bind(self)()
          })
        };
        this.mount = function () {
          updateOpts();
          // initialiation
          if (fn)
            fn.call(self, opts);
          // parse layout after init. fn may calculate args for nested custom tags
          parseExpressions(dom, self, expressions);
          // mount the child tags
          toggle(true);
          // update the root adding custom attributes coming from the compiler
          // it fixes also #1087
          if (impl.attrs || hasImpl) {
            walkAttributes(impl.attrs, function (k, v) {
              root.setAttribute(k, v)
            });
            parseExpressions(self.root, self, expressions)
          }
          if (!self.parent || isLoop)
            self.update(item);
          // internal use only, fixes #403
          self.trigger('premount');
          if (isLoop && !hasImpl) {
            // update the root attribute for the looped elements
            self.root = root = dom.firstChild
          } else {
            while (dom.firstChild)
              root.appendChild(dom.firstChild);
            if (root.stub)
              self.root = root = parent.root
          }
          // if it's not a child tag we can trigger its mount event
          if (!self.parent || self.parent.isMounted) {
            self.isMounted = true;
            self.trigger('mount')
          }  // otherwise we need to wait that the parent event gets triggered
          else
            self.parent.one('mount', function () {
              // avoid to trigger the `mount` event for the tags
              // not visible included in an if statement
              if (!isInStub(self.root)) {
                self.parent.isMounted = self.isMounted = true;
                self.trigger('mount')
              }
            })
        };
        this.unmount = function (keepRootTag) {
          var el = root, p = el.parentNode, ptag;
          if (p) {
            if (parent) {
              ptag = getImmediateCustomParentTag(parent);
              // remove this tag from the parent tags object
              // if there are multiple nested tags with same name..
              // remove this element form the array
              if (isArray(ptag.tags[tagName]))
                each(ptag.tags[tagName], function (tag, i) {
                  if (tag._id == self._id)
                    ptag.tags[tagName].splice(i, 1)
                });
              else
                // otherwise just delete the tag instance
                ptag.tags[tagName] = undefined
            } else
              while (el.firstChild)
                el.removeChild(el.firstChild);
            if (!keepRootTag)
              p.removeChild(el);
            else
              // the riot-tag attribute isn't needed anymore, remove it
              p.removeAttribute('riot-tag')
          }
          self.trigger('unmount');
          toggle();
          self.off('*');
          // somehow ie8 does not like `delete root._tag`
          root._tag = null
        };
        function toggle(isMount) {
          // mount/unmount children
          each(childTags, function (child) {
            child[isMount ? 'mount' : 'unmount']()
          });
          // listen/unlisten parent (events flow one way from parent to children)
          if (parent) {
            var evt = isMount ? 'on' : 'off';
            // the loop tags will be always in sync with the parent automatically
            if (isLoop)
              parent[evt]('unmount', self.unmount);
            else
              parent[evt]('update', self.update)[evt]('unmount', self.unmount)
          }
        }
        // named elements available for fn
        parseNamedElements(dom, this, childTags)
      }
      function setEventHandler(name, handler, dom, tag) {
        dom[name] = function (e) {
          var item = tag._item, ptag = tag.parent, el;
          if (!item)
            while (ptag && !item) {
              item = ptag._item;
              ptag = ptag.parent
            }
          // cross browser event fix
          e = e || window.event;
          // ignore error on some browsers
          try {
            e.currentTarget = dom;
            if (!e.target)
              e.target = e.srcElement;
            if (!e.which)
              e.which = e.charCode || e.keyCode
          } catch (ignored) {
          }
          e.item = item;
          // prevent default behaviour (by default)
          if (handler.call(tag, e) !== true && !/radio|check/.test(dom.type)) {
            if (e.preventDefault)
              e.preventDefault();
            e.returnValue = false
          }
          if (!e.preventUpdate) {
            el = item ? getImmediateCustomParentTag(ptag) : tag;
            el.update()
          }
        }
      }
      // used by if- attribute
      function insertTo(root, node, before) {
        if (root) {
          root.insertBefore(before, node);
          root.removeChild(node)
        }
      }
      function update(expressions, tag) {
        each(expressions, function (expr, i) {
          var dom = expr.dom, attrName = expr.attr, value = tmpl(expr.expr, tag), parent = expr.dom.parentNode;
          if (expr.bool)
            value = value ? attrName : false;
          else if (value == null)
            value = '';
          // leave out riot- prefixes from strings inside textarea
          // fix #815: any value -> string
          if (parent && parent.tagName == 'TEXTAREA')
            value = ('' + value).replace(/riot-/g, '');
          // no change
          if (expr.value === value)
            return;
          expr.value = value;
          // text node
          if (!attrName) {
            dom.nodeValue = '' + value;
            // #815 related
            return
          }
          // remove original attribute
          remAttr(dom, attrName);
          // event handler
          if (isFunction(value)) {
            setEventHandler(attrName, value, dom, tag)  // if- conditional
          } else if (attrName == 'if') {
            var stub = expr.stub, add = function () {
                insertTo(stub.parentNode, stub, dom)
              }, remove = function () {
                insertTo(dom.parentNode, dom, stub)
              };
            // add to DOM
            if (value) {
              if (stub) {
                add();
                dom.inStub = false;
                // avoid to trigger the mount event if the tags is not visible yet
                // maybe we can optimize this avoiding to mount the tag at all
                if (!isInStub(dom)) {
                  walk(dom, function (el) {
                    if (el._tag && !el._tag.isMounted)
                      el._tag.isMounted = !!el._tag.trigger('mount')
                  })
                }
              }  // remove from DOM
            } else {
              stub = expr.stub = stub || document.createTextNode('');
              // if the parentNode is defined we can easily replace the tag
              if (dom.parentNode)
                remove();
              else
                // otherwise we need to wait the updated event
                (tag.parent || tag).one('updated', remove);
              dom.inStub = true
            }  // show / hide
          } else if (/^(show|hide)$/.test(attrName)) {
            if (attrName == 'hide')
              value = !value;
            dom.style.display = value ? '' : 'none'  // field value
          } else if (attrName == 'value') {
            dom.value = value  // <img src="{ expr }">
          } else if (startsWith(attrName, RIOT_PREFIX) && attrName != RIOT_TAG) {
            if (value)
              dom.setAttribute(attrName.slice(RIOT_PREFIX.length), value)
          } else {
            if (expr.bool) {
              dom[attrName] = value;
              if (!value)
                return
            }
            if (typeof value !== T_OBJECT)
              dom.setAttribute(attrName, value)
          }
        })
      }
      function each(els, fn) {
        for (var i = 0, len = (els || []).length, el; i < len; i++) {
          el = els[i];
          // return false -> remove current item during loop
          if (el != null && fn(el, i) === false)
            i--
        }
        return els
      }
      function isFunction(v) {
        return typeof v === T_FUNCTION || false  // avoid IE problems
      }
      function remAttr(dom, name) {
        dom.removeAttribute(name)
      }
      function getTag(dom) {
        return dom.tagName && tagImpl[dom.getAttribute(RIOT_TAG) || dom.tagName.toLowerCase()]
      }
      function initChildTag(child, dom, parent) {
        var tag = new Tag(child, {
            root: dom,
            parent: parent
          }, dom.innerHTML), tagName = getTagName(dom), ptag = getImmediateCustomParentTag(parent), cachedTag;
        // fix for the parent attribute in the looped elements
        tag.parent = ptag;
        cachedTag = ptag.tags[tagName];
        // if there are multiple children tags having the same name
        if (cachedTag) {
          // if the parent tags property is not yet an array
          // create it adding the first cached tag
          if (!isArray(cachedTag))
            ptag.tags[tagName] = [cachedTag];
          // add the new nested tag to the array
          if (!~ptag.tags[tagName].indexOf(tag))
            ptag.tags[tagName].push(tag)
        } else {
          ptag.tags[tagName] = tag
        }
        // empty the child node once we got its template
        // to avoid that its children get compiled multiple times
        dom.innerHTML = '';
        return tag
      }
      function getImmediateCustomParentTag(tag) {
        var ptag = tag;
        while (!getTag(ptag.root)) {
          if (!ptag.parent)
            break;
          ptag = ptag.parent
        }
        return ptag
      }
      function getTagName(dom) {
        var child = getTag(dom), namedTag = dom.getAttribute('name'), tagName = namedTag && namedTag.indexOf(brackets(0)) < 0 ? namedTag : child ? child.name : dom.tagName.toLowerCase();
        return tagName
      }
      function extend(src) {
        var obj, args = arguments;
        for (var i = 1; i < args.length; ++i) {
          if (obj = args[i]) {
            for (var key in obj) {
              // eslint-disable-line guard-for-in
              src[key] = obj[key]
            }
          }
        }
        return src
      }
      // with this function we avoid that the current Tag methods get overridden
      function cleanUpData(data) {
        if (!(data instanceof Tag) && !(data && typeof data.trigger == T_FUNCTION))
          return data;
        var o = {};
        for (var key in data) {
          if (!~RESERVED_WORDS_BLACKLIST.indexOf(key))
            o[key] = data[key]
        }
        return o
      }
      function walk(dom, fn) {
        if (dom) {
          if (fn(dom) === false)
            return;
          else {
            dom = dom.firstChild;
            while (dom) {
              walk(dom, fn);
              dom = dom.nextSibling
            }
          }
        }
      }
      // minimize risk: only zero or one _space_ between attr & value
      function walkAttributes(html, fn) {
        var m, re = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
        while (m = re.exec(html)) {
          fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
        }
      }
      function isInStub(dom) {
        while (dom) {
          if (dom.inStub)
            return true;
          dom = dom.parentNode
        }
        return false
      }
      function mkEl(name) {
        return document.createElement(name)
      }
      function replaceYield(tmpl, innerHTML) {
        return tmpl.replace(/<(yield)\/?>(<\/\1>)?/gi, innerHTML || '')
      }
      function $$(selector, ctx) {
        return (ctx || document).querySelectorAll(selector)
      }
      function $(selector, ctx) {
        return (ctx || document).querySelector(selector)
      }
      function inherit(parent) {
        function Child() {
        }
        Child.prototype = parent;
        return new Child
      }
      function setNamed(dom, parent, keys) {
        if (dom._visited)
          return;
        var p, v = dom.getAttribute('id') || dom.getAttribute('name');
        if (v) {
          if (keys.indexOf(v) < 0) {
            p = parent[v];
            if (!p)
              parent[v] = dom;
            else if (isArray(p))
              p.push(dom);
            else
              parent[v] = [
                p,
                dom
              ]
          }
          dom._visited = true
        }
      }
      // faster String startsWith alternative
      function startsWith(src, str) {
        return src.slice(0, str.length) === str
      }
      /*
 Virtual dom is an array of custom tags on the document.
 Updates and unmounts propagate downwards from parent to children.
*/
      var virtualDom = [], tagImpl = {}, styleNode;
      function injectStyle(css) {
        if (riot.render)
          return;
        // skip injection on the server
        if (!styleNode) {
          styleNode = mkEl('style');
          styleNode.setAttribute('type', 'text/css')
        }
        var head = document.head || document.getElementsByTagName('head')[0];
        if (styleNode.styleSheet)
          styleNode.styleSheet.cssText += css;
        else
          styleNode.innerHTML += css;
        if (!styleNode._rendered)
          if (styleNode.styleSheet) {
            document.body.appendChild(styleNode)
          } else {
            var rs = $('style[type=riot]');
            if (rs) {
              rs.parentNode.insertBefore(styleNode, rs);
              rs.parentNode.removeChild(rs)
            } else
              head.appendChild(styleNode)
          }
        styleNode._rendered = true
      }
      function mountTo(root, tagName, opts) {
        var tag = tagImpl[tagName],
          // cache the inner HTML to fix #855
          innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
        // clear the inner html
        root.innerHTML = '';
        if (tag && root)
          tag = new Tag(tag, {
            root: root,
            opts: opts
          }, innerHTML);
        if (tag && tag.mount) {
          tag.mount();
          virtualDom.push(tag);
          return tag.on('unmount', function () {
            virtualDom.splice(virtualDom.indexOf(tag), 1)
          })
        }
      }
      riot.tag = function (name, html, css, attrs, fn) {
        if (isFunction(attrs)) {
          fn = attrs;
          if (/^[\w\-]+\s?=/.test(css)) {
            attrs = css;
            css = ''
          } else
            attrs = ''
        }
        if (css) {
          if (isFunction(css))
            fn = css;
          else
            injectStyle(css)
        }
        tagImpl[name] = {
          name: name,
          tmpl: html,
          attrs: attrs,
          fn: fn
        };
        return name
      };
      riot.mount = function (selector, tagName, opts) {
        var els, allTags, tags = [];
        // helper functions
        function addRiotTags(arr) {
          var list = '';
          each(arr, function (e) {
            list += ', *[' + RIOT_TAG + '="' + e.trim() + '"]'
          });
          return list
        }
        function selectAllTags() {
          var keys = Object.keys(tagImpl);
          return keys + addRiotTags(keys)
        }
        function pushTags(root) {
          var last;
          if (root.tagName) {
            if (tagName && (!(last = root.getAttribute(RIOT_TAG)) || last != tagName))
              root.setAttribute(RIOT_TAG, tagName);
            var tag = mountTo(root, tagName || root.getAttribute(RIOT_TAG) || root.tagName.toLowerCase(), opts);
            if (tag)
              tags.push(tag)
          } else if (root.length) {
            each(root, pushTags)  // assume nodeList
          }
        }
        // ----- mount code -----
        if (typeof tagName === T_OBJECT) {
          opts = tagName;
          tagName = 0
        }
        // crawl the DOM to find the tag
        if (typeof selector === T_STRING) {
          if (selector === '*')
            // select all the tags registered
            // and also the tags found with the riot-tag attribute set
            selector = allTags = selectAllTags();
          else
            // or just the ones named like the selector
            selector += addRiotTags(selector.split(','));
          els = $$(selector)
        } else
          // probably you have passed already a tag or a NodeList
          els = selector;
        // select all the registered and mount them inside their root elements
        if (tagName === '*') {
          // get all custom tags
          tagName = allTags || selectAllTags();
          // if the root els it's just a single tag
          if (els.tagName)
            els = $$(tagName, els);
          else {
            // select all the children for all the different root elements
            var nodeList = [];
            each(els, function (_el) {
              nodeList.push($$(tagName, _el))
            });
            els = nodeList
          }
          // get rid of the tagName
          tagName = 0
        }
        if (els.tagName)
          pushTags(els);
        else
          each(els, pushTags);
        return tags
      };
      // update everything
      riot.update = function () {
        return each(virtualDom, function (tag) {
          tag.update()
        })
      };
      // @deprecated
      riot.mountTo = riot.mount;
      // share methods for other riot parts, e.g. compiler
      riot.util = {
        brackets: brackets,
        tmpl: tmpl
      };
      // support CommonJS, AMD & browser
      /* istanbul ignore next */
      if (typeof exports === T_OBJECT)
        module.exports = riot;
      else if (typeof define === 'function' && define.amd)
        define(function () {
          return window.riot = riot
        });
      else
        window.riot = riot
    }(typeof window != 'undefined' ? window : void 0))
  });
  // source: node_modules/crowdcontrol/lib/index.js
  require.define('crowdcontrol/lib', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    var _;
    _ = require('crowdcontrol/node_modules/underscore/underscore');
    module.exports = {
      data: require('crowdcontrol/lib/data'),
      utils: require('crowdcontrol/lib/utils'),
      view: require('crowdcontrol/lib/view'),
      config: require('crowdcontrol/lib/config'),
      start: function (opts) {
        return this.utils.shim.riot.mount('*')
      },
      Events: require('crowdcontrol/lib/events')
    };
    if (typeof window !== 'undefined' && window !== null) {
      window.crowdcontrol = module.exports
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/underscore/underscore.js
  require.define('crowdcontrol/node_modules/underscore/underscore', function (module, exports, __dirname, __filename) {
    //     Underscore.js 1.8.3
    //     http://underscorejs.org
    //     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
    //     Underscore may be freely distributed under the MIT license.
    (function () {
      // Baseline setup
      // --------------
      // Establish the root object, `window` in the browser, or `exports` on the server.
      var root = this;
      // Save the previous value of the `_` variable.
      var previousUnderscore = root._;
      // Save bytes in the minified (but not gzipped) version:
      var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
      // Create quick reference variables for speed access to core prototypes.
      var push = ArrayProto.push, slice = ArrayProto.slice, toString = ObjProto.toString, hasOwnProperty = ObjProto.hasOwnProperty;
      // All **ECMAScript 5** native function implementations that we hope to use
      // are declared here.
      var nativeIsArray = Array.isArray, nativeKeys = Object.keys, nativeBind = FuncProto.bind, nativeCreate = Object.create;
      // Naked function reference for surrogate-prototype-swapping.
      var Ctor = function () {
      };
      // Create a safe reference to the Underscore object for use below.
      var _ = function (obj) {
        if (obj instanceof _)
          return obj;
        if (!(this instanceof _))
          return new _(obj);
        this._wrapped = obj
      };
      // Export the Underscore object for **Node.js**, with
      // backwards-compatibility for the old `require()` API. If we're in
      // the browser, add `_` as a global object.
      if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
          exports = module.exports = _
        }
        exports._ = _
      } else {
        root._ = _
      }
      // Current version.
      _.VERSION = '1.8.3';
      // Internal function that returns an efficient (for current engines) version
      // of the passed-in callback, to be repeatedly applied in other Underscore
      // functions.
      var optimizeCb = function (func, context, argCount) {
        if (context === void 0)
          return func;
        switch (argCount == null ? 3 : argCount) {
        case 1:
          return function (value) {
            return func.call(context, value)
          };
        case 2:
          return function (value, other) {
            return func.call(context, value, other)
          };
        case 3:
          return function (value, index, collection) {
            return func.call(context, value, index, collection)
          };
        case 4:
          return function (accumulator, value, index, collection) {
            return func.call(context, accumulator, value, index, collection)
          }
        }
        return function () {
          return func.apply(context, arguments)
        }
      };
      // A mostly-internal function to generate callbacks that can be applied
      // to each element in a collection, returning the desired result — either
      // identity, an arbitrary callback, a property matcher, or a property accessor.
      var cb = function (value, context, argCount) {
        if (value == null)
          return _.identity;
        if (_.isFunction(value))
          return optimizeCb(value, context, argCount);
        if (_.isObject(value))
          return _.matcher(value);
        return _.property(value)
      };
      _.iteratee = function (value, context) {
        return cb(value, context, Infinity)
      };
      // An internal function for creating assigner functions.
      var createAssigner = function (keysFunc, undefinedOnly) {
        return function (obj) {
          var length = arguments.length;
          if (length < 2 || obj == null)
            return obj;
          for (var index = 1; index < length; index++) {
            var source = arguments[index], keys = keysFunc(source), l = keys.length;
            for (var i = 0; i < l; i++) {
              var key = keys[i];
              if (!undefinedOnly || obj[key] === void 0)
                obj[key] = source[key]
            }
          }
          return obj
        }
      };
      // An internal function for creating a new object that inherits from another.
      var baseCreate = function (prototype) {
        if (!_.isObject(prototype))
          return {};
        if (nativeCreate)
          return nativeCreate(prototype);
        Ctor.prototype = prototype;
        var result = new Ctor;
        Ctor.prototype = null;
        return result
      };
      var property = function (key) {
        return function (obj) {
          return obj == null ? void 0 : obj[key]
        }
      };
      // Helper for collection methods to determine whether a collection
      // should be iterated as an array or as an object
      // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
      // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
      var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
      var getLength = property('length');
      var isArrayLike = function (collection) {
        var length = getLength(collection);
        return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX
      };
      // Collection Functions
      // --------------------
      // The cornerstone, an `each` implementation, aka `forEach`.
      // Handles raw objects in addition to array-likes. Treats all
      // sparse array-likes as if they were dense.
      _.each = _.forEach = function (obj, iteratee, context) {
        iteratee = optimizeCb(iteratee, context);
        var i, length;
        if (isArrayLike(obj)) {
          for (i = 0, length = obj.length; i < length; i++) {
            iteratee(obj[i], i, obj)
          }
        } else {
          var keys = _.keys(obj);
          for (i = 0, length = keys.length; i < length; i++) {
            iteratee(obj[keys[i]], keys[i], obj)
          }
        }
        return obj
      };
      // Return the results of applying the iteratee to each element.
      _.map = _.collect = function (obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, results = Array(length);
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          results[index] = iteratee(obj[currentKey], currentKey, obj)
        }
        return results
      };
      // Create a reducing function iterating left or right.
      function createReduce(dir) {
        // Optimized iterator function as using arguments.length
        // in the main function will deoptimize the, see #1991.
        function iterator(obj, iteratee, memo, keys, index, length) {
          for (; index >= 0 && index < length; index += dir) {
            var currentKey = keys ? keys[index] : index;
            memo = iteratee(memo, obj[currentKey], currentKey, obj)
          }
          return memo
        }
        return function (obj, iteratee, memo, context) {
          iteratee = optimizeCb(iteratee, context, 4);
          var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length, index = dir > 0 ? 0 : length - 1;
          // Determine the initial value if none is provided.
          if (arguments.length < 3) {
            memo = obj[keys ? keys[index] : index];
            index += dir
          }
          return iterator(obj, iteratee, memo, keys, index, length)
        }
      }
      // **Reduce** builds up a single result from a list of values, aka `inject`,
      // or `foldl`.
      _.reduce = _.foldl = _.inject = createReduce(1);
      // The right-associative version of reduce, also known as `foldr`.
      _.reduceRight = _.foldr = createReduce(-1);
      // Return the first value which passes a truth test. Aliased as `detect`.
      _.find = _.detect = function (obj, predicate, context) {
        var key;
        if (isArrayLike(obj)) {
          key = _.findIndex(obj, predicate, context)
        } else {
          key = _.findKey(obj, predicate, context)
        }
        if (key !== void 0 && key !== -1)
          return obj[key]
      };
      // Return all the elements that pass a truth test.
      // Aliased as `select`.
      _.filter = _.select = function (obj, predicate, context) {
        var results = [];
        predicate = cb(predicate, context);
        _.each(obj, function (value, index, list) {
          if (predicate(value, index, list))
            results.push(value)
        });
        return results
      };
      // Return all the elements for which a truth test fails.
      _.reject = function (obj, predicate, context) {
        return _.filter(obj, _.negate(cb(predicate)), context)
      };
      // Determine whether all of the elements match a truth test.
      // Aliased as `all`.
      _.every = _.all = function (obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          if (!predicate(obj[currentKey], currentKey, obj))
            return false
        }
        return true
      };
      // Determine if at least one element in the object matches a truth test.
      // Aliased as `any`.
      _.some = _.any = function (obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = !isArrayLike(obj) && _.keys(obj), length = (keys || obj).length;
        for (var index = 0; index < length; index++) {
          var currentKey = keys ? keys[index] : index;
          if (predicate(obj[currentKey], currentKey, obj))
            return true
        }
        return false
      };
      // Determine if the array or object contains a given item (using `===`).
      // Aliased as `includes` and `include`.
      _.contains = _.includes = _.include = function (obj, item, fromIndex, guard) {
        if (!isArrayLike(obj))
          obj = _.values(obj);
        if (typeof fromIndex != 'number' || guard)
          fromIndex = 0;
        return _.indexOf(obj, item, fromIndex) >= 0
      };
      // Invoke a method (with arguments) on every item in a collection.
      _.invoke = function (obj, method) {
        var args = slice.call(arguments, 2);
        var isFunc = _.isFunction(method);
        return _.map(obj, function (value) {
          var func = isFunc ? method : value[method];
          return func == null ? func : func.apply(value, args)
        })
      };
      // Convenience version of a common use case of `map`: fetching a property.
      _.pluck = function (obj, key) {
        return _.map(obj, _.property(key))
      };
      // Convenience version of a common use case of `filter`: selecting only objects
      // containing specific `key:value` pairs.
      _.where = function (obj, attrs) {
        return _.filter(obj, _.matcher(attrs))
      };
      // Convenience version of a common use case of `find`: getting the first object
      // containing specific `key:value` pairs.
      _.findWhere = function (obj, attrs) {
        return _.find(obj, _.matcher(attrs))
      };
      // Return the maximum element (or element-based computation).
      _.max = function (obj, iteratee, context) {
        var result = -Infinity, lastComputed = -Infinity, value, computed;
        if (iteratee == null && obj != null) {
          obj = isArrayLike(obj) ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value > result) {
              result = value
            }
          }
        } else {
          iteratee = cb(iteratee, context);
          _.each(obj, function (value, index, list) {
            computed = iteratee(value, index, list);
            if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
              result = value;
              lastComputed = computed
            }
          })
        }
        return result
      };
      // Return the minimum element (or element-based computation).
      _.min = function (obj, iteratee, context) {
        var result = Infinity, lastComputed = Infinity, value, computed;
        if (iteratee == null && obj != null) {
          obj = isArrayLike(obj) ? obj : _.values(obj);
          for (var i = 0, length = obj.length; i < length; i++) {
            value = obj[i];
            if (value < result) {
              result = value
            }
          }
        } else {
          iteratee = cb(iteratee, context);
          _.each(obj, function (value, index, list) {
            computed = iteratee(value, index, list);
            if (computed < lastComputed || computed === Infinity && result === Infinity) {
              result = value;
              lastComputed = computed
            }
          })
        }
        return result
      };
      // Shuffle a collection, using the modern version of the
      // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
      _.shuffle = function (obj) {
        var set = isArrayLike(obj) ? obj : _.values(obj);
        var length = set.length;
        var shuffled = Array(length);
        for (var index = 0, rand; index < length; index++) {
          rand = _.random(0, index);
          if (rand !== index)
            shuffled[index] = shuffled[rand];
          shuffled[rand] = set[index]
        }
        return shuffled
      };
      // Sample **n** random values from a collection.
      // If **n** is not specified, returns a single random element.
      // The internal `guard` argument allows it to work with `map`.
      _.sample = function (obj, n, guard) {
        if (n == null || guard) {
          if (!isArrayLike(obj))
            obj = _.values(obj);
          return obj[_.random(obj.length - 1)]
        }
        return _.shuffle(obj).slice(0, Math.max(0, n))
      };
      // Sort the object's values by a criterion produced by an iteratee.
      _.sortBy = function (obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        return _.pluck(_.map(obj, function (value, index, list) {
          return {
            value: value,
            index: index,
            criteria: iteratee(value, index, list)
          }
        }).sort(function (left, right) {
          var a = left.criteria;
          var b = right.criteria;
          if (a !== b) {
            if (a > b || a === void 0)
              return 1;
            if (a < b || b === void 0)
              return -1
          }
          return left.index - right.index
        }), 'value')
      };
      // An internal function used for aggregate "group by" operations.
      var group = function (behavior) {
        return function (obj, iteratee, context) {
          var result = {};
          iteratee = cb(iteratee, context);
          _.each(obj, function (value, index) {
            var key = iteratee(value, index, obj);
            behavior(result, value, key)
          });
          return result
        }
      };
      // Groups the object's values by a criterion. Pass either a string attribute
      // to group by, or a function that returns the criterion.
      _.groupBy = group(function (result, value, key) {
        if (_.has(result, key))
          result[key].push(value);
        else
          result[key] = [value]
      });
      // Indexes the object's values by a criterion, similar to `groupBy`, but for
      // when you know that your index values will be unique.
      _.indexBy = group(function (result, value, key) {
        result[key] = value
      });
      // Counts instances of an object that group by a certain criterion. Pass
      // either a string attribute to count by, or a function that returns the
      // criterion.
      _.countBy = group(function (result, value, key) {
        if (_.has(result, key))
          result[key]++;
        else
          result[key] = 1
      });
      // Safely create a real, live array from anything iterable.
      _.toArray = function (obj) {
        if (!obj)
          return [];
        if (_.isArray(obj))
          return slice.call(obj);
        if (isArrayLike(obj))
          return _.map(obj, _.identity);
        return _.values(obj)
      };
      // Return the number of elements in an object.
      _.size = function (obj) {
        if (obj == null)
          return 0;
        return isArrayLike(obj) ? obj.length : _.keys(obj).length
      };
      // Split a collection into two arrays: one whose elements all satisfy the given
      // predicate, and one whose elements all do not satisfy the predicate.
      _.partition = function (obj, predicate, context) {
        predicate = cb(predicate, context);
        var pass = [], fail = [];
        _.each(obj, function (value, key, obj) {
          (predicate(value, key, obj) ? pass : fail).push(value)
        });
        return [
          pass,
          fail
        ]
      };
      // Array Functions
      // ---------------
      // Get the first element of an array. Passing **n** will return the first N
      // values in the array. Aliased as `head` and `take`. The **guard** check
      // allows it to work with `_.map`.
      _.first = _.head = _.take = function (array, n, guard) {
        if (array == null)
          return void 0;
        if (n == null || guard)
          return array[0];
        return _.initial(array, array.length - n)
      };
      // Returns everything but the last entry of the array. Especially useful on
      // the arguments object. Passing **n** will return all the values in
      // the array, excluding the last N.
      _.initial = function (array, n, guard) {
        return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)))
      };
      // Get the last element of an array. Passing **n** will return the last N
      // values in the array.
      _.last = function (array, n, guard) {
        if (array == null)
          return void 0;
        if (n == null || guard)
          return array[array.length - 1];
        return _.rest(array, Math.max(0, array.length - n))
      };
      // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
      // Especially useful on the arguments object. Passing an **n** will return
      // the rest N values in the array.
      _.rest = _.tail = _.drop = function (array, n, guard) {
        return slice.call(array, n == null || guard ? 1 : n)
      };
      // Trim out all falsy values from an array.
      _.compact = function (array) {
        return _.filter(array, _.identity)
      };
      // Internal implementation of a recursive `flatten` function.
      var flatten = function (input, shallow, strict, startIndex) {
        var output = [], idx = 0;
        for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
          var value = input[i];
          if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
            //flatten current level of array or arguments object
            if (!shallow)
              value = flatten(value, shallow, strict);
            var j = 0, len = value.length;
            output.length += len;
            while (j < len) {
              output[idx++] = value[j++]
            }
          } else if (!strict) {
            output[idx++] = value
          }
        }
        return output
      };
      // Flatten out an array, either recursively (by default), or just one level.
      _.flatten = function (array, shallow) {
        return flatten(array, shallow, false)
      };
      // Return a version of the array that does not contain the specified value(s).
      _.without = function (array) {
        return _.difference(array, slice.call(arguments, 1))
      };
      // Produce a duplicate-free version of the array. If the array has already
      // been sorted, you have the option of using a faster algorithm.
      // Aliased as `unique`.
      _.uniq = _.unique = function (array, isSorted, iteratee, context) {
        if (!_.isBoolean(isSorted)) {
          context = iteratee;
          iteratee = isSorted;
          isSorted = false
        }
        if (iteratee != null)
          iteratee = cb(iteratee, context);
        var result = [];
        var seen = [];
        for (var i = 0, length = getLength(array); i < length; i++) {
          var value = array[i], computed = iteratee ? iteratee(value, i, array) : value;
          if (isSorted) {
            if (!i || seen !== computed)
              result.push(value);
            seen = computed
          } else if (iteratee) {
            if (!_.contains(seen, computed)) {
              seen.push(computed);
              result.push(value)
            }
          } else if (!_.contains(result, value)) {
            result.push(value)
          }
        }
        return result
      };
      // Produce an array that contains the union: each distinct element from all of
      // the passed-in arrays.
      _.union = function () {
        return _.uniq(flatten(arguments, true, true))
      };
      // Produce an array that contains every item shared between all the
      // passed-in arrays.
      _.intersection = function (array) {
        var result = [];
        var argsLength = arguments.length;
        for (var i = 0, length = getLength(array); i < length; i++) {
          var item = array[i];
          if (_.contains(result, item))
            continue;
          for (var j = 1; j < argsLength; j++) {
            if (!_.contains(arguments[j], item))
              break
          }
          if (j === argsLength)
            result.push(item)
        }
        return result
      };
      // Take the difference between one array and a number of other arrays.
      // Only the elements present in just the first array will remain.
      _.difference = function (array) {
        var rest = flatten(arguments, true, true, 1);
        return _.filter(array, function (value) {
          return !_.contains(rest, value)
        })
      };
      // Zip together multiple lists into a single array -- elements that share
      // an index go together.
      _.zip = function () {
        return _.unzip(arguments)
      };
      // Complement of _.zip. Unzip accepts an array of arrays and groups
      // each array's elements on shared indices
      _.unzip = function (array) {
        var length = array && _.max(array, getLength).length || 0;
        var result = Array(length);
        for (var index = 0; index < length; index++) {
          result[index] = _.pluck(array, index)
        }
        return result
      };
      // Converts lists into objects. Pass either a single array of `[key, value]`
      // pairs, or two parallel arrays of the same length -- one of keys, and one of
      // the corresponding values.
      _.object = function (list, values) {
        var result = {};
        for (var i = 0, length = getLength(list); i < length; i++) {
          if (values) {
            result[list[i]] = values[i]
          } else {
            result[list[i][0]] = list[i][1]
          }
        }
        return result
      };
      // Generator function to create the findIndex and findLastIndex functions
      function createPredicateIndexFinder(dir) {
        return function (array, predicate, context) {
          predicate = cb(predicate, context);
          var length = getLength(array);
          var index = dir > 0 ? 0 : length - 1;
          for (; index >= 0 && index < length; index += dir) {
            if (predicate(array[index], index, array))
              return index
          }
          return -1
        }
      }
      // Returns the first index on an array-like that passes a predicate test
      _.findIndex = createPredicateIndexFinder(1);
      _.findLastIndex = createPredicateIndexFinder(-1);
      // Use a comparator function to figure out the smallest index at which
      // an object should be inserted so as to maintain order. Uses binary search.
      _.sortedIndex = function (array, obj, iteratee, context) {
        iteratee = cb(iteratee, context, 1);
        var value = iteratee(obj);
        var low = 0, high = getLength(array);
        while (low < high) {
          var mid = Math.floor((low + high) / 2);
          if (iteratee(array[mid]) < value)
            low = mid + 1;
          else
            high = mid
        }
        return low
      };
      // Generator function to create the indexOf and lastIndexOf functions
      function createIndexFinder(dir, predicateFind, sortedIndex) {
        return function (array, item, idx) {
          var i = 0, length = getLength(array);
          if (typeof idx == 'number') {
            if (dir > 0) {
              i = idx >= 0 ? idx : Math.max(idx + length, i)
            } else {
              length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1
            }
          } else if (sortedIndex && idx && length) {
            idx = sortedIndex(array, item);
            return array[idx] === item ? idx : -1
          }
          if (item !== item) {
            idx = predicateFind(slice.call(array, i, length), _.isNaN);
            return idx >= 0 ? idx + i : -1
          }
          for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
            if (array[idx] === item)
              return idx
          }
          return -1
        }
      }
      // Return the position of the first occurrence of an item in an array,
      // or -1 if the item is not included in the array.
      // If the array is large and already in sort order, pass `true`
      // for **isSorted** to use binary search.
      _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
      _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);
      // Generate an integer Array containing an arithmetic progression. A port of
      // the native Python `range()` function. See
      // [the Python documentation](http://docs.python.org/library/functions.html#range).
      _.range = function (start, stop, step) {
        if (stop == null) {
          stop = start || 0;
          start = 0
        }
        step = step || 1;
        var length = Math.max(Math.ceil((stop - start) / step), 0);
        var range = Array(length);
        for (var idx = 0; idx < length; idx++, start += step) {
          range[idx] = start
        }
        return range
      };
      // Function (ahem) Functions
      // ------------------
      // Determines whether to execute a function as a constructor
      // or a normal function with the provided arguments
      var executeBound = function (sourceFunc, boundFunc, context, callingContext, args) {
        if (!(callingContext instanceof boundFunc))
          return sourceFunc.apply(context, args);
        var self = baseCreate(sourceFunc.prototype);
        var result = sourceFunc.apply(self, args);
        if (_.isObject(result))
          return result;
        return self
      };
      // Create a function bound to a given object (assigning `this`, and arguments,
      // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
      // available.
      _.bind = function (func, context) {
        if (nativeBind && func.bind === nativeBind)
          return nativeBind.apply(func, slice.call(arguments, 1));
        if (!_.isFunction(func))
          throw new TypeError('Bind must be called on a function');
        var args = slice.call(arguments, 2);
        var bound = function () {
          return executeBound(func, bound, context, this, args.concat(slice.call(arguments)))
        };
        return bound
      };
      // Partially apply a function by creating a version that has had some of its
      // arguments pre-filled, without changing its dynamic `this` context. _ acts
      // as a placeholder, allowing any combination of arguments to be pre-filled.
      _.partial = function (func) {
        var boundArgs = slice.call(arguments, 1);
        var bound = function () {
          var position = 0, length = boundArgs.length;
          var args = Array(length);
          for (var i = 0; i < length; i++) {
            args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i]
          }
          while (position < arguments.length)
            args.push(arguments[position++]);
          return executeBound(func, bound, this, this, args)
        };
        return bound
      };
      // Bind a number of an object's methods to that object. Remaining arguments
      // are the method names to be bound. Useful for ensuring that all callbacks
      // defined on an object belong to it.
      _.bindAll = function (obj) {
        var i, length = arguments.length, key;
        if (length <= 1)
          throw new Error('bindAll must be passed function names');
        for (i = 1; i < length; i++) {
          key = arguments[i];
          obj[key] = _.bind(obj[key], obj)
        }
        return obj
      };
      // Memoize an expensive function by storing its results.
      _.memoize = function (func, hasher) {
        var memoize = function (key) {
          var cache = memoize.cache;
          var address = '' + (hasher ? hasher.apply(this, arguments) : key);
          if (!_.has(cache, address))
            cache[address] = func.apply(this, arguments);
          return cache[address]
        };
        memoize.cache = {};
        return memoize
      };
      // Delays a function for the given number of milliseconds, and then calls
      // it with the arguments supplied.
      _.delay = function (func, wait) {
        var args = slice.call(arguments, 2);
        return setTimeout(function () {
          return func.apply(null, args)
        }, wait)
      };
      // Defers a function, scheduling it to run after the current call stack has
      // cleared.
      _.defer = _.partial(_.delay, _, 1);
      // Returns a function, that, when invoked, will only be triggered at most once
      // during a given window of time. Normally, the throttled function will run
      // as much as it can, without ever going more than once per `wait` duration;
      // but if you'd like to disable the execution on the leading edge, pass
      // `{leading: false}`. To disable execution on the trailing edge, ditto.
      _.throttle = function (func, wait, options) {
        var context, args, result;
        var timeout = null;
        var previous = 0;
        if (!options)
          options = {};
        var later = function () {
          previous = options.leading === false ? 0 : _.now();
          timeout = null;
          result = func.apply(context, args);
          if (!timeout)
            context = args = null
        };
        return function () {
          var now = _.now();
          if (!previous && options.leading === false)
            previous = now;
          var remaining = wait - (now - previous);
          context = this;
          args = arguments;
          if (remaining <= 0 || remaining > wait) {
            if (timeout) {
              clearTimeout(timeout);
              timeout = null
            }
            previous = now;
            result = func.apply(context, args);
            if (!timeout)
              context = args = null
          } else if (!timeout && options.trailing !== false) {
            timeout = setTimeout(later, remaining)
          }
          return result
        }
      };
      // Returns a function, that, as long as it continues to be invoked, will not
      // be triggered. The function will be called after it stops being called for
      // N milliseconds. If `immediate` is passed, trigger the function on the
      // leading edge, instead of the trailing.
      _.debounce = function (func, wait, immediate) {
        var timeout, args, context, timestamp, result;
        var later = function () {
          var last = _.now() - timestamp;
          if (last < wait && last >= 0) {
            timeout = setTimeout(later, wait - last)
          } else {
            timeout = null;
            if (!immediate) {
              result = func.apply(context, args);
              if (!timeout)
                context = args = null
            }
          }
        };
        return function () {
          context = this;
          args = arguments;
          timestamp = _.now();
          var callNow = immediate && !timeout;
          if (!timeout)
            timeout = setTimeout(later, wait);
          if (callNow) {
            result = func.apply(context, args);
            context = args = null
          }
          return result
        }
      };
      // Returns the first function passed as an argument to the second,
      // allowing you to adjust arguments, run code before and after, and
      // conditionally execute the original function.
      _.wrap = function (func, wrapper) {
        return _.partial(wrapper, func)
      };
      // Returns a negated version of the passed-in predicate.
      _.negate = function (predicate) {
        return function () {
          return !predicate.apply(this, arguments)
        }
      };
      // Returns a function that is the composition of a list of functions, each
      // consuming the return value of the function that follows.
      _.compose = function () {
        var args = arguments;
        var start = args.length - 1;
        return function () {
          var i = start;
          var result = args[start].apply(this, arguments);
          while (i--)
            result = args[i].call(this, result);
          return result
        }
      };
      // Returns a function that will only be executed on and after the Nth call.
      _.after = function (times, func) {
        return function () {
          if (--times < 1) {
            return func.apply(this, arguments)
          }
        }
      };
      // Returns a function that will only be executed up to (but not including) the Nth call.
      _.before = function (times, func) {
        var memo;
        return function () {
          if (--times > 0) {
            memo = func.apply(this, arguments)
          }
          if (times <= 1)
            func = null;
          return memo
        }
      };
      // Returns a function that will be executed at most one time, no matter how
      // often you call it. Useful for lazy initialization.
      _.once = _.partial(_.before, 2);
      // Object Functions
      // ----------------
      // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
      var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');
      var nonEnumerableProps = [
        'valueOf',
        'isPrototypeOf',
        'toString',
        'propertyIsEnumerable',
        'hasOwnProperty',
        'toLocaleString'
      ];
      function collectNonEnumProps(obj, keys) {
        var nonEnumIdx = nonEnumerableProps.length;
        var constructor = obj.constructor;
        var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;
        // Constructor is a special case.
        var prop = 'constructor';
        if (_.has(obj, prop) && !_.contains(keys, prop))
          keys.push(prop);
        while (nonEnumIdx--) {
          prop = nonEnumerableProps[nonEnumIdx];
          if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
            keys.push(prop)
          }
        }
      }
      // Retrieve the names of an object's own properties.
      // Delegates to **ECMAScript 5**'s native `Object.keys`
      _.keys = function (obj) {
        if (!_.isObject(obj))
          return [];
        if (nativeKeys)
          return nativeKeys(obj);
        var keys = [];
        for (var key in obj)
          if (_.has(obj, key))
            keys.push(key);
        // Ahem, IE < 9.
        if (hasEnumBug)
          collectNonEnumProps(obj, keys);
        return keys
      };
      // Retrieve all the property names of an object.
      _.allKeys = function (obj) {
        if (!_.isObject(obj))
          return [];
        var keys = [];
        for (var key in obj)
          keys.push(key);
        // Ahem, IE < 9.
        if (hasEnumBug)
          collectNonEnumProps(obj, keys);
        return keys
      };
      // Retrieve the values of an object's properties.
      _.values = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var values = Array(length);
        for (var i = 0; i < length; i++) {
          values[i] = obj[keys[i]]
        }
        return values
      };
      // Returns the results of applying the iteratee to each element of the object
      // In contrast to _.map it returns an object
      _.mapObject = function (obj, iteratee, context) {
        iteratee = cb(iteratee, context);
        var keys = _.keys(obj), length = keys.length, results = {}, currentKey;
        for (var index = 0; index < length; index++) {
          currentKey = keys[index];
          results[currentKey] = iteratee(obj[currentKey], currentKey, obj)
        }
        return results
      };
      // Convert an object into a list of `[key, value]` pairs.
      _.pairs = function (obj) {
        var keys = _.keys(obj);
        var length = keys.length;
        var pairs = Array(length);
        for (var i = 0; i < length; i++) {
          pairs[i] = [
            keys[i],
            obj[keys[i]]
          ]
        }
        return pairs
      };
      // Invert the keys and values of an object. The values must be serializable.
      _.invert = function (obj) {
        var result = {};
        var keys = _.keys(obj);
        for (var i = 0, length = keys.length; i < length; i++) {
          result[obj[keys[i]]] = keys[i]
        }
        return result
      };
      // Return a sorted list of the function names available on the object.
      // Aliased as `methods`
      _.functions = _.methods = function (obj) {
        var names = [];
        for (var key in obj) {
          if (_.isFunction(obj[key]))
            names.push(key)
        }
        return names.sort()
      };
      // Extend a given object with all the properties in passed-in object(s).
      _.extend = createAssigner(_.allKeys);
      // Assigns a given object with all the own properties in the passed-in object(s)
      // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
      _.extendOwn = _.assign = createAssigner(_.keys);
      // Returns the first key on an object that passes a predicate test
      _.findKey = function (obj, predicate, context) {
        predicate = cb(predicate, context);
        var keys = _.keys(obj), key;
        for (var i = 0, length = keys.length; i < length; i++) {
          key = keys[i];
          if (predicate(obj[key], key, obj))
            return key
        }
      };
      // Return a copy of the object only containing the whitelisted properties.
      _.pick = function (object, oiteratee, context) {
        var result = {}, obj = object, iteratee, keys;
        if (obj == null)
          return result;
        if (_.isFunction(oiteratee)) {
          keys = _.allKeys(obj);
          iteratee = optimizeCb(oiteratee, context)
        } else {
          keys = flatten(arguments, false, false, 1);
          iteratee = function (value, key, obj) {
            return key in obj
          };
          obj = Object(obj)
        }
        for (var i = 0, length = keys.length; i < length; i++) {
          var key = keys[i];
          var value = obj[key];
          if (iteratee(value, key, obj))
            result[key] = value
        }
        return result
      };
      // Return a copy of the object without the blacklisted properties.
      _.omit = function (obj, iteratee, context) {
        if (_.isFunction(iteratee)) {
          iteratee = _.negate(iteratee)
        } else {
          var keys = _.map(flatten(arguments, false, false, 1), String);
          iteratee = function (value, key) {
            return !_.contains(keys, key)
          }
        }
        return _.pick(obj, iteratee, context)
      };
      // Fill in a given object with default properties.
      _.defaults = createAssigner(_.allKeys, true);
      // Creates an object that inherits from the given prototype object.
      // If additional properties are provided then they will be added to the
      // created object.
      _.create = function (prototype, props) {
        var result = baseCreate(prototype);
        if (props)
          _.extendOwn(result, props);
        return result
      };
      // Create a (shallow-cloned) duplicate of an object.
      _.clone = function (obj) {
        if (!_.isObject(obj))
          return obj;
        return _.isArray(obj) ? obj.slice() : _.extend({}, obj)
      };
      // Invokes interceptor with the obj, and then returns obj.
      // The primary purpose of this method is to "tap into" a method chain, in
      // order to perform operations on intermediate results within the chain.
      _.tap = function (obj, interceptor) {
        interceptor(obj);
        return obj
      };
      // Returns whether an object has a given set of `key:value` pairs.
      _.isMatch = function (object, attrs) {
        var keys = _.keys(attrs), length = keys.length;
        if (object == null)
          return !length;
        var obj = Object(object);
        for (var i = 0; i < length; i++) {
          var key = keys[i];
          if (attrs[key] !== obj[key] || !(key in obj))
            return false
        }
        return true
      };
      // Internal recursive comparison function for `isEqual`.
      var eq = function (a, b, aStack, bStack) {
        // Identical objects are equal. `0 === -0`, but they aren't identical.
        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
        if (a === b)
          return a !== 0 || 1 / a === 1 / b;
        // A strict comparison is necessary because `null == undefined`.
        if (a == null || b == null)
          return a === b;
        // Unwrap any wrapped objects.
        if (a instanceof _)
          a = a._wrapped;
        if (b instanceof _)
          b = b._wrapped;
        // Compare `[[Class]]` names.
        var className = toString.call(a);
        if (className !== toString.call(b))
          return false;
        switch (className) {
        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
        case '[object RegExp]':
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
        case '[object String]':
          // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
          // equivalent to `new String("5")`.
          return '' + a === '' + b;
        case '[object Number]':
          // `NaN`s are equivalent, but non-reflexive.
          // Object(NaN) is equivalent to NaN
          if (+a !== +a)
            return +b !== +b;
          // An `egal` comparison is performed for other numeric values.
          return +a === 0 ? 1 / +a === 1 / b : +a === +b;
        case '[object Date]':
        case '[object Boolean]':
          // Coerce dates and booleans to numeric primitive values. Dates are compared by their
          // millisecond representations. Note that invalid dates with millisecond representations
          // of `NaN` are not equivalent.
          return +a === +b
        }
        var areArrays = className === '[object Array]';
        if (!areArrays) {
          if (typeof a != 'object' || typeof b != 'object')
            return false;
          // Objects with different constructors are not equivalent, but `Object`s or `Array`s
          // from different frames are.
          var aCtor = a.constructor, bCtor = b.constructor;
          if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor && _.isFunction(bCtor) && bCtor instanceof bCtor) && ('constructor' in a && 'constructor' in b)) {
            return false
          }
        }
        // Assume equality for cyclic structures. The algorithm for detecting cyclic
        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
        // Initializing stack of traversed objects.
        // It's done here since we only need them for objects and arrays comparison.
        aStack = aStack || [];
        bStack = bStack || [];
        var length = aStack.length;
        while (length--) {
          // Linear search. Performance is inversely proportional to the number of
          // unique nested structures.
          if (aStack[length] === a)
            return bStack[length] === b
        }
        // Add the first object to the stack of traversed objects.
        aStack.push(a);
        bStack.push(b);
        // Recursively compare objects and arrays.
        if (areArrays) {
          // Compare array lengths to determine if a deep comparison is necessary.
          length = a.length;
          if (length !== b.length)
            return false;
          // Deep compare the contents, ignoring non-numeric properties.
          while (length--) {
            if (!eq(a[length], b[length], aStack, bStack))
              return false
          }
        } else {
          // Deep compare objects.
          var keys = _.keys(a), key;
          length = keys.length;
          // Ensure that both objects contain the same number of properties before comparing deep equality.
          if (_.keys(b).length !== length)
            return false;
          while (length--) {
            // Deep compare each member
            key = keys[length];
            if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack)))
              return false
          }
        }
        // Remove the first object from the stack of traversed objects.
        aStack.pop();
        bStack.pop();
        return true
      };
      // Perform a deep comparison to check if two objects are equal.
      _.isEqual = function (a, b) {
        return eq(a, b)
      };
      // Is a given array, string, or object empty?
      // An "empty" object has no enumerable own-properties.
      _.isEmpty = function (obj) {
        if (obj == null)
          return true;
        if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)))
          return obj.length === 0;
        return _.keys(obj).length === 0
      };
      // Is a given value a DOM element?
      _.isElement = function (obj) {
        return !!(obj && obj.nodeType === 1)
      };
      // Is a given value an array?
      // Delegates to ECMA5's native Array.isArray
      _.isArray = nativeIsArray || function (obj) {
        return toString.call(obj) === '[object Array]'
      };
      // Is a given variable an object?
      _.isObject = function (obj) {
        var type = typeof obj;
        return type === 'function' || type === 'object' && !!obj
      };
      // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
      _.each([
        'Arguments',
        'Function',
        'String',
        'Number',
        'Date',
        'RegExp',
        'Error'
      ], function (name) {
        _['is' + name] = function (obj) {
          return toString.call(obj) === '[object ' + name + ']'
        }
      });
      // Define a fallback version of the method in browsers (ahem, IE < 9), where
      // there isn't any inspectable "Arguments" type.
      if (!_.isArguments(arguments)) {
        _.isArguments = function (obj) {
          return _.has(obj, 'callee')
        }
      }
      // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
      // IE 11 (#1621), and in Safari 8 (#1929).
      if (typeof /./ != 'function' && typeof Int8Array != 'object') {
        _.isFunction = function (obj) {
          return typeof obj == 'function' || false
        }
      }
      // Is a given object a finite number?
      _.isFinite = function (obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj))
      };
      // Is the given value `NaN`? (NaN is the only number which does not equal itself).
      _.isNaN = function (obj) {
        return _.isNumber(obj) && obj !== +obj
      };
      // Is a given value a boolean?
      _.isBoolean = function (obj) {
        return obj === true || obj === false || toString.call(obj) === '[object Boolean]'
      };
      // Is a given value equal to null?
      _.isNull = function (obj) {
        return obj === null
      };
      // Is a given variable undefined?
      _.isUndefined = function (obj) {
        return obj === void 0
      };
      // Shortcut function for checking if an object has a given property directly
      // on itself (in other words, not on a prototype).
      _.has = function (obj, key) {
        return obj != null && hasOwnProperty.call(obj, key)
      };
      // Utility Functions
      // -----------------
      // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
      // previous owner. Returns a reference to the Underscore object.
      _.noConflict = function () {
        root._ = previousUnderscore;
        return this
      };
      // Keep the identity function around for default iteratees.
      _.identity = function (value) {
        return value
      };
      // Predicate-generating functions. Often useful outside of Underscore.
      _.constant = function (value) {
        return function () {
          return value
        }
      };
      _.noop = function () {
      };
      _.property = property;
      // Generates a function for a given object that returns a given property.
      _.propertyOf = function (obj) {
        return obj == null ? function () {
        } : function (key) {
          return obj[key]
        }
      };
      // Returns a predicate for checking whether an object has a given set of
      // `key:value` pairs.
      _.matcher = _.matches = function (attrs) {
        attrs = _.extendOwn({}, attrs);
        return function (obj) {
          return _.isMatch(obj, attrs)
        }
      };
      // Run a function **n** times.
      _.times = function (n, iteratee, context) {
        var accum = Array(Math.max(0, n));
        iteratee = optimizeCb(iteratee, context, 1);
        for (var i = 0; i < n; i++)
          accum[i] = iteratee(i);
        return accum
      };
      // Return a random integer between min and max (inclusive).
      _.random = function (min, max) {
        if (max == null) {
          max = min;
          min = 0
        }
        return min + Math.floor(Math.random() * (max - min + 1))
      };
      // A (possibly faster) way to get the current timestamp as an integer.
      _.now = Date.now || function () {
        return new Date().getTime()
      };
      // List of HTML entities for escaping.
      var escapeMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#x27;',
        '`': '&#x60;'
      };
      var unescapeMap = _.invert(escapeMap);
      // Functions for escaping and unescaping strings to/from HTML interpolation.
      var createEscaper = function (map) {
        var escaper = function (match) {
          return map[match]
        };
        // Regexes for identifying a key that needs to be escaped
        var source = '(?:' + _.keys(map).join('|') + ')';
        var testRegexp = RegExp(source);
        var replaceRegexp = RegExp(source, 'g');
        return function (string) {
          string = string == null ? '' : '' + string;
          return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string
        }
      };
      _.escape = createEscaper(escapeMap);
      _.unescape = createEscaper(unescapeMap);
      // If the value of the named `property` is a function then invoke it with the
      // `object` as context; otherwise, return it.
      _.result = function (object, property, fallback) {
        var value = object == null ? void 0 : object[property];
        if (value === void 0) {
          value = fallback
        }
        return _.isFunction(value) ? value.call(object) : value
      };
      // Generate a unique integer id (unique within the entire client session).
      // Useful for temporary DOM ids.
      var idCounter = 0;
      _.uniqueId = function (prefix) {
        var id = ++idCounter + '';
        return prefix ? prefix + id : id
      };
      // By default, Underscore uses ERB-style template delimiters, change the
      // following template settings to use alternative delimiters.
      _.templateSettings = {
        evaluate: /<%([\s\S]+?)%>/g,
        interpolate: /<%=([\s\S]+?)%>/g,
        escape: /<%-([\s\S]+?)%>/g
      };
      // When customizing `templateSettings`, if you don't want to define an
      // interpolation, evaluation or escaping regex, we need one that is
      // guaranteed not to match.
      var noMatch = /(.)^/;
      // Certain characters need to be escaped so that they can be put into a
      // string literal.
      var escapes = {
        "'": "'",
        '\\': '\\',
        '\r': 'r',
        '\n': 'n',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
      };
      var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
      var escapeChar = function (match) {
        return '\\' + escapes[match]
      };
      // JavaScript micro-templating, similar to John Resig's implementation.
      // Underscore templating handles arbitrary delimiters, preserves whitespace,
      // and correctly escapes quotes within interpolated code.
      // NB: `oldSettings` only exists for backwards compatibility.
      _.template = function (text, settings, oldSettings) {
        if (!settings && oldSettings)
          settings = oldSettings;
        settings = _.defaults({}, settings, _.templateSettings);
        // Combine delimiters into one regular expression via alternation.
        var matcher = RegExp([
          (settings.escape || noMatch).source,
          (settings.interpolate || noMatch).source,
          (settings.evaluate || noMatch).source
        ].join('|') + '|$', 'g');
        // Compile the template source, escaping string literals appropriately.
        var index = 0;
        var source = "__p+='";
        text.replace(matcher, function (match, escape, interpolate, evaluate, offset) {
          source += text.slice(index, offset).replace(escaper, escapeChar);
          index = offset + match.length;
          if (escape) {
            source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'"
          } else if (interpolate) {
            source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'"
          } else if (evaluate) {
            source += "';\n" + evaluate + "\n__p+='"
          }
          // Adobe VMs need the match returned to produce the correct offest.
          return match
        });
        source += "';\n";
        // If a variable is not specified, place data values in local scope.
        if (!settings.variable)
          source = 'with(obj||{}){\n' + source + '}\n';
        source = "var __t,__p='',__j=Array.prototype.join," + "print=function(){__p+=__j.call(arguments,'');};\n" + source + 'return __p;\n';
        try {
          var render = new Function(settings.variable || 'obj', '_', source)
        } catch (e) {
          e.source = source;
          throw e
        }
        var template = function (data) {
          return render.call(this, data, _)
        };
        // Provide the compiled source as a convenience for precompilation.
        var argument = settings.variable || 'obj';
        template.source = 'function(' + argument + '){\n' + source + '}';
        return template
      };
      // Add a "chain" function. Start chaining a wrapped Underscore object.
      _.chain = function (obj) {
        var instance = _(obj);
        instance._chain = true;
        return instance
      };
      // OOP
      // ---------------
      // If Underscore is called as a function, it returns a wrapped object that
      // can be used OO-style. This wrapper holds altered versions of all the
      // underscore functions. Wrapped objects may be chained.
      // Helper function to continue chaining intermediate results.
      var result = function (instance, obj) {
        return instance._chain ? _(obj).chain() : obj
      };
      // Add your own custom functions to the Underscore object.
      _.mixin = function (obj) {
        _.each(_.functions(obj), function (name) {
          var func = _[name] = obj[name];
          _.prototype[name] = function () {
            var args = [this._wrapped];
            push.apply(args, arguments);
            return result(this, func.apply(_, args))
          }
        })
      };
      // Add all of the Underscore functions to the wrapper object.
      _.mixin(_);
      // Add all mutator Array functions to the wrapper.
      _.each([
        'pop',
        'push',
        'reverse',
        'shift',
        'sort',
        'splice',
        'unshift'
      ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          var obj = this._wrapped;
          method.apply(obj, arguments);
          if ((name === 'shift' || name === 'splice') && obj.length === 0)
            delete obj[0];
          return result(this, obj)
        }
      });
      // Add all accessor Array functions to the wrapper.
      _.each([
        'concat',
        'join',
        'slice'
      ], function (name) {
        var method = ArrayProto[name];
        _.prototype[name] = function () {
          return result(this, method.apply(this._wrapped, arguments))
        }
      });
      // Extracts the result from a wrapped and chained object.
      _.prototype.value = function () {
        return this._wrapped
      };
      // Provide unwrapping proxy for some methods used in engine operations
      // such as arithmetic and JSON stringification.
      _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
      _.prototype.toString = function () {
        return '' + this._wrapped
      };
      // AMD registration happens at the end for compatibility with AMD loaders
      // that may not enforce next-turn semantics on modules. Even though general
      // practice for AMD registration is to be anonymous, underscore registers
      // as a named module because, like jQuery, it is a base library that is
      // popular enough to be bundled in a third party lib, but not be part of
      // an AMD load request. Those cases could generate an error when an
      // anonymous define() is called outside of a loader request.
      if (typeof define === 'function' && define.amd) {
        define('underscore', [], function () {
          return _
        })
      }
    }.call(this))
  });
  // source: node_modules/crowdcontrol/lib/data/index.js
  require.define('crowdcontrol/lib/data', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    var policy;
    policy = require('crowdcontrol/lib/data/policy');
    module.exports = {
      Api: require('crowdcontrol/lib/data/api'),
      Source: require('crowdcontrol/lib/data/source'),
      Policy: policy.Policy,
      TabularRestfulStreamingPolicy: policy.TabularRestfulStreamingPolicy
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/data/policy.js
  require.define('crowdcontrol/lib/data/policy', function (module, exports, __dirname, __filename) {
  });
  // source: node_modules/crowdcontrol/lib/data/api.js
  require.define('crowdcontrol/lib/data/api', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    var Api, ScheduledTask, ScheduledTaskType, _, apis, log, promise, requestAnimationFrame, utils, xhr;
    _ = require('crowdcontrol/node_modules/underscore/underscore');
    utils = require('crowdcontrol/lib/utils');
    promise = utils.shim.promise;
    xhr = utils.shim.xhr;
    log = utils.log;
    requestAnimationFrame = utils.shim.requestAnimationFrame;
    ScheduledTaskType = {
      every: 'every',
      once: 'once'
    };
    ScheduledTask = function () {
      function ScheduledTask(type, fn1, millis1) {
        this.type = type;
        this.fn = fn1;
        this.millis = millis1;
        this.scheduledTime = _.now() + this.millis;
        this.kill = false
      }
      ScheduledTask.prototype.cancel = function () {
        return this.kill = true
      };
      return ScheduledTask
    }();
    apis = {};
    Api = function () {
      Api.prototype.scheduledTasks = null;
      Api.prototype.url = '';
      Api.prototype.token = '';
      function Api(url1, token) {
        var url;
        this.url = url1 != null ? url1 : '';
        this.token = token != null ? token : '';
        this.scheduledTasks = [];
        url = this.url;
        if (url[url.length - 1] === '/') {
          this.url = url.substring(0, url.length - 1)
        }
      }
      Api.get = function (name) {
        if (name == null) {
          name = ''
        }
        return apis[name]
      };
      Api.prototype.register = function (name) {
        if (name == null) {
          name = ''
        }
        return apis[name] = this
      };
      Api.prototype.get = function (path, data, headers) {
        var p;
        if (headers == null) {
          headers = {}
        }
        if (this.token) {
          headers.Authorization = this.token
        }
        p = path;
        if (p[0] !== '/') {
          p = '/' + path
        }
        return xhr({
          method: 'GET',
          contentType: 'application/json',
          headers: headers,
          url: this.url + p,
          data: JSON.stringify(data)
        })
      };
      Api.prototype.post = function (path, data, headers) {
        var p;
        if (headers == null) {
          headers = {}
        }
        if (this.token) {
          headers.Authorization = this.token
        }
        p = path;
        if (p[0] !== '/') {
          p = '/' + path
        }
        return xhr({
          method: 'POST',
          contentType: 'application/json',
          headers: headers,
          url: this.url + p,
          data: JSON.stringify(data)
        })
      };
      Api.prototype.put = function (path, data, headers) {
        var p;
        if (headers == null) {
          headers = {}
        }
        if (this.token) {
          headers.Authorization = this.token
        }
        p = path;
        if (p[0] !== '/') {
          p = '/' + path
        }
        return xhr({
          method: 'PUT',
          contentType: 'application/json',
          headers: headers,
          url: this.url + p,
          data: JSON.stringify(data)
        })
      };
      Api.prototype.patch = function (path, data, headers) {
        var p;
        if (headers == null) {
          headers = {}
        }
        if (this.token) {
          headers.Authorization = this.token
        }
        p = path;
        if (p[0] !== '/') {
          p = '/' + path
        }
        return xhr({
          method: 'PATCH',
          contentType: 'application/json',
          headers: headers,
          url: this.url + p,
          data: JSON.stringify(data)
        })
      };
      Api.prototype['delete'] = function (path, data, headers) {
        var p;
        if (headers == null) {
          headers = {}
        }
        if (this.token) {
          headers.Authorization = this.token
        }
        p = path;
        if (p[0] !== '/') {
          p = '/' + path
        }
        return xhr({
          method: 'DELETE',
          contentType: 'application/json',
          headers: headers,
          url: this.url + p,
          data: JSON.stringify(data)
        })
      };
      Api.prototype.scheduleOnce = function (fn, millis) {
        var task;
        task = new ScheduledTask(ScheduledTaskType.once, fn, millis);
        this.scheduledTasks.push(task);
        if (this.scheduledTasks.length === 1) {
          this.loop()
        }
        return task
      };
      Api.prototype.scheduleEvery = function (fn, millis, now) {
        var task;
        if (now == null) {
          now = false
        }
        task = new ScheduledTask(ScheduledTaskType.every, fn, millis);
        this.scheduledTasks.push(task);
        if (this.scheduledTasks.length === 1) {
          this.loop()
        }
        if (now) {
          log('API: scheduling for immediate execution');
          task = new ScheduledTask(ScheduledTaskType.once, fn, 0);
          this.scheduledTasks.push(task)
        }
        return task
      };
      Api.prototype.loop = function () {
        if (this.scheduledTasks.length > 0) {
          log('API: starting loop');
          return requestAnimationFrame(function (_this) {
            return function () {
              var i, length, now, sfn;
              now = _.now();
              i = 0;
              length = _this.scheduledTasks.length;
              while (i < length) {
                sfn = _this.scheduledTasks[i];
                if (sfn.scheduledTime <= now) {
                  if (!sfn.kill) {
                    sfn.fn(now)
                  }
                  if (sfn.kill || sfn.type === ScheduledTaskType.once) {
                    length--;
                    _this.scheduledTasks[i] = _this.scheduledTasks[length]
                  } else if (sfn.type === ScheduledTaskType.every) {
                    sfn.scheduledTime += sfn.millis
                  }
                } else {
                  i++
                }
              }
              _this.scheduledTasks.length = length;
              if (length > 0) {
                return _this.loop()
              }
            }
          }(this))
        }
      };
      return Api
    }();
    module.exports = Api  //# sourceMappingURL=api.js.map
  });
  // source: node_modules/crowdcontrol/lib/utils/index.js
  require.define('crowdcontrol/lib/utils', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    module.exports = {
      shim: require('crowdcontrol/lib/utils/shim'),
      log: require('crowdcontrol/lib/utils/log'),
      mediator: require('crowdcontrol/lib/utils/mediator')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/utils/shim.js
  require.define('crowdcontrol/lib/utils/shim', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    var promise, xhr;
    promise = require('crowdcontrol/node_modules/bluebird/js/browser/bluebird');
    xhr = require('crowdcontrol/node_modules/xhr-promise');
    Function.prototype.property = function (prop, desc) {
      return Object.defineProperty(this.prototype, prop, desc)
    };
    promise['new'] = function (fn) {
      return new promise(fn)
    };
    module.exports = {
      observable: function (obj) {
        return this.riot.observable(obj)
      },
      requestAnimationFrame: require('crowdcontrol/node_modules/raf'),
      riot: typeof window !== 'undefined' && window !== null && window.riot != null ? window.riot : void 0,
      xhr: function (data) {
        var x;
        x = new xhr;
        return x.send.apply(x, arguments)
      },
      promise: promise
    }  //# sourceMappingURL=shim.js.map
  });
  // source: node_modules/crowdcontrol/node_modules/bluebird/js/browser/bluebird.js
  require.define('crowdcontrol/node_modules/bluebird/js/browser/bluebird', function (module, exports, __dirname, __filename) {
    /* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2013-2015 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
    /**
 * bluebird build version 2.10.2
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, cancel, using, filter, any, each, timers
*/
    !function (e) {
      if ('object' == typeof exports && 'undefined' != typeof module)
        module.exports = e();
      else if ('function' == typeof define && define.amd)
        define([], e);
      else {
        var f;
        'undefined' != typeof window ? f = window : 'undefined' != typeof global ? f = global : 'undefined' != typeof self && (f = self), f.Promise = e()
      }
    }(function () {
      var define, module, exports;
      return function e(t, n, r) {
        function s(o, u) {
          if (!n[o]) {
            if (!t[o]) {
              var a = typeof _dereq_ == 'function' && _dereq_;
              if (!u && a)
                return a(o, !0);
              if (i)
                return i(o, !0);
              var f = new Error("Cannot find module '" + o + "'");
              throw f.code = 'MODULE_NOT_FOUND', f
            }
            var l = n[o] = { exports: {} };
            t[o][0].call(l.exports, function (e) {
              var n = t[o][1][e];
              return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
          }
          return n[o].exports
        }
        var i = typeof _dereq_ == 'function' && _dereq_;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s
      }({
        1: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var SomePromiseArray = Promise._SomePromiseArray;
              function any(promises) {
                var ret = new SomePromiseArray(promises);
                var promise = ret.promise();
                ret.setHowMany(1);
                ret.setUnwrap();
                ret.init();
                return promise
              }
              Promise.any = function (promises) {
                return any(promises)
              };
              Promise.prototype.any = function () {
                return any(this)
              }
            }
          },
          {}
        ],
        2: [
          function (_dereq_, module, exports) {
            'use strict';
            var firstLineError;
            try {
              throw new Error
            } catch (e) {
              firstLineError = e
            }
            var schedule = _dereq_('./schedule.js');
            var Queue = _dereq_('./queue.js');
            var util = _dereq_('./util.js');
            function Async() {
              this._isTickUsed = false;
              this._lateQueue = new Queue(16);
              this._normalQueue = new Queue(16);
              this._trampolineEnabled = true;
              var self = this;
              this.drainQueues = function () {
                self._drainQueues()
              };
              this._schedule = schedule.isStatic ? schedule(this.drainQueues) : schedule
            }
            Async.prototype.disableTrampolineIfNecessary = function () {
              if (util.hasDevTools) {
                this._trampolineEnabled = false
              }
            };
            Async.prototype.enableTrampoline = function () {
              if (!this._trampolineEnabled) {
                this._trampolineEnabled = true;
                this._schedule = function (fn) {
                  setTimeout(fn, 0)
                }
              }
            };
            Async.prototype.haveItemsQueued = function () {
              return this._normalQueue.length() > 0
            };
            Async.prototype.throwLater = function (fn, arg) {
              if (arguments.length === 1) {
                arg = fn;
                fn = function () {
                  throw arg
                }
              }
              if (typeof setTimeout !== 'undefined') {
                setTimeout(function () {
                  fn(arg)
                }, 0)
              } else
                try {
                  this._schedule(function () {
                    fn(arg)
                  })
                } catch (e) {
                  throw new Error('No async scheduler available\n\n    See http://goo.gl/m3OTXk\n')
                }
            };
            function AsyncInvokeLater(fn, receiver, arg) {
              this._lateQueue.push(fn, receiver, arg);
              this._queueTick()
            }
            function AsyncInvoke(fn, receiver, arg) {
              this._normalQueue.push(fn, receiver, arg);
              this._queueTick()
            }
            function AsyncSettlePromises(promise) {
              this._normalQueue._pushOne(promise);
              this._queueTick()
            }
            if (!util.hasDevTools) {
              Async.prototype.invokeLater = AsyncInvokeLater;
              Async.prototype.invoke = AsyncInvoke;
              Async.prototype.settlePromises = AsyncSettlePromises
            } else {
              if (schedule.isStatic) {
                schedule = function (fn) {
                  setTimeout(fn, 0)
                }
              }
              Async.prototype.invokeLater = function (fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvokeLater.call(this, fn, receiver, arg)
                } else {
                  this._schedule(function () {
                    setTimeout(function () {
                      fn.call(receiver, arg)
                    }, 100)
                  })
                }
              };
              Async.prototype.invoke = function (fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvoke.call(this, fn, receiver, arg)
                } else {
                  this._schedule(function () {
                    fn.call(receiver, arg)
                  })
                }
              };
              Async.prototype.settlePromises = function (promise) {
                if (this._trampolineEnabled) {
                  AsyncSettlePromises.call(this, promise)
                } else {
                  this._schedule(function () {
                    promise._settlePromises()
                  })
                }
              }
            }
            Async.prototype.invokeFirst = function (fn, receiver, arg) {
              this._normalQueue.unshift(fn, receiver, arg);
              this._queueTick()
            };
            Async.prototype._drainQueue = function (queue) {
              while (queue.length() > 0) {
                var fn = queue.shift();
                if (typeof fn !== 'function') {
                  fn._settlePromises();
                  continue
                }
                var receiver = queue.shift();
                var arg = queue.shift();
                fn.call(receiver, arg)
              }
            };
            Async.prototype._drainQueues = function () {
              this._drainQueue(this._normalQueue);
              this._reset();
              this._drainQueue(this._lateQueue)
            };
            Async.prototype._queueTick = function () {
              if (!this._isTickUsed) {
                this._isTickUsed = true;
                this._schedule(this.drainQueues)
              }
            };
            Async.prototype._reset = function () {
              this._isTickUsed = false
            };
            module.exports = new Async;
            module.exports.firstLineError = firstLineError
          },
          {
            './queue.js': 28,
            './schedule.js': 31,
            './util.js': 38
          }
        ],
        3: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise) {
              var rejectThis = function (_, e) {
                this._reject(e)
              };
              var targetRejected = function (e, context) {
                context.promiseRejectionQueued = true;
                context.bindingPromise._then(rejectThis, rejectThis, null, this, e)
              };
              var bindingResolved = function (thisArg, context) {
                if (this._isPending()) {
                  this._resolveCallback(context.target)
                }
              };
              var bindingRejected = function (e, context) {
                if (!context.promiseRejectionQueued)
                  this._reject(e)
              };
              Promise.prototype.bind = function (thisArg) {
                var maybePromise = tryConvertToPromise(thisArg);
                var ret = new Promise(INTERNAL);
                ret._propagateFrom(this, 1);
                var target = this._target();
                ret._setBoundTo(maybePromise);
                if (maybePromise instanceof Promise) {
                  var context = {
                    promiseRejectionQueued: false,
                    promise: ret,
                    target: target,
                    bindingPromise: maybePromise
                  };
                  target._then(INTERNAL, targetRejected, ret._progress, ret, context);
                  maybePromise._then(bindingResolved, bindingRejected, ret._progress, ret, context)
                } else {
                  ret._resolveCallback(target)
                }
                return ret
              };
              Promise.prototype._setBoundTo = function (obj) {
                if (obj !== undefined) {
                  this._bitField = this._bitField | 131072;
                  this._boundTo = obj
                } else {
                  this._bitField = this._bitField & ~131072
                }
              };
              Promise.prototype._isBound = function () {
                return (this._bitField & 131072) === 131072
              };
              Promise.bind = function (thisArg, value) {
                var maybePromise = tryConvertToPromise(thisArg);
                var ret = new Promise(INTERNAL);
                ret._setBoundTo(maybePromise);
                if (maybePromise instanceof Promise) {
                  maybePromise._then(function () {
                    ret._resolveCallback(value)
                  }, ret._reject, ret._progress, ret, null)
                } else {
                  ret._resolveCallback(value)
                }
                return ret
              }
            }
          },
          {}
        ],
        4: [
          function (_dereq_, module, exports) {
            'use strict';
            var old;
            if (typeof Promise !== 'undefined')
              old = Promise;
            function noConflict() {
              try {
                if (Promise === bluebird)
                  Promise = old
              } catch (e) {
              }
              return bluebird
            }
            var bluebird = _dereq_('./promise.js')();
            bluebird.noConflict = noConflict;
            module.exports = bluebird
          },
          { './promise.js': 23 }
        ],
        5: [
          function (_dereq_, module, exports) {
            'use strict';
            var cr = Object.create;
            if (cr) {
              var callerCache = cr(null);
              var getterCache = cr(null);
              callerCache[' size'] = getterCache[' size'] = 0
            }
            module.exports = function (Promise) {
              var util = _dereq_('./util.js');
              var canEvaluate = util.canEvaluate;
              var isIdentifier = util.isIdentifier;
              var getMethodCaller;
              var getGetter;
              if (!true) {
                var makeMethodCaller = function (methodName) {
                  return new Function('ensureMethod', "                                    \n        return function(obj) {                                               \n            'use strict'                                                     \n            var len = this.length;                                           \n            ensureMethod(obj, 'methodName');                                 \n            switch(len) {                                                    \n                case 1: return obj.methodName(this[0]);                      \n                case 2: return obj.methodName(this[0], this[1]);             \n                case 3: return obj.methodName(this[0], this[1], this[2]);    \n                case 0: return obj.methodName();                             \n                default:                                                     \n                    return obj.methodName.apply(obj, this);                  \n            }                                                                \n        };                                                                   \n        ".replace(/methodName/g, methodName))(ensureMethod)
                };
                var makeGetter = function (propertyName) {
                  return new Function('obj', "                                             \n        'use strict';                                                        \n        return obj.propertyName;                                             \n        ".replace('propertyName', propertyName))
                };
                var getCompiled = function (name, compiler, cache) {
                  var ret = cache[name];
                  if (typeof ret !== 'function') {
                    if (!isIdentifier(name)) {
                      return null
                    }
                    ret = compiler(name);
                    cache[name] = ret;
                    cache[' size']++;
                    if (cache[' size'] > 512) {
                      var keys = Object.keys(cache);
                      for (var i = 0; i < 256; ++i)
                        delete cache[keys[i]];
                      cache[' size'] = keys.length - 256
                    }
                  }
                  return ret
                };
                getMethodCaller = function (name) {
                  return getCompiled(name, makeMethodCaller, callerCache)
                };
                getGetter = function (name) {
                  return getCompiled(name, makeGetter, getterCache)
                }
              }
              function ensureMethod(obj, methodName) {
                var fn;
                if (obj != null)
                  fn = obj[methodName];
                if (typeof fn !== 'function') {
                  var message = 'Object ' + util.classString(obj) + " has no method '" + util.toString(methodName) + "'";
                  throw new Promise.TypeError(message)
                }
                return fn
              }
              function caller(obj) {
                var methodName = this.pop();
                var fn = ensureMethod(obj, methodName);
                return fn.apply(obj, this)
              }
              Promise.prototype.call = function (methodName) {
                var $_len = arguments.length;
                var args = new Array($_len - 1);
                for (var $_i = 1; $_i < $_len; ++$_i) {
                  args[$_i - 1] = arguments[$_i]
                }
                if (!true) {
                  if (canEvaluate) {
                    var maybeCaller = getMethodCaller(methodName);
                    if (maybeCaller !== null) {
                      return this._then(maybeCaller, undefined, undefined, args, undefined)
                    }
                  }
                }
                args.push(methodName);
                return this._then(caller, undefined, undefined, args, undefined)
              };
              function namedGetter(obj) {
                return obj[this]
              }
              function indexedGetter(obj) {
                var index = +this;
                if (index < 0)
                  index = Math.max(0, index + obj.length);
                return obj[index]
              }
              Promise.prototype.get = function (propertyName) {
                var isIndex = typeof propertyName === 'number';
                var getter;
                if (!isIndex) {
                  if (canEvaluate) {
                    var maybeGetter = getGetter(propertyName);
                    getter = maybeGetter !== null ? maybeGetter : namedGetter
                  } else {
                    getter = namedGetter
                  }
                } else {
                  getter = indexedGetter
                }
                return this._then(getter, undefined, undefined, propertyName, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        6: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var errors = _dereq_('./errors.js');
              var async = _dereq_('./async.js');
              var CancellationError = errors.CancellationError;
              Promise.prototype._cancel = function (reason) {
                if (!this.isCancellable())
                  return this;
                var parent;
                var promiseToReject = this;
                while ((parent = promiseToReject._cancellationParent) !== undefined && parent.isCancellable()) {
                  promiseToReject = parent
                }
                this._unsetCancellable();
                promiseToReject._target()._rejectCallback(reason, false, true)
              };
              Promise.prototype.cancel = function (reason) {
                if (!this.isCancellable())
                  return this;
                if (reason === undefined)
                  reason = new CancellationError;
                async.invokeLater(this._cancel, this, reason);
                return this
              };
              Promise.prototype.cancellable = function () {
                if (this._cancellable())
                  return this;
                async.enableTrampoline();
                this._setCancellable();
                this._cancellationParent = undefined;
                return this
              };
              Promise.prototype.uncancellable = function () {
                var ret = this.then();
                ret._unsetCancellable();
                return ret
              };
              Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
                var ret = this._then(didFulfill, didReject, didProgress, undefined, undefined);
                ret._setCancellable();
                ret._cancellationParent = undefined;
                return ret
              }
            }
          },
          {
            './async.js': 2,
            './errors.js': 13
          }
        ],
        7: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function () {
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
              var stackFramePattern = null;
              var formatStack = null;
              var indentStackFrames = false;
              var warn;
              function CapturedTrace(parent) {
                this._parent = parent;
                var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
                captureStackTrace(this, CapturedTrace);
                if (length > 32)
                  this.uncycle()
              }
              util.inherits(CapturedTrace, Error);
              CapturedTrace.prototype.uncycle = function () {
                var length = this._length;
                if (length < 2)
                  return;
                var nodes = [];
                var stackToIndex = {};
                for (var i = 0, node = this; node !== undefined; ++i) {
                  nodes.push(node);
                  node = node._parent
                }
                length = this._length = i;
                for (var i = length - 1; i >= 0; --i) {
                  var stack = nodes[i].stack;
                  if (stackToIndex[stack] === undefined) {
                    stackToIndex[stack] = i
                  }
                }
                for (var i = 0; i < length; ++i) {
                  var currentStack = nodes[i].stack;
                  var index = stackToIndex[currentStack];
                  if (index !== undefined && index !== i) {
                    if (index > 0) {
                      nodes[index - 1]._parent = undefined;
                      nodes[index - 1]._length = 1
                    }
                    nodes[i]._parent = undefined;
                    nodes[i]._length = 1;
                    var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
                    if (index < length - 1) {
                      cycleEdgeNode._parent = nodes[index + 1];
                      cycleEdgeNode._parent.uncycle();
                      cycleEdgeNode._length = cycleEdgeNode._parent._length + 1
                    } else {
                      cycleEdgeNode._parent = undefined;
                      cycleEdgeNode._length = 1
                    }
                    var currentChildLength = cycleEdgeNode._length + 1;
                    for (var j = i - 2; j >= 0; --j) {
                      nodes[j]._length = currentChildLength;
                      currentChildLength++
                    }
                    return
                  }
                }
              };
              CapturedTrace.prototype.parent = function () {
                return this._parent
              };
              CapturedTrace.prototype.hasParent = function () {
                return this._parent !== undefined
              };
              CapturedTrace.prototype.attachExtraTrace = function (error) {
                if (error.__stackCleaned__)
                  return;
                this.uncycle();
                var parsed = CapturedTrace.parseStackAndMessage(error);
                var message = parsed.message;
                var stacks = [parsed.stack];
                var trace = this;
                while (trace !== undefined) {
                  stacks.push(cleanStack(trace.stack.split('\n')));
                  trace = trace._parent
                }
                removeCommonRoots(stacks);
                removeDuplicateOrEmptyJumps(stacks);
                util.notEnumerableProp(error, 'stack', reconstructStack(message, stacks));
                util.notEnumerableProp(error, '__stackCleaned__', true)
              };
              function reconstructStack(message, stacks) {
                for (var i = 0; i < stacks.length - 1; ++i) {
                  stacks[i].push('From previous event:');
                  stacks[i] = stacks[i].join('\n')
                }
                if (i < stacks.length) {
                  stacks[i] = stacks[i].join('\n')
                }
                return message + '\n' + stacks.join('\n')
              }
              function removeDuplicateOrEmptyJumps(stacks) {
                for (var i = 0; i < stacks.length; ++i) {
                  if (stacks[i].length === 0 || i + 1 < stacks.length && stacks[i][0] === stacks[i + 1][0]) {
                    stacks.splice(i, 1);
                    i--
                  }
                }
              }
              function removeCommonRoots(stacks) {
                var current = stacks[0];
                for (var i = 1; i < stacks.length; ++i) {
                  var prev = stacks[i];
                  var currentLastIndex = current.length - 1;
                  var currentLastLine = current[currentLastIndex];
                  var commonRootMeetPoint = -1;
                  for (var j = prev.length - 1; j >= 0; --j) {
                    if (prev[j] === currentLastLine) {
                      commonRootMeetPoint = j;
                      break
                    }
                  }
                  for (var j = commonRootMeetPoint; j >= 0; --j) {
                    var line = prev[j];
                    if (current[currentLastIndex] === line) {
                      current.pop();
                      currentLastIndex--
                    } else {
                      break
                    }
                  }
                  current = prev
                }
              }
              function cleanStack(stack) {
                var ret = [];
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  var isTraceLine = stackFramePattern.test(line) || '    (No stack trace)' === line;
                  var isInternalFrame = isTraceLine && shouldIgnore(line);
                  if (isTraceLine && !isInternalFrame) {
                    if (indentStackFrames && line.charAt(0) !== ' ') {
                      line = '    ' + line
                    }
                    ret.push(line)
                  }
                }
                return ret
              }
              function stackFramesAsArray(error) {
                var stack = error.stack.replace(/\s+$/g, '').split('\n');
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  if ('    (No stack trace)' === line || stackFramePattern.test(line)) {
                    break
                  }
                }
                if (i > 0) {
                  stack = stack.slice(i)
                }
                return stack
              }
              CapturedTrace.parseStackAndMessage = function (error) {
                var stack = error.stack;
                var message = error.toString();
                stack = typeof stack === 'string' && stack.length > 0 ? stackFramesAsArray(error) : ['    (No stack trace)'];
                return {
                  message: message,
                  stack: cleanStack(stack)
                }
              };
              CapturedTrace.formatAndLogError = function (error, title) {
                if (typeof console !== 'undefined') {
                  var message;
                  if (typeof error === 'object' || typeof error === 'function') {
                    var stack = error.stack;
                    message = title + formatStack(stack, error)
                  } else {
                    message = title + String(error)
                  }
                  if (typeof warn === 'function') {
                    warn(message)
                  } else if (typeof console.log === 'function' || typeof console.log === 'object') {
                    console.log(message)
                  }
                }
              };
              CapturedTrace.unhandledRejection = function (reason) {
                CapturedTrace.formatAndLogError(reason, '^--- With additional stack trace: ')
              };
              CapturedTrace.isSupported = function () {
                return typeof captureStackTrace === 'function'
              };
              CapturedTrace.fireRejectionEvent = function (name, localHandler, reason, promise) {
                var localEventFired = false;
                try {
                  if (typeof localHandler === 'function') {
                    localEventFired = true;
                    if (name === 'rejectionHandled') {
                      localHandler(promise)
                    } else {
                      localHandler(reason, promise)
                    }
                  }
                } catch (e) {
                  async.throwLater(e)
                }
                var globalEventFired = false;
                try {
                  globalEventFired = fireGlobalEvent(name, reason, promise)
                } catch (e) {
                  globalEventFired = true;
                  async.throwLater(e)
                }
                var domEventFired = false;
                if (fireDomEvent) {
                  try {
                    domEventFired = fireDomEvent(name.toLowerCase(), {
                      reason: reason,
                      promise: promise
                    })
                  } catch (e) {
                    domEventFired = true;
                    async.throwLater(e)
                  }
                }
                if (!globalEventFired && !localEventFired && !domEventFired && name === 'unhandledRejection') {
                  CapturedTrace.formatAndLogError(reason, 'Unhandled rejection ')
                }
              };
              function formatNonError(obj) {
                var str;
                if (typeof obj === 'function') {
                  str = '[function ' + (obj.name || 'anonymous') + ']'
                } else {
                  str = obj.toString();
                  var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                  if (ruselessToString.test(str)) {
                    try {
                      var newStr = JSON.stringify(obj);
                      str = newStr
                    } catch (e) {
                    }
                  }
                  if (str.length === 0) {
                    str = '(empty array)'
                  }
                }
                return '(<' + snip(str) + '>, no stack trace)'
              }
              function snip(str) {
                var maxChars = 41;
                if (str.length < maxChars) {
                  return str
                }
                return str.substr(0, maxChars - 3) + '...'
              }
              var shouldIgnore = function () {
                return false
              };
              var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
              function parseLineInfo(line) {
                var matches = line.match(parseLineInfoRegex);
                if (matches) {
                  return {
                    fileName: matches[1],
                    line: parseInt(matches[2], 10)
                  }
                }
              }
              CapturedTrace.setBounds = function (firstLineError, lastLineError) {
                if (!CapturedTrace.isSupported())
                  return;
                var firstStackLines = firstLineError.stack.split('\n');
                var lastStackLines = lastLineError.stack.split('\n');
                var firstIndex = -1;
                var lastIndex = -1;
                var firstFileName;
                var lastFileName;
                for (var i = 0; i < firstStackLines.length; ++i) {
                  var result = parseLineInfo(firstStackLines[i]);
                  if (result) {
                    firstFileName = result.fileName;
                    firstIndex = result.line;
                    break
                  }
                }
                for (var i = 0; i < lastStackLines.length; ++i) {
                  var result = parseLineInfo(lastStackLines[i]);
                  if (result) {
                    lastFileName = result.fileName;
                    lastIndex = result.line;
                    break
                  }
                }
                if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
                  return
                }
                shouldIgnore = function (line) {
                  if (bluebirdFramePattern.test(line))
                    return true;
                  var info = parseLineInfo(line);
                  if (info) {
                    if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
                      return true
                    }
                  }
                  return false
                }
              };
              var captureStackTrace = function stackDetection() {
                var v8stackFramePattern = /^\s*at\s*/;
                var v8stackFormatter = function (stack, error) {
                  if (typeof stack === 'string')
                    return stack;
                  if (error.name !== undefined && error.message !== undefined) {
                    return error.toString()
                  }
                  return formatNonError(error)
                };
                if (typeof Error.stackTraceLimit === 'number' && typeof Error.captureStackTrace === 'function') {
                  Error.stackTraceLimit = Error.stackTraceLimit + 6;
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  var captureStackTrace = Error.captureStackTrace;
                  shouldIgnore = function (line) {
                    return bluebirdFramePattern.test(line)
                  };
                  return function (receiver, ignoreUntil) {
                    Error.stackTraceLimit = Error.stackTraceLimit + 6;
                    captureStackTrace(receiver, ignoreUntil);
                    Error.stackTraceLimit = Error.stackTraceLimit - 6
                  }
                }
                var err = new Error;
                if (typeof err.stack === 'string' && err.stack.split('\n')[0].indexOf('stackDetection@') >= 0) {
                  stackFramePattern = /@/;
                  formatStack = v8stackFormatter;
                  indentStackFrames = true;
                  return function captureStackTrace(o) {
                    o.stack = new Error().stack
                  }
                }
                var hasStackAfterThrow;
                try {
                  throw new Error
                } catch (e) {
                  hasStackAfterThrow = 'stack' in e
                }
                if (!('stack' in err) && hasStackAfterThrow && typeof Error.stackTraceLimit === 'number') {
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  return function captureStackTrace(o) {
                    Error.stackTraceLimit = Error.stackTraceLimit + 6;
                    try {
                      throw new Error
                    } catch (e) {
                      o.stack = e.stack
                    }
                    Error.stackTraceLimit = Error.stackTraceLimit - 6
                  }
                }
                formatStack = function (stack, error) {
                  if (typeof stack === 'string')
                    return stack;
                  if ((typeof error === 'object' || typeof error === 'function') && error.name !== undefined && error.message !== undefined) {
                    return error.toString()
                  }
                  return formatNonError(error)
                };
                return null
              }([]);
              var fireDomEvent;
              var fireGlobalEvent = function () {
                if (util.isNode) {
                  return function (name, reason, promise) {
                    if (name === 'rejectionHandled') {
                      return process.emit(name, promise)
                    } else {
                      return process.emit(name, reason, promise)
                    }
                  }
                } else {
                  var customEventWorks = false;
                  var anyEventWorks = true;
                  try {
                    var ev = new self.CustomEvent('test');
                    customEventWorks = ev instanceof CustomEvent
                  } catch (e) {
                  }
                  if (!customEventWorks) {
                    try {
                      var event = document.createEvent('CustomEvent');
                      event.initCustomEvent('testingtheevent', false, true, {});
                      self.dispatchEvent(event)
                    } catch (e) {
                      anyEventWorks = false
                    }
                  }
                  if (anyEventWorks) {
                    fireDomEvent = function (type, detail) {
                      var event;
                      if (customEventWorks) {
                        event = new self.CustomEvent(type, {
                          detail: detail,
                          bubbles: false,
                          cancelable: true
                        })
                      } else if (self.dispatchEvent) {
                        event = document.createEvent('CustomEvent');
                        event.initCustomEvent(type, false, true, detail)
                      }
                      return event ? !self.dispatchEvent(event) : false
                    }
                  }
                  var toWindowMethodNameMap = {};
                  toWindowMethodNameMap['unhandledRejection'] = ('on' + 'unhandledRejection').toLowerCase();
                  toWindowMethodNameMap['rejectionHandled'] = ('on' + 'rejectionHandled').toLowerCase();
                  return function (name, reason, promise) {
                    var methodName = toWindowMethodNameMap[name];
                    var method = self[methodName];
                    if (!method)
                      return false;
                    if (name === 'rejectionHandled') {
                      method.call(self, promise)
                    } else {
                      method.call(self, reason, promise)
                    }
                    return true
                  }
                }
              }();
              if (typeof console !== 'undefined' && typeof console.warn !== 'undefined') {
                warn = function (message) {
                  console.warn(message)
                };
                if (util.isNode && process.stderr.isTTY) {
                  warn = function (message) {
                    process.stderr.write('[31m' + message + '[39m\n')
                  }
                } else if (!util.isNode && typeof new Error().stack === 'string') {
                  warn = function (message) {
                    console.warn('%c' + message, 'color: red')
                  }
                }
              }
              return CapturedTrace
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        8: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (NEXT_FILTER) {
              var util = _dereq_('./util.js');
              var errors = _dereq_('./errors.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var keys = _dereq_('./es5.js').keys;
              var TypeError = errors.TypeError;
              function CatchFilter(instances, callback, promise) {
                this._instances = instances;
                this._callback = callback;
                this._promise = promise
              }
              function safePredicate(predicate, e) {
                var safeObject = {};
                var retfilter = tryCatch(predicate).call(safeObject, e);
                if (retfilter === errorObj)
                  return retfilter;
                var safeKeys = keys(safeObject);
                if (safeKeys.length) {
                  errorObj.e = new TypeError('Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n');
                  return errorObj
                }
                return retfilter
              }
              CatchFilter.prototype.doFilter = function (e) {
                var cb = this._callback;
                var promise = this._promise;
                var boundTo = promise._boundValue();
                for (var i = 0, len = this._instances.length; i < len; ++i) {
                  var item = this._instances[i];
                  var itemIsErrorType = item === Error || item != null && item.prototype instanceof Error;
                  if (itemIsErrorType && e instanceof item) {
                    var ret = tryCatch(cb).call(boundTo, e);
                    if (ret === errorObj) {
                      NEXT_FILTER.e = ret.e;
                      return NEXT_FILTER
                    }
                    return ret
                  } else if (typeof item === 'function' && !itemIsErrorType) {
                    var shouldHandle = safePredicate(item, e);
                    if (shouldHandle === errorObj) {
                      e = errorObj.e;
                      break
                    } else if (shouldHandle) {
                      var ret = tryCatch(cb).call(boundTo, e);
                      if (ret === errorObj) {
                        NEXT_FILTER.e = ret.e;
                        return NEXT_FILTER
                      }
                      return ret
                    }
                  }
                }
                NEXT_FILTER.e = e;
                return NEXT_FILTER
              };
              return CatchFilter
            }
          },
          {
            './errors.js': 13,
            './es5.js': 14,
            './util.js': 38
          }
        ],
        9: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, CapturedTrace, isDebugging) {
              var contextStack = [];
              function Context() {
                this._trace = new CapturedTrace(peekContext())
              }
              Context.prototype._pushContext = function () {
                if (!isDebugging())
                  return;
                if (this._trace !== undefined) {
                  contextStack.push(this._trace)
                }
              };
              Context.prototype._popContext = function () {
                if (!isDebugging())
                  return;
                if (this._trace !== undefined) {
                  contextStack.pop()
                }
              };
              function createContext() {
                if (isDebugging())
                  return new Context
              }
              function peekContext() {
                var lastIndex = contextStack.length - 1;
                if (lastIndex >= 0) {
                  return contextStack[lastIndex]
                }
                return undefined
              }
              Promise.prototype._peekContext = peekContext;
              Promise.prototype._pushContext = Context.prototype._pushContext;
              Promise.prototype._popContext = Context.prototype._popContext;
              return createContext
            }
          },
          {}
        ],
        10: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, CapturedTrace) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var Warning = _dereq_('./errors.js').Warning;
              var util = _dereq_('./util.js');
              var canAttachTrace = util.canAttachTrace;
              var unhandledRejectionHandled;
              var possiblyUnhandledRejection;
              var debugging = false || util.isNode && (!!process.env['BLUEBIRD_DEBUG'] || process.env['NODE_ENV'] === 'development');
              if (util.isNode && process.env['BLUEBIRD_DEBUG'] == 0)
                debugging = false;
              if (debugging) {
                async.disableTrampolineIfNecessary()
              }
              Promise.prototype._ignoreRejections = function () {
                this._unsetRejectionIsUnhandled();
                this._bitField = this._bitField | 16777216
              };
              Promise.prototype._ensurePossibleRejectionHandled = function () {
                if ((this._bitField & 16777216) !== 0)
                  return;
                this._setRejectionIsUnhandled();
                async.invokeLater(this._notifyUnhandledRejection, this, undefined)
              };
              Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
                CapturedTrace.fireRejectionEvent('rejectionHandled', unhandledRejectionHandled, undefined, this)
              };
              Promise.prototype._notifyUnhandledRejection = function () {
                if (this._isRejectionUnhandled()) {
                  var reason = this._getCarriedStackTrace() || this._settledValue;
                  this._setUnhandledRejectionIsNotified();
                  CapturedTrace.fireRejectionEvent('unhandledRejection', possiblyUnhandledRejection, reason, this)
                }
              };
              Promise.prototype._setUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField | 524288
              };
              Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField & ~524288
              };
              Promise.prototype._isUnhandledRejectionNotified = function () {
                return (this._bitField & 524288) > 0
              };
              Promise.prototype._setRejectionIsUnhandled = function () {
                this._bitField = this._bitField | 2097152
              };
              Promise.prototype._unsetRejectionIsUnhandled = function () {
                this._bitField = this._bitField & ~2097152;
                if (this._isUnhandledRejectionNotified()) {
                  this._unsetUnhandledRejectionIsNotified();
                  this._notifyUnhandledRejectionIsHandled()
                }
              };
              Promise.prototype._isRejectionUnhandled = function () {
                return (this._bitField & 2097152) > 0
              };
              Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
                this._bitField = this._bitField | 1048576;
                this._fulfillmentHandler0 = capturedTrace
              };
              Promise.prototype._isCarryingStackTrace = function () {
                return (this._bitField & 1048576) > 0
              };
              Promise.prototype._getCarriedStackTrace = function () {
                return this._isCarryingStackTrace() ? this._fulfillmentHandler0 : undefined
              };
              Promise.prototype._captureStackTrace = function () {
                if (debugging) {
                  this._trace = new CapturedTrace(this._peekContext())
                }
                return this
              };
              Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
                if (debugging && canAttachTrace(error)) {
                  var trace = this._trace;
                  if (trace !== undefined) {
                    if (ignoreSelf)
                      trace = trace._parent
                  }
                  if (trace !== undefined) {
                    trace.attachExtraTrace(error)
                  } else if (!error.__stackCleaned__) {
                    var parsed = CapturedTrace.parseStackAndMessage(error);
                    util.notEnumerableProp(error, 'stack', parsed.message + '\n' + parsed.stack.join('\n'));
                    util.notEnumerableProp(error, '__stackCleaned__', true)
                  }
                }
              };
              Promise.prototype._warn = function (message) {
                var warning = new Warning(message);
                var ctx = this._peekContext();
                if (ctx) {
                  ctx.attachExtraTrace(warning)
                } else {
                  var parsed = CapturedTrace.parseStackAndMessage(warning);
                  warning.stack = parsed.message + '\n' + parsed.stack.join('\n')
                }
                CapturedTrace.formatAndLogError(warning, '')
              };
              Promise.onPossiblyUnhandledRejection = function (fn) {
                var domain = getDomain();
                possiblyUnhandledRejection = typeof fn === 'function' ? domain === null ? fn : domain.bind(fn) : undefined
              };
              Promise.onUnhandledRejectionHandled = function (fn) {
                var domain = getDomain();
                unhandledRejectionHandled = typeof fn === 'function' ? domain === null ? fn : domain.bind(fn) : undefined
              };
              Promise.longStackTraces = function () {
                if (async.haveItemsQueued() && debugging === false) {
                  throw new Error('cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/DT1qyG\n')
                }
                debugging = CapturedTrace.isSupported();
                if (debugging) {
                  async.disableTrampolineIfNecessary()
                }
              };
              Promise.hasLongStackTraces = function () {
                return debugging && CapturedTrace.isSupported()
              };
              if (!CapturedTrace.isSupported()) {
                Promise.longStackTraces = function () {
                };
                debugging = false
              }
              return function () {
                return debugging
              }
            }
          },
          {
            './async.js': 2,
            './errors.js': 13,
            './util.js': 38
          }
        ],
        11: [
          function (_dereq_, module, exports) {
            'use strict';
            var util = _dereq_('./util.js');
            var isPrimitive = util.isPrimitive;
            module.exports = function (Promise) {
              var returner = function () {
                return this
              };
              var thrower = function () {
                throw this
              };
              var returnUndefined = function () {
              };
              var throwUndefined = function () {
                throw undefined
              };
              var wrapper = function (value, action) {
                if (action === 1) {
                  return function () {
                    throw value
                  }
                } else if (action === 2) {
                  return function () {
                    return value
                  }
                }
              };
              Promise.prototype['return'] = Promise.prototype.thenReturn = function (value) {
                if (value === undefined)
                  return this.then(returnUndefined);
                if (isPrimitive(value)) {
                  return this._then(wrapper(value, 2), undefined, undefined, undefined, undefined)
                } else if (value instanceof Promise) {
                  value._ignoreRejections()
                }
                return this._then(returner, undefined, undefined, value, undefined)
              };
              Promise.prototype['throw'] = Promise.prototype.thenThrow = function (reason) {
                if (reason === undefined)
                  return this.then(throwUndefined);
                if (isPrimitive(reason)) {
                  return this._then(wrapper(reason, 1), undefined, undefined, undefined, undefined)
                }
                return this._then(thrower, undefined, undefined, reason, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        12: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var PromiseReduce = Promise.reduce;
              Promise.prototype.each = function (fn) {
                return PromiseReduce(this, fn, null, INTERNAL)
              };
              Promise.each = function (promises, fn) {
                return PromiseReduce(promises, fn, null, INTERNAL)
              }
            }
          },
          {}
        ],
        13: [
          function (_dereq_, module, exports) {
            'use strict';
            var es5 = _dereq_('./es5.js');
            var Objectfreeze = es5.freeze;
            var util = _dereq_('./util.js');
            var inherits = util.inherits;
            var notEnumerableProp = util.notEnumerableProp;
            function subError(nameProperty, defaultMessage) {
              function SubError(message) {
                if (!(this instanceof SubError))
                  return new SubError(message);
                notEnumerableProp(this, 'message', typeof message === 'string' ? message : defaultMessage);
                notEnumerableProp(this, 'name', nameProperty);
                if (Error.captureStackTrace) {
                  Error.captureStackTrace(this, this.constructor)
                } else {
                  Error.call(this)
                }
              }
              inherits(SubError, Error);
              return SubError
            }
            var _TypeError, _RangeError;
            var Warning = subError('Warning', 'warning');
            var CancellationError = subError('CancellationError', 'cancellation error');
            var TimeoutError = subError('TimeoutError', 'timeout error');
            var AggregateError = subError('AggregateError', 'aggregate error');
            try {
              _TypeError = TypeError;
              _RangeError = RangeError
            } catch (e) {
              _TypeError = subError('TypeError', 'type error');
              _RangeError = subError('RangeError', 'range error')
            }
            var methods = ('join pop push shift unshift slice filter forEach some ' + 'every map indexOf lastIndexOf reduce reduceRight sort reverse').split(' ');
            for (var i = 0; i < methods.length; ++i) {
              if (typeof Array.prototype[methods[i]] === 'function') {
                AggregateError.prototype[methods[i]] = Array.prototype[methods[i]]
              }
            }
            es5.defineProperty(AggregateError.prototype, 'length', {
              value: 0,
              configurable: false,
              writable: true,
              enumerable: true
            });
            AggregateError.prototype['isOperational'] = true;
            var level = 0;
            AggregateError.prototype.toString = function () {
              var indent = Array(level * 4 + 1).join(' ');
              var ret = '\n' + indent + 'AggregateError of:' + '\n';
              level++;
              indent = Array(level * 4 + 1).join(' ');
              for (var i = 0; i < this.length; ++i) {
                var str = this[i] === this ? '[Circular AggregateError]' : this[i] + '';
                var lines = str.split('\n');
                for (var j = 0; j < lines.length; ++j) {
                  lines[j] = indent + lines[j]
                }
                str = lines.join('\n');
                ret += str + '\n'
              }
              level--;
              return ret
            };
            function OperationalError(message) {
              if (!(this instanceof OperationalError))
                return new OperationalError(message);
              notEnumerableProp(this, 'name', 'OperationalError');
              notEnumerableProp(this, 'message', message);
              this.cause = message;
              this['isOperational'] = true;
              if (message instanceof Error) {
                notEnumerableProp(this, 'message', message.message);
                notEnumerableProp(this, 'stack', message.stack)
              } else if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor)
              }
            }
            inherits(OperationalError, Error);
            var errorTypes = Error['__BluebirdErrorTypes__'];
            if (!errorTypes) {
              errorTypes = Objectfreeze({
                CancellationError: CancellationError,
                TimeoutError: TimeoutError,
                OperationalError: OperationalError,
                RejectionError: OperationalError,
                AggregateError: AggregateError
              });
              notEnumerableProp(Error, '__BluebirdErrorTypes__', errorTypes)
            }
            module.exports = {
              Error: Error,
              TypeError: _TypeError,
              RangeError: _RangeError,
              CancellationError: errorTypes.CancellationError,
              OperationalError: errorTypes.OperationalError,
              TimeoutError: errorTypes.TimeoutError,
              AggregateError: errorTypes.AggregateError,
              Warning: Warning
            }
          },
          {
            './es5.js': 14,
            './util.js': 38
          }
        ],
        14: [
          function (_dereq_, module, exports) {
            var isES5 = function () {
              'use strict';
              return this === undefined
            }();
            if (isES5) {
              module.exports = {
                freeze: Object.freeze,
                defineProperty: Object.defineProperty,
                getDescriptor: Object.getOwnPropertyDescriptor,
                keys: Object.keys,
                names: Object.getOwnPropertyNames,
                getPrototypeOf: Object.getPrototypeOf,
                isArray: Array.isArray,
                isES5: isES5,
                propertyIsWritable: function (obj, prop) {
                  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                  return !!(!descriptor || descriptor.writable || descriptor.set)
                }
              }
            } else {
              var has = {}.hasOwnProperty;
              var str = {}.toString;
              var proto = {}.constructor.prototype;
              var ObjectKeys = function (o) {
                var ret = [];
                for (var key in o) {
                  if (has.call(o, key)) {
                    ret.push(key)
                  }
                }
                return ret
              };
              var ObjectGetDescriptor = function (o, key) {
                return { value: o[key] }
              };
              var ObjectDefineProperty = function (o, key, desc) {
                o[key] = desc.value;
                return o
              };
              var ObjectFreeze = function (obj) {
                return obj
              };
              var ObjectGetPrototypeOf = function (obj) {
                try {
                  return Object(obj).constructor.prototype
                } catch (e) {
                  return proto
                }
              };
              var ArrayIsArray = function (obj) {
                try {
                  return str.call(obj) === '[object Array]'
                } catch (e) {
                  return false
                }
              };
              module.exports = {
                isArray: ArrayIsArray,
                keys: ObjectKeys,
                names: ObjectKeys,
                defineProperty: ObjectDefineProperty,
                getDescriptor: ObjectGetDescriptor,
                freeze: ObjectFreeze,
                getPrototypeOf: ObjectGetPrototypeOf,
                isES5: isES5,
                propertyIsWritable: function () {
                  return true
                }
              }
            }
          },
          {}
        ],
        15: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var PromiseMap = Promise.map;
              Promise.prototype.filter = function (fn, options) {
                return PromiseMap(this, fn, options, INTERNAL)
              };
              Promise.filter = function (promises, fn, options) {
                return PromiseMap(promises, fn, options, INTERNAL)
              }
            }
          },
          {}
        ],
        16: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, NEXT_FILTER, tryConvertToPromise) {
              var util = _dereq_('./util.js');
              var isPrimitive = util.isPrimitive;
              var thrower = util.thrower;
              function returnThis() {
                return this
              }
              function throwThis() {
                throw this
              }
              function return$(r) {
                return function () {
                  return r
                }
              }
              function throw$(r) {
                return function () {
                  throw r
                }
              }
              function promisedFinally(ret, reasonOrValue, isFulfilled) {
                var then;
                if (isPrimitive(reasonOrValue)) {
                  then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue)
                } else {
                  then = isFulfilled ? returnThis : throwThis
                }
                return ret._then(then, thrower, undefined, reasonOrValue, undefined)
              }
              function finallyHandler(reasonOrValue) {
                var promise = this.promise;
                var handler = this.handler;
                var ret = promise._isBound() ? handler.call(promise._boundValue()) : handler();
                if (ret !== undefined) {
                  var maybePromise = tryConvertToPromise(ret, promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    return promisedFinally(maybePromise, reasonOrValue, promise.isFulfilled())
                  }
                }
                if (promise.isRejected()) {
                  NEXT_FILTER.e = reasonOrValue;
                  return NEXT_FILTER
                } else {
                  return reasonOrValue
                }
              }
              function tapHandler(value) {
                var promise = this.promise;
                var handler = this.handler;
                var ret = promise._isBound() ? handler.call(promise._boundValue(), value) : handler(value);
                if (ret !== undefined) {
                  var maybePromise = tryConvertToPromise(ret, promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    return promisedFinally(maybePromise, value, true)
                  }
                }
                return value
              }
              Promise.prototype._passThroughHandler = function (handler, isFinally) {
                if (typeof handler !== 'function')
                  return this.then();
                var promiseAndHandler = {
                  promise: this,
                  handler: handler
                };
                return this._then(isFinally ? finallyHandler : tapHandler, isFinally ? finallyHandler : undefined, undefined, promiseAndHandler, undefined)
              };
              Promise.prototype.lastly = Promise.prototype['finally'] = function (handler) {
                return this._passThroughHandler(handler, true)
              };
              Promise.prototype.tap = function (handler) {
                return this._passThroughHandler(handler, false)
              }
            }
          },
          { './util.js': 38 }
        ],
        17: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, apiRejection, INTERNAL, tryConvertToPromise) {
              var errors = _dereq_('./errors.js');
              var TypeError = errors.TypeError;
              var util = _dereq_('./util.js');
              var errorObj = util.errorObj;
              var tryCatch = util.tryCatch;
              var yieldHandlers = [];
              function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
                for (var i = 0; i < yieldHandlers.length; ++i) {
                  traceParent._pushContext();
                  var result = tryCatch(yieldHandlers[i])(value);
                  traceParent._popContext();
                  if (result === errorObj) {
                    traceParent._pushContext();
                    var ret = Promise.reject(errorObj.e);
                    traceParent._popContext();
                    return ret
                  }
                  var maybePromise = tryConvertToPromise(result, traceParent);
                  if (maybePromise instanceof Promise)
                    return maybePromise
                }
                return null
              }
              function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
                var promise = this._promise = new Promise(INTERNAL);
                promise._captureStackTrace();
                this._stack = stack;
                this._generatorFunction = generatorFunction;
                this._receiver = receiver;
                this._generator = undefined;
                this._yieldHandlers = typeof yieldHandler === 'function' ? [yieldHandler].concat(yieldHandlers) : yieldHandlers
              }
              PromiseSpawn.prototype.promise = function () {
                return this._promise
              };
              PromiseSpawn.prototype._run = function () {
                this._generator = this._generatorFunction.call(this._receiver);
                this._receiver = this._generatorFunction = undefined;
                this._next(undefined)
              };
              PromiseSpawn.prototype._continue = function (result) {
                if (result === errorObj) {
                  return this._promise._rejectCallback(result.e, false, true)
                }
                var value = result.value;
                if (result.done === true) {
                  this._promise._resolveCallback(value)
                } else {
                  var maybePromise = tryConvertToPromise(value, this._promise);
                  if (!(maybePromise instanceof Promise)) {
                    maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
                    if (maybePromise === null) {
                      this._throw(new TypeError('A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/4Y4pDk\n\n'.replace('%s', value) + 'From coroutine:\n' + this._stack.split('\n').slice(1, -7).join('\n')));
                      return
                    }
                  }
                  maybePromise._then(this._next, this._throw, undefined, this, null)
                }
              };
              PromiseSpawn.prototype._throw = function (reason) {
                this._promise._attachExtraTrace(reason);
                this._promise._pushContext();
                var result = tryCatch(this._generator['throw']).call(this._generator, reason);
                this._promise._popContext();
                this._continue(result)
              };
              PromiseSpawn.prototype._next = function (value) {
                this._promise._pushContext();
                var result = tryCatch(this._generator.next).call(this._generator, value);
                this._promise._popContext();
                this._continue(result)
              };
              Promise.coroutine = function (generatorFunction, options) {
                if (typeof generatorFunction !== 'function') {
                  throw new TypeError('generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n')
                }
                var yieldHandler = Object(options).yieldHandler;
                var PromiseSpawn$ = PromiseSpawn;
                var stack = new Error().stack;
                return function () {
                  var generator = generatorFunction.apply(this, arguments);
                  var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler, stack);
                  spawn._generator = generator;
                  spawn._next(undefined);
                  return spawn.promise()
                }
              };
              Promise.coroutine.addYieldHandler = function (fn) {
                if (typeof fn !== 'function')
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                yieldHandlers.push(fn)
              };
              Promise.spawn = function (generatorFunction) {
                if (typeof generatorFunction !== 'function') {
                  return apiRejection('generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n')
                }
                var spawn = new PromiseSpawn(generatorFunction, this);
                var ret = spawn.promise();
                spawn._run(Promise.spawn);
                return ret
              }
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        18: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
              var util = _dereq_('./util.js');
              var canEvaluate = util.canEvaluate;
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var reject;
              if (!true) {
                if (canEvaluate) {
                  var thenCallback = function (i) {
                    return new Function('value', 'holder', "                             \n            'use strict';                                                    \n            holder.pIndex = value;                                           \n            holder.checkFulfillment(this);                                   \n            ".replace(/Index/g, i))
                  };
                  var caller = function (count) {
                    var values = [];
                    for (var i = 1; i <= count; ++i)
                      values.push('holder.p' + i);
                    return new Function('holder', "                                      \n            'use strict';                                                    \n            var callback = holder.fn;                                        \n            return callback(values);                                         \n            ".replace(/values/g, values.join(', ')))
                  };
                  var thenCallbacks = [];
                  var callers = [undefined];
                  for (var i = 1; i <= 5; ++i) {
                    thenCallbacks.push(thenCallback(i));
                    callers.push(caller(i))
                  }
                  var Holder = function (total, fn) {
                    this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
                    this.fn = fn;
                    this.total = total;
                    this.now = 0
                  };
                  Holder.prototype.callers = callers;
                  Holder.prototype.checkFulfillment = function (promise) {
                    var now = this.now;
                    now++;
                    var total = this.total;
                    if (now >= total) {
                      var handler = this.callers[total];
                      promise._pushContext();
                      var ret = tryCatch(handler)(this);
                      promise._popContext();
                      if (ret === errorObj) {
                        promise._rejectCallback(ret.e, false, true)
                      } else {
                        promise._resolveCallback(ret)
                      }
                    } else {
                      this.now = now
                    }
                  };
                  var reject = function (reason) {
                    this._reject(reason)
                  }
                }
              }
              Promise.join = function () {
                var last = arguments.length - 1;
                var fn;
                if (last > 0 && typeof arguments[last] === 'function') {
                  fn = arguments[last];
                  if (!true) {
                    if (last < 6 && canEvaluate) {
                      var ret = new Promise(INTERNAL);
                      ret._captureStackTrace();
                      var holder = new Holder(last, fn);
                      var callbacks = thenCallbacks;
                      for (var i = 0; i < last; ++i) {
                        var maybePromise = tryConvertToPromise(arguments[i], ret);
                        if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          if (maybePromise._isPending()) {
                            maybePromise._then(callbacks[i], reject, undefined, ret, holder)
                          } else if (maybePromise._isFulfilled()) {
                            callbacks[i].call(ret, maybePromise._value(), holder)
                          } else {
                            ret._reject(maybePromise._reason())
                          }
                        } else {
                          callbacks[i].call(ret, maybePromise, holder)
                        }
                      }
                      return ret
                    }
                  }
                }
                var $_len = arguments.length;
                var args = new Array($_len);
                for (var $_i = 0; $_i < $_len; ++$_i) {
                  args[$_i] = arguments[$_i]
                }
                if (fn)
                  args.pop();
                var ret = new PromiseArray(args).promise();
                return fn !== undefined ? ret.spread(fn) : ret
              }
            }
          },
          { './util.js': 38 }
        ],
        19: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var PENDING = {};
              var EMPTY_ARRAY = [];
              function MappingPromiseArray(promises, fn, limit, _filter) {
                this.constructor$(promises);
                this._promise._captureStackTrace();
                var domain = getDomain();
                this._callback = domain === null ? fn : domain.bind(fn);
                this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
                this._limit = limit;
                this._inFlight = 0;
                this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
                async.invoke(init, this, undefined)
              }
              util.inherits(MappingPromiseArray, PromiseArray);
              function init() {
                this._init$(undefined, -2)
              }
              MappingPromiseArray.prototype._init = function () {
              };
              MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var values = this._values;
                var length = this.length();
                var preservedValues = this._preservedValues;
                var limit = this._limit;
                if (values[index] === PENDING) {
                  values[index] = value;
                  if (limit >= 1) {
                    this._inFlight--;
                    this._drainQueue();
                    if (this._isResolved())
                      return
                  }
                } else {
                  if (limit >= 1 && this._inFlight >= limit) {
                    values[index] = value;
                    this._queue.push(index);
                    return
                  }
                  if (preservedValues !== null)
                    preservedValues[index] = value;
                  var callback = this._callback;
                  var receiver = this._promise._boundValue();
                  this._promise._pushContext();
                  var ret = tryCatch(callback).call(receiver, value, index, length);
                  this._promise._popContext();
                  if (ret === errorObj)
                    return this._reject(ret.e);
                  var maybePromise = tryConvertToPromise(ret, this._promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (maybePromise._isPending()) {
                      if (limit >= 1)
                        this._inFlight++;
                      values[index] = PENDING;
                      return maybePromise._proxyPromiseArray(this, index)
                    } else if (maybePromise._isFulfilled()) {
                      ret = maybePromise._value()
                    } else {
                      return this._reject(maybePromise._reason())
                    }
                  }
                  values[index] = ret
                }
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= length) {
                  if (preservedValues !== null) {
                    this._filter(values, preservedValues)
                  } else {
                    this._resolve(values)
                  }
                }
              };
              MappingPromiseArray.prototype._drainQueue = function () {
                var queue = this._queue;
                var limit = this._limit;
                var values = this._values;
                while (queue.length > 0 && this._inFlight < limit) {
                  if (this._isResolved())
                    return;
                  var index = queue.pop();
                  this._promiseFulfilled(values[index], index)
                }
              };
              MappingPromiseArray.prototype._filter = function (booleans, values) {
                var len = values.length;
                var ret = new Array(len);
                var j = 0;
                for (var i = 0; i < len; ++i) {
                  if (booleans[i])
                    ret[j++] = values[i]
                }
                ret.length = j;
                this._resolve(ret)
              };
              MappingPromiseArray.prototype.preservedValues = function () {
                return this._preservedValues
              };
              function map(promises, fn, options, _filter) {
                var limit = typeof options === 'object' && options !== null ? options.concurrency : 0;
                limit = typeof limit === 'number' && isFinite(limit) && limit >= 1 ? limit : 0;
                return new MappingPromiseArray(promises, fn, limit, _filter)
              }
              Promise.prototype.map = function (fn, options) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                return map(this, fn, options, null).promise()
              };
              Promise.map = function (promises, fn, options, _filter) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                return map(promises, fn, options, _filter).promise()
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        20: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              Promise.method = function (fn) {
                if (typeof fn !== 'function') {
                  throw new Promise.TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                return function () {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  ret._pushContext();
                  var value = tryCatch(fn).apply(this, arguments);
                  ret._popContext();
                  ret._resolveFromSyncValue(value);
                  return ret
                }
              };
              Promise.attempt = Promise['try'] = function (fn, args, ctx) {
                if (typeof fn !== 'function') {
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._pushContext();
                var value = util.isArray(args) ? tryCatch(fn).apply(ctx, args) : tryCatch(fn).call(ctx, args);
                ret._popContext();
                ret._resolveFromSyncValue(value);
                return ret
              };
              Promise.prototype._resolveFromSyncValue = function (value) {
                if (value === util.errorObj) {
                  this._rejectCallback(value.e, false, true)
                } else {
                  this._resolveCallback(value, true)
                }
              }
            }
          },
          { './util.js': 38 }
        ],
        21: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var util = _dereq_('./util.js');
              var async = _dereq_('./async.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              function spreadAdapter(val, nodeback) {
                var promise = this;
                if (!util.isArray(val))
                  return successAdapter.call(promise, val, nodeback);
                var ret = tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              function successAdapter(val, nodeback) {
                var promise = this;
                var receiver = promise._boundValue();
                var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              function errorAdapter(reason, nodeback) {
                var promise = this;
                if (!reason) {
                  var target = promise._target();
                  var newReason = target._getCarriedStackTrace();
                  newReason.cause = reason;
                  reason = newReason
                }
                var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback, options) {
                if (typeof nodeback == 'function') {
                  var adapter = successAdapter;
                  if (options !== undefined && Object(options).spread) {
                    adapter = spreadAdapter
                  }
                  this._then(adapter, errorAdapter, undefined, this, nodeback)
                }
                return this
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        22: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray) {
              var util = _dereq_('./util.js');
              var async = _dereq_('./async.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              Promise.prototype.progressed = function (handler) {
                return this._then(undefined, undefined, handler, undefined, undefined)
              };
              Promise.prototype._progress = function (progressValue) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._target()._progressUnchecked(progressValue)
              };
              Promise.prototype._progressHandlerAt = function (index) {
                return index === 0 ? this._progressHandler0 : this[(index << 2) + index - 5 + 2]
              };
              Promise.prototype._doProgressWith = function (progression) {
                var progressValue = progression.value;
                var handler = progression.handler;
                var promise = progression.promise;
                var receiver = progression.receiver;
                var ret = tryCatch(handler).call(receiver, progressValue);
                if (ret === errorObj) {
                  if (ret.e != null && ret.e.name !== 'StopProgressPropagation') {
                    var trace = util.canAttachTrace(ret.e) ? ret.e : new Error(util.toString(ret.e));
                    promise._attachExtraTrace(trace);
                    promise._progress(ret.e)
                  }
                } else if (ret instanceof Promise) {
                  ret._then(promise._progress, null, null, promise, undefined)
                } else {
                  promise._progress(ret)
                }
              };
              Promise.prototype._progressUnchecked = function (progressValue) {
                var len = this._length();
                var progress = this._progress;
                for (var i = 0; i < len; i++) {
                  var handler = this._progressHandlerAt(i);
                  var promise = this._promiseAt(i);
                  if (!(promise instanceof Promise)) {
                    var receiver = this._receiverAt(i);
                    if (typeof handler === 'function') {
                      handler.call(receiver, progressValue, promise)
                    } else if (receiver instanceof PromiseArray && !receiver._isResolved()) {
                      receiver._promiseProgressed(progressValue, promise)
                    }
                    continue
                  }
                  if (typeof handler === 'function') {
                    async.invoke(this._doProgressWith, this, {
                      handler: handler,
                      promise: promise,
                      receiver: this._receiverAt(i),
                      value: progressValue
                    })
                  } else {
                    async.invoke(progress, promise, progressValue)
                  }
                }
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        23: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function () {
              var makeSelfResolutionError = function () {
                return new TypeError('circular promise resolution chain\n\n    See http://goo.gl/LhFpo0\n')
              };
              var reflect = function () {
                return new Promise.PromiseInspection(this._target())
              };
              var apiRejection = function (msg) {
                return Promise.reject(new TypeError(msg))
              };
              var util = _dereq_('./util.js');
              var getDomain;
              if (util.isNode) {
                getDomain = function () {
                  var ret = process.domain;
                  if (ret === undefined)
                    ret = null;
                  return ret
                }
              } else {
                getDomain = function () {
                  return null
                }
              }
              util.notEnumerableProp(Promise, '_getDomain', getDomain);
              var UNDEFINED_BINDING = {};
              var async = _dereq_('./async.js');
              var errors = _dereq_('./errors.js');
              var TypeError = Promise.TypeError = errors.TypeError;
              Promise.RangeError = errors.RangeError;
              Promise.CancellationError = errors.CancellationError;
              Promise.TimeoutError = errors.TimeoutError;
              Promise.OperationalError = errors.OperationalError;
              Promise.RejectionError = errors.OperationalError;
              Promise.AggregateError = errors.AggregateError;
              var INTERNAL = function () {
              };
              var APPLY = {};
              var NEXT_FILTER = { e: null };
              var tryConvertToPromise = _dereq_('./thenables.js')(Promise, INTERNAL);
              var PromiseArray = _dereq_('./promise_array.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              var CapturedTrace = _dereq_('./captured_trace.js')();
              var isDebugging = _dereq_('./debuggability.js')(Promise, CapturedTrace);
              /*jshint unused:false*/
              var createContext = _dereq_('./context.js')(Promise, CapturedTrace, isDebugging);
              var CatchFilter = _dereq_('./catch_filter.js')(NEXT_FILTER);
              var PromiseResolver = _dereq_('./promise_resolver.js');
              var nodebackForPromise = PromiseResolver._nodebackForPromise;
              var errorObj = util.errorObj;
              var tryCatch = util.tryCatch;
              function Promise(resolver) {
                if (typeof resolver !== 'function') {
                  throw new TypeError('the promise constructor requires a resolver function\n\n    See http://goo.gl/EC22Yn\n')
                }
                if (this.constructor !== Promise) {
                  throw new TypeError('the promise constructor cannot be invoked directly\n\n    See http://goo.gl/KsIlge\n')
                }
                this._bitField = 0;
                this._fulfillmentHandler0 = undefined;
                this._rejectionHandler0 = undefined;
                this._progressHandler0 = undefined;
                this._promise0 = undefined;
                this._receiver0 = undefined;
                this._settledValue = undefined;
                if (resolver !== INTERNAL)
                  this._resolveFromResolver(resolver)
              }
              Promise.prototype.toString = function () {
                return '[object Promise]'
              };
              Promise.prototype.caught = Promise.prototype['catch'] = function (fn) {
                var len = arguments.length;
                if (len > 1) {
                  var catchInstances = new Array(len - 1), j = 0, i;
                  for (i = 0; i < len - 1; ++i) {
                    var item = arguments[i];
                    if (typeof item === 'function') {
                      catchInstances[j++] = item
                    } else {
                      return Promise.reject(new TypeError('Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n'))
                    }
                  }
                  catchInstances.length = j;
                  fn = arguments[i];
                  var catchFilter = new CatchFilter(catchInstances, fn, this);
                  return this._then(undefined, catchFilter.doFilter, undefined, catchFilter, undefined)
                }
                return this._then(undefined, fn, undefined, undefined, undefined)
              };
              Promise.prototype.reflect = function () {
                return this._then(reflect, reflect, undefined, this, undefined)
              };
              Promise.prototype.then = function (didFulfill, didReject, didProgress) {
                if (isDebugging() && arguments.length > 0 && typeof didFulfill !== 'function' && typeof didReject !== 'function') {
                  var msg = '.then() only accepts functions but was passed: ' + util.classString(didFulfill);
                  if (arguments.length > 1) {
                    msg += ', ' + util.classString(didReject)
                  }
                  this._warn(msg)
                }
                return this._then(didFulfill, didReject, didProgress, undefined, undefined)
              };
              Promise.prototype.done = function (didFulfill, didReject, didProgress) {
                var promise = this._then(didFulfill, didReject, didProgress, undefined, undefined);
                promise._setIsFinal()
              };
              Promise.prototype.spread = function (didFulfill, didReject) {
                return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined)
              };
              Promise.prototype.isCancellable = function () {
                return !this.isResolved() && this._cancellable()
              };
              Promise.prototype.toJSON = function () {
                var ret = {
                  isFulfilled: false,
                  isRejected: false,
                  fulfillmentValue: undefined,
                  rejectionReason: undefined
                };
                if (this.isFulfilled()) {
                  ret.fulfillmentValue = this.value();
                  ret.isFulfilled = true
                } else if (this.isRejected()) {
                  ret.rejectionReason = this.reason();
                  ret.isRejected = true
                }
                return ret
              };
              Promise.prototype.all = function () {
                return new PromiseArray(this).promise()
              };
              Promise.prototype.error = function (fn) {
                return this.caught(util.originatesFromRejection, fn)
              };
              Promise.is = function (val) {
                return val instanceof Promise
              };
              Promise.fromNode = function (fn) {
                var ret = new Promise(INTERNAL);
                var result = tryCatch(fn)(nodebackForPromise(ret));
                if (result === errorObj) {
                  ret._rejectCallback(result.e, true, true)
                }
                return ret
              };
              Promise.all = function (promises) {
                return new PromiseArray(promises).promise()
              };
              Promise.defer = Promise.pending = function () {
                var promise = new Promise(INTERNAL);
                return new PromiseResolver(promise)
              };
              Promise.cast = function (obj) {
                var ret = tryConvertToPromise(obj);
                if (!(ret instanceof Promise)) {
                  var val = ret;
                  ret = new Promise(INTERNAL);
                  ret._fulfillUnchecked(val)
                }
                return ret
              };
              Promise.resolve = Promise.fulfilled = Promise.cast;
              Promise.reject = Promise.rejected = function (reason) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._rejectCallback(reason, true);
                return ret
              };
              Promise.setScheduler = function (fn) {
                if (typeof fn !== 'function')
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var prev = async._schedule;
                async._schedule = fn;
                return prev
              };
              Promise.prototype._then = function (didFulfill, didReject, didProgress, receiver, internalData) {
                var haveInternalData = internalData !== undefined;
                var ret = haveInternalData ? internalData : new Promise(INTERNAL);
                if (!haveInternalData) {
                  ret._propagateFrom(this, 4 | 1);
                  ret._captureStackTrace()
                }
                var target = this._target();
                if (target !== this) {
                  if (receiver === undefined)
                    receiver = this._boundTo;
                  if (!haveInternalData)
                    ret._setIsMigrated()
                }
                var callbackIndex = target._addCallbacks(didFulfill, didReject, didProgress, ret, receiver, getDomain());
                if (target._isResolved() && !target._isSettlePromisesQueued()) {
                  async.invoke(target._settlePromiseAtPostResolution, target, callbackIndex)
                }
                return ret
              };
              Promise.prototype._settlePromiseAtPostResolution = function (index) {
                if (this._isRejectionUnhandled())
                  this._unsetRejectionIsUnhandled();
                this._settlePromiseAt(index)
              };
              Promise.prototype._length = function () {
                return this._bitField & 131071
              };
              Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
                return (this._bitField & 939524096) > 0
              };
              Promise.prototype._isFollowing = function () {
                return (this._bitField & 536870912) === 536870912
              };
              Promise.prototype._setLength = function (len) {
                this._bitField = this._bitField & -131072 | len & 131071
              };
              Promise.prototype._setFulfilled = function () {
                this._bitField = this._bitField | 268435456
              };
              Promise.prototype._setRejected = function () {
                this._bitField = this._bitField | 134217728
              };
              Promise.prototype._setFollowing = function () {
                this._bitField = this._bitField | 536870912
              };
              Promise.prototype._setIsFinal = function () {
                this._bitField = this._bitField | 33554432
              };
              Promise.prototype._isFinal = function () {
                return (this._bitField & 33554432) > 0
              };
              Promise.prototype._cancellable = function () {
                return (this._bitField & 67108864) > 0
              };
              Promise.prototype._setCancellable = function () {
                this._bitField = this._bitField | 67108864
              };
              Promise.prototype._unsetCancellable = function () {
                this._bitField = this._bitField & ~67108864
              };
              Promise.prototype._setIsMigrated = function () {
                this._bitField = this._bitField | 4194304
              };
              Promise.prototype._unsetIsMigrated = function () {
                this._bitField = this._bitField & ~4194304
              };
              Promise.prototype._isMigrated = function () {
                return (this._bitField & 4194304) > 0
              };
              Promise.prototype._receiverAt = function (index) {
                var ret = index === 0 ? this._receiver0 : this[index * 5 - 5 + 4];
                if (ret === UNDEFINED_BINDING) {
                  return undefined
                } else if (ret === undefined && this._isBound()) {
                  return this._boundValue()
                }
                return ret
              };
              Promise.prototype._promiseAt = function (index) {
                return index === 0 ? this._promise0 : this[index * 5 - 5 + 3]
              };
              Promise.prototype._fulfillmentHandlerAt = function (index) {
                return index === 0 ? this._fulfillmentHandler0 : this[index * 5 - 5 + 0]
              };
              Promise.prototype._rejectionHandlerAt = function (index) {
                return index === 0 ? this._rejectionHandler0 : this[index * 5 - 5 + 1]
              };
              Promise.prototype._boundValue = function () {
                var ret = this._boundTo;
                if (ret !== undefined) {
                  if (ret instanceof Promise) {
                    if (ret.isFulfilled()) {
                      return ret.value()
                    } else {
                      return undefined
                    }
                  }
                }
                return ret
              };
              Promise.prototype._migrateCallbacks = function (follower, index) {
                var fulfill = follower._fulfillmentHandlerAt(index);
                var reject = follower._rejectionHandlerAt(index);
                var progress = follower._progressHandlerAt(index);
                var promise = follower._promiseAt(index);
                var receiver = follower._receiverAt(index);
                if (promise instanceof Promise)
                  promise._setIsMigrated();
                if (receiver === undefined)
                  receiver = UNDEFINED_BINDING;
                this._addCallbacks(fulfill, reject, progress, promise, receiver, null)
              };
              Promise.prototype._addCallbacks = function (fulfill, reject, progress, promise, receiver, domain) {
                var index = this._length();
                if (index >= 131071 - 5) {
                  index = 0;
                  this._setLength(0)
                }
                if (index === 0) {
                  this._promise0 = promise;
                  if (receiver !== undefined)
                    this._receiver0 = receiver;
                  if (typeof fulfill === 'function' && !this._isCarryingStackTrace()) {
                    this._fulfillmentHandler0 = domain === null ? fulfill : domain.bind(fulfill)
                  }
                  if (typeof reject === 'function') {
                    this._rejectionHandler0 = domain === null ? reject : domain.bind(reject)
                  }
                  if (typeof progress === 'function') {
                    this._progressHandler0 = domain === null ? progress : domain.bind(progress)
                  }
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = promise;
                  this[base + 4] = receiver;
                  if (typeof fulfill === 'function') {
                    this[base + 0] = domain === null ? fulfill : domain.bind(fulfill)
                  }
                  if (typeof reject === 'function') {
                    this[base + 1] = domain === null ? reject : domain.bind(reject)
                  }
                  if (typeof progress === 'function') {
                    this[base + 2] = domain === null ? progress : domain.bind(progress)
                  }
                }
                this._setLength(index + 1);
                return index
              };
              Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
                var index = this._length();
                if (index >= 131071 - 5) {
                  index = 0;
                  this._setLength(0)
                }
                if (index === 0) {
                  this._promise0 = promiseSlotValue;
                  this._receiver0 = receiver
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = promiseSlotValue;
                  this[base + 4] = receiver
                }
                this._setLength(index + 1)
              };
              Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
                this._setProxyHandlers(promiseArray, index)
              };
              Promise.prototype._resolveCallback = function (value, shouldBind) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                if (value === this)
                  return this._rejectCallback(makeSelfResolutionError(), false, true);
                var maybePromise = tryConvertToPromise(value, this);
                if (!(maybePromise instanceof Promise))
                  return this._fulfill(value);
                var propagationFlags = 1 | (shouldBind ? 4 : 0);
                this._propagateFrom(maybePromise, propagationFlags);
                var promise = maybePromise._target();
                if (promise._isPending()) {
                  var len = this._length();
                  for (var i = 0; i < len; ++i) {
                    promise._migrateCallbacks(this, i)
                  }
                  this._setFollowing();
                  this._setLength(0);
                  this._setFollowee(promise)
                } else if (promise._isFulfilled()) {
                  this._fulfillUnchecked(promise._value())
                } else {
                  this._rejectUnchecked(promise._reason(), promise._getCarriedStackTrace())
                }
              };
              Promise.prototype._rejectCallback = function (reason, synchronous, shouldNotMarkOriginatingFromRejection) {
                if (!shouldNotMarkOriginatingFromRejection) {
                  util.markAsOriginatingFromRejection(reason)
                }
                var trace = util.ensureErrorObject(reason);
                var hasStack = trace === reason;
                this._attachExtraTrace(trace, synchronous ? hasStack : false);
                this._reject(reason, hasStack ? undefined : trace)
              };
              Promise.prototype._resolveFromResolver = function (resolver) {
                var promise = this;
                this._captureStackTrace();
                this._pushContext();
                var synchronous = true;
                var r = tryCatch(resolver)(function (value) {
                  if (promise === null)
                    return;
                  promise._resolveCallback(value);
                  promise = null
                }, function (reason) {
                  if (promise === null)
                    return;
                  promise._rejectCallback(reason, synchronous);
                  promise = null
                });
                synchronous = false;
                this._popContext();
                if (r !== undefined && r === errorObj && promise !== null) {
                  promise._rejectCallback(r.e, true, true);
                  promise = null
                }
              };
              Promise.prototype._settlePromiseFromHandler = function (handler, receiver, value, promise) {
                if (promise._isRejected())
                  return;
                promise._pushContext();
                var x;
                if (receiver === APPLY && !this._isRejected()) {
                  x = tryCatch(handler).apply(this._boundValue(), value)
                } else {
                  x = tryCatch(handler).call(receiver, value)
                }
                promise._popContext();
                if (x === errorObj || x === promise || x === NEXT_FILTER) {
                  var err = x === promise ? makeSelfResolutionError() : x.e;
                  promise._rejectCallback(err, false, true)
                } else {
                  promise._resolveCallback(x)
                }
              };
              Promise.prototype._target = function () {
                var ret = this;
                while (ret._isFollowing())
                  ret = ret._followee();
                return ret
              };
              Promise.prototype._followee = function () {
                return this._rejectionHandler0
              };
              Promise.prototype._setFollowee = function (promise) {
                this._rejectionHandler0 = promise
              };
              Promise.prototype._cleanValues = function () {
                if (this._cancellable()) {
                  this._cancellationParent = undefined
                }
              };
              Promise.prototype._propagateFrom = function (parent, flags) {
                if ((flags & 1) > 0 && parent._cancellable()) {
                  this._setCancellable();
                  this._cancellationParent = parent
                }
                if ((flags & 4) > 0 && parent._isBound()) {
                  this._setBoundTo(parent._boundTo)
                }
              };
              Promise.prototype._fulfill = function (value) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._fulfillUnchecked(value)
              };
              Promise.prototype._reject = function (reason, carriedStackTrace) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._rejectUnchecked(reason, carriedStackTrace)
              };
              Promise.prototype._settlePromiseAt = function (index) {
                var promise = this._promiseAt(index);
                var isPromise = promise instanceof Promise;
                if (isPromise && promise._isMigrated()) {
                  promise._unsetIsMigrated();
                  return async.invoke(this._settlePromiseAt, this, index)
                }
                var handler = this._isFulfilled() ? this._fulfillmentHandlerAt(index) : this._rejectionHandlerAt(index);
                var carriedStackTrace = this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
                var value = this._settledValue;
                var receiver = this._receiverAt(index);
                this._clearCallbackDataAtIndex(index);
                if (typeof handler === 'function') {
                  if (!isPromise) {
                    handler.call(receiver, value, promise)
                  } else {
                    this._settlePromiseFromHandler(handler, receiver, value, promise)
                  }
                } else if (receiver instanceof PromiseArray) {
                  if (!receiver._isResolved()) {
                    if (this._isFulfilled()) {
                      receiver._promiseFulfilled(value, promise)
                    } else {
                      receiver._promiseRejected(value, promise)
                    }
                  }
                } else if (isPromise) {
                  if (this._isFulfilled()) {
                    promise._fulfill(value)
                  } else {
                    promise._reject(value, carriedStackTrace)
                  }
                }
                if (index >= 4 && (index & 31) === 4)
                  async.invokeLater(this._setLength, this, 0)
              };
              Promise.prototype._clearCallbackDataAtIndex = function (index) {
                if (index === 0) {
                  if (!this._isCarryingStackTrace()) {
                    this._fulfillmentHandler0 = undefined
                  }
                  this._rejectionHandler0 = this._progressHandler0 = this._receiver0 = this._promise0 = undefined
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = this[base + 4] = this[base + 0] = this[base + 1] = this[base + 2] = undefined
                }
              };
              Promise.prototype._isSettlePromisesQueued = function () {
                return (this._bitField & -1073741824) === -1073741824
              };
              Promise.prototype._setSettlePromisesQueued = function () {
                this._bitField = this._bitField | -1073741824
              };
              Promise.prototype._unsetSettlePromisesQueued = function () {
                this._bitField = this._bitField & ~-1073741824
              };
              Promise.prototype._queueSettlePromises = function () {
                async.settlePromises(this);
                this._setSettlePromisesQueued()
              };
              Promise.prototype._fulfillUnchecked = function (value) {
                if (value === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._rejectUnchecked(err, undefined)
                }
                this._setFulfilled();
                this._settledValue = value;
                this._cleanValues();
                if (this._length() > 0) {
                  this._queueSettlePromises()
                }
              };
              Promise.prototype._rejectUncheckedCheckError = function (reason) {
                var trace = util.ensureErrorObject(reason);
                this._rejectUnchecked(reason, trace === reason ? undefined : trace)
              };
              Promise.prototype._rejectUnchecked = function (reason, trace) {
                if (reason === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._rejectUnchecked(err)
                }
                this._setRejected();
                this._settledValue = reason;
                this._cleanValues();
                if (this._isFinal()) {
                  async.throwLater(function (e) {
                    if ('stack' in e) {
                      async.invokeFirst(CapturedTrace.unhandledRejection, undefined, e)
                    }
                    throw e
                  }, trace === undefined ? reason : trace);
                  return
                }
                if (trace !== undefined && trace !== reason) {
                  this._setCarriedStackTrace(trace)
                }
                if (this._length() > 0) {
                  this._queueSettlePromises()
                } else {
                  this._ensurePossibleRejectionHandled()
                }
              };
              Promise.prototype._settlePromises = function () {
                this._unsetSettlePromisesQueued();
                var len = this._length();
                for (var i = 0; i < len; i++) {
                  this._settlePromiseAt(i)
                }
              };
              util.notEnumerableProp(Promise, '_makeSelfResolutionError', makeSelfResolutionError);
              _dereq_('./progress.js')(Promise, PromiseArray);
              _dereq_('./method.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              _dereq_('./bind.js')(Promise, INTERNAL, tryConvertToPromise);
              _dereq_('./finally.js')(Promise, NEXT_FILTER, tryConvertToPromise);
              _dereq_('./direct_resolve.js')(Promise);
              _dereq_('./synchronous_inspection.js')(Promise);
              _dereq_('./join.js')(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
              Promise.Promise = Promise;
              _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
              _dereq_('./cancel.js')(Promise);
              _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
              _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
              _dereq_('./nodeify.js')(Promise);
              _dereq_('./call_get.js')(Promise);
              _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
              _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
              _dereq_('./settle.js')(Promise, PromiseArray);
              _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
              _dereq_('./promisify.js')(Promise, INTERNAL);
              _dereq_('./any.js')(Promise);
              _dereq_('./each.js')(Promise, INTERNAL);
              _dereq_('./timers.js')(Promise, INTERNAL);
              _dereq_('./filter.js')(Promise, INTERNAL);
              util.toFastProperties(Promise);
              util.toFastProperties(Promise.prototype);
              function fillTypes(value) {
                var p = new Promise(INTERNAL);
                p._fulfillmentHandler0 = value;
                p._rejectionHandler0 = value;
                p._progressHandler0 = value;
                p._promise0 = value;
                p._receiver0 = value;
                p._settledValue = value
              }
              // Complete slack tracking, opt out of field-type tracking and           
              // stabilize map                                                         
              fillTypes({ a: 1 });
              fillTypes({ b: 2 });
              fillTypes({ c: 3 });
              fillTypes(1);
              fillTypes(function () {
              });
              fillTypes(undefined);
              fillTypes(false);
              fillTypes(new Promise(INTERNAL));
              CapturedTrace.setBounds(async.firstLineError, util.lastLineError);
              return Promise
            }
          },
          {
            './any.js': 1,
            './async.js': 2,
            './bind.js': 3,
            './call_get.js': 5,
            './cancel.js': 6,
            './captured_trace.js': 7,
            './catch_filter.js': 8,
            './context.js': 9,
            './debuggability.js': 10,
            './direct_resolve.js': 11,
            './each.js': 12,
            './errors.js': 13,
            './filter.js': 15,
            './finally.js': 16,
            './generators.js': 17,
            './join.js': 18,
            './map.js': 19,
            './method.js': 20,
            './nodeify.js': 21,
            './progress.js': 22,
            './promise_array.js': 24,
            './promise_resolver.js': 25,
            './promisify.js': 26,
            './props.js': 27,
            './race.js': 29,
            './reduce.js': 30,
            './settle.js': 32,
            './some.js': 33,
            './synchronous_inspection.js': 34,
            './thenables.js': 35,
            './timers.js': 36,
            './using.js': 37,
            './util.js': 38
          }
        ],
        24: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var isArray = util.isArray;
              function toResolutionValue(val) {
                switch (val) {
                case -2:
                  return [];
                case -3:
                  return {}
                }
              }
              function PromiseArray(values) {
                var promise = this._promise = new Promise(INTERNAL);
                var parent;
                if (values instanceof Promise) {
                  parent = values;
                  promise._propagateFrom(parent, 1 | 4)
                }
                this._values = values;
                this._length = 0;
                this._totalResolved = 0;
                this._init(undefined, -2)
              }
              PromiseArray.prototype.length = function () {
                return this._length
              };
              PromiseArray.prototype.promise = function () {
                return this._promise
              };
              PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
                var values = tryConvertToPromise(this._values, this._promise);
                if (values instanceof Promise) {
                  values = values._target();
                  this._values = values;
                  if (values._isFulfilled()) {
                    values = values._value();
                    if (!isArray(values)) {
                      var err = new Promise.TypeError('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n');
                      this.__hardReject__(err);
                      return
                    }
                  } else if (values._isPending()) {
                    values._then(init, this._reject, undefined, this, resolveValueIfEmpty);
                    return
                  } else {
                    this._reject(values._reason());
                    return
                  }
                } else if (!isArray(values)) {
                  this._promise._reject(apiRejection('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n')._reason());
                  return
                }
                if (values.length === 0) {
                  if (resolveValueIfEmpty === -5) {
                    this._resolveEmptyArray()
                  } else {
                    this._resolve(toResolutionValue(resolveValueIfEmpty))
                  }
                  return
                }
                var len = this.getActualLength(values.length);
                this._length = len;
                this._values = this.shouldCopyValues() ? new Array(len) : this._values;
                var promise = this._promise;
                for (var i = 0; i < len; ++i) {
                  var isResolved = this._isResolved();
                  var maybePromise = tryConvertToPromise(values[i], promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (isResolved) {
                      maybePromise._ignoreRejections()
                    } else if (maybePromise._isPending()) {
                      maybePromise._proxyPromiseArray(this, i)
                    } else if (maybePromise._isFulfilled()) {
                      this._promiseFulfilled(maybePromise._value(), i)
                    } else {
                      this._promiseRejected(maybePromise._reason(), i)
                    }
                  } else if (!isResolved) {
                    this._promiseFulfilled(maybePromise, i)
                  }
                }
              };
              PromiseArray.prototype._isResolved = function () {
                return this._values === null
              };
              PromiseArray.prototype._resolve = function (value) {
                this._values = null;
                this._promise._fulfill(value)
              };
              PromiseArray.prototype.__hardReject__ = PromiseArray.prototype._reject = function (reason) {
                this._values = null;
                this._promise._rejectCallback(reason, false, true)
              };
              PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
                this._promise._progress({
                  index: index,
                  value: progressValue
                })
              };
              PromiseArray.prototype._promiseFulfilled = function (value, index) {
                this._values[index] = value;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  this._resolve(this._values)
                }
              };
              PromiseArray.prototype._promiseRejected = function (reason, index) {
                this._totalResolved++;
                this._reject(reason)
              };
              PromiseArray.prototype.shouldCopyValues = function () {
                return true
              };
              PromiseArray.prototype.getActualLength = function (len) {
                return len
              };
              return PromiseArray
            }
          },
          { './util.js': 38 }
        ],
        25: [
          function (_dereq_, module, exports) {
            'use strict';
            var util = _dereq_('./util.js');
            var maybeWrapAsError = util.maybeWrapAsError;
            var errors = _dereq_('./errors.js');
            var TimeoutError = errors.TimeoutError;
            var OperationalError = errors.OperationalError;
            var haveGetters = util.haveGetters;
            var es5 = _dereq_('./es5.js');
            function isUntypedError(obj) {
              return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype
            }
            var rErrorKey = /^(?:name|message|stack|cause)$/;
            function wrapAsOperationalError(obj) {
              var ret;
              if (isUntypedError(obj)) {
                ret = new OperationalError(obj);
                ret.name = obj.name;
                ret.message = obj.message;
                ret.stack = obj.stack;
                var keys = es5.keys(obj);
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  if (!rErrorKey.test(key)) {
                    ret[key] = obj[key]
                  }
                }
                return ret
              }
              util.markAsOriginatingFromRejection(obj);
              return obj
            }
            function nodebackForPromise(promise) {
              return function (err, value) {
                if (promise === null)
                  return;
                if (err) {
                  var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
                  promise._attachExtraTrace(wrapped);
                  promise._reject(wrapped)
                } else if (arguments.length > 2) {
                  var $_len = arguments.length;
                  var args = new Array($_len - 1);
                  for (var $_i = 1; $_i < $_len; ++$_i) {
                    args[$_i - 1] = arguments[$_i]
                  }
                  promise._fulfill(args)
                } else {
                  promise._fulfill(value)
                }
                promise = null
              }
            }
            var PromiseResolver;
            if (!haveGetters) {
              PromiseResolver = function (promise) {
                this.promise = promise;
                this.asCallback = nodebackForPromise(promise);
                this.callback = this.asCallback
              }
            } else {
              PromiseResolver = function (promise) {
                this.promise = promise
              }
            }
            if (haveGetters) {
              var prop = {
                get: function () {
                  return nodebackForPromise(this.promise)
                }
              };
              es5.defineProperty(PromiseResolver.prototype, 'asCallback', prop);
              es5.defineProperty(PromiseResolver.prototype, 'callback', prop)
            }
            PromiseResolver._nodebackForPromise = nodebackForPromise;
            PromiseResolver.prototype.toString = function () {
              return '[object PromiseResolver]'
            };
            PromiseResolver.prototype.resolve = PromiseResolver.prototype.fulfill = function (value) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._resolveCallback(value)
            };
            PromiseResolver.prototype.reject = function (reason) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._rejectCallback(reason)
            };
            PromiseResolver.prototype.progress = function (value) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._progress(value)
            };
            PromiseResolver.prototype.cancel = function (err) {
              this.promise.cancel(err)
            };
            PromiseResolver.prototype.timeout = function () {
              this.reject(new TimeoutError('timeout'))
            };
            PromiseResolver.prototype.isResolved = function () {
              return this.promise.isResolved()
            };
            PromiseResolver.prototype.toJSON = function () {
              return this.promise.toJSON()
            };
            module.exports = PromiseResolver
          },
          {
            './errors.js': 13,
            './es5.js': 14,
            './util.js': 38
          }
        ],
        26: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var THIS = {};
              var util = _dereq_('./util.js');
              var nodebackForPromise = _dereq_('./promise_resolver.js')._nodebackForPromise;
              var withAppended = util.withAppended;
              var maybeWrapAsError = util.maybeWrapAsError;
              var canEvaluate = util.canEvaluate;
              var TypeError = _dereq_('./errors').TypeError;
              var defaultSuffix = 'Async';
              var defaultPromisified = { __isPromisified__: true };
              var noCopyProps = [
                'arity',
                'length',
                'name',
                'arguments',
                'caller',
                'callee',
                'prototype',
                '__isPromisified__'
              ];
              var noCopyPropsPattern = new RegExp('^(?:' + noCopyProps.join('|') + ')$');
              var defaultFilter = function (name) {
                return util.isIdentifier(name) && name.charAt(0) !== '_' && name !== 'constructor'
              };
              function propsFilter(key) {
                return !noCopyPropsPattern.test(key)
              }
              function isPromisified(fn) {
                try {
                  return fn.__isPromisified__ === true
                } catch (e) {
                  return false
                }
              }
              function hasPromisified(obj, key, suffix) {
                var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
                return val ? isPromisified(val) : false
              }
              function checkValid(ret, suffix, suffixRegexp) {
                for (var i = 0; i < ret.length; i += 2) {
                  var key = ret[i];
                  if (suffixRegexp.test(key)) {
                    var keyWithoutAsyncSuffix = key.replace(suffixRegexp, '');
                    for (var j = 0; j < ret.length; j += 2) {
                      if (ret[j] === keyWithoutAsyncSuffix) {
                        throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/iWrZbw\n".replace('%s', suffix))
                      }
                    }
                  }
                }
              }
              function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
                var keys = util.inheritedDataKeys(obj);
                var ret = [];
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  var value = obj[key];
                  var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj);
                  if (typeof value === 'function' && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj, passesDefaultFilter)) {
                    ret.push(key, value)
                  }
                }
                checkValid(ret, suffix, suffixRegexp);
                return ret
              }
              var escapeIdentRegex = function (str) {
                return str.replace(/([$])/, '\\$')
              };
              var makeNodePromisifiedEval;
              if (!true) {
                var switchCaseArgumentOrder = function (likelyArgumentCount) {
                  var ret = [likelyArgumentCount];
                  var min = Math.max(0, likelyArgumentCount - 1 - 3);
                  for (var i = likelyArgumentCount - 1; i >= min; --i) {
                    ret.push(i)
                  }
                  for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                    ret.push(i)
                  }
                  return ret
                };
                var argumentSequence = function (argumentCount) {
                  return util.filledRange(argumentCount, '_arg', '')
                };
                var parameterDeclaration = function (parameterCount) {
                  return util.filledRange(Math.max(parameterCount, 3), '_arg', '')
                };
                var parameterCount = function (fn) {
                  if (typeof fn.length === 'number') {
                    return Math.max(Math.min(fn.length, 1023 + 1), 0)
                  }
                  return 0
                };
                makeNodePromisifiedEval = function (callback, receiver, originalName, fn) {
                  var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                  var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                  var shouldProxyThis = typeof callback === 'string' || receiver === THIS;
                  function generateCallForArgumentCount(count) {
                    var args = argumentSequence(count).join(', ');
                    var comma = count > 0 ? ', ' : '';
                    var ret;
                    if (shouldProxyThis) {
                      ret = 'ret = callback.call(this, {{args}}, nodeback); break;\n'
                    } else {
                      ret = receiver === undefined ? 'ret = callback({{args}}, nodeback); break;\n' : 'ret = callback.call(receiver, {{args}}, nodeback); break;\n'
                    }
                    return ret.replace('{{args}}', args).replace(', ', comma)
                  }
                  function generateArgumentSwitchCase() {
                    var ret = '';
                    for (var i = 0; i < argumentOrder.length; ++i) {
                      ret += 'case ' + argumentOrder[i] + ':' + generateCallForArgumentCount(argumentOrder[i])
                    }
                    ret += '                                                             \n        default:                                                             \n            var args = new Array(len + 1);                                   \n            var i = 0;                                                       \n            for (var i = 0; i < len; ++i) {                                  \n               args[i] = arguments[i];                                       \n            }                                                                \n            args[i] = nodeback;                                              \n            [CodeForCall]                                                    \n            break;                                                           \n        '.replace('[CodeForCall]', shouldProxyThis ? 'ret = callback.apply(this, args);\n' : 'ret = callback.apply(receiver, args);\n');
                    return ret
                  }
                  var getFunctionCode = typeof callback === 'string' ? "this != null ? this['" + callback + "'] : fn" : 'fn';
                  return new Function('Promise', 'fn', 'receiver', 'withAppended', 'maybeWrapAsError', 'nodebackForPromise', 'tryCatch', 'errorObj', 'notEnumerableProp', 'INTERNAL', "'use strict';                            \n        var ret = function (Parameters) {                                    \n            'use strict';                                                    \n            var len = arguments.length;                                      \n            var promise = new Promise(INTERNAL);                             \n            promise._captureStackTrace();                                    \n            var nodeback = nodebackForPromise(promise);                      \n            var ret;                                                         \n            var callback = tryCatch([GetFunctionCode]);                      \n            switch(len) {                                                    \n                [CodeForSwitchCase]                                          \n            }                                                                \n            if (ret === errorObj) {                                          \n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n            }                                                                \n            return promise;                                                  \n        };                                                                   \n        notEnumerableProp(ret, '__isPromisified__', true);                   \n        return ret;                                                          \n        ".replace('Parameters', parameterDeclaration(newParameterCount)).replace('[CodeForSwitchCase]', generateArgumentSwitchCase()).replace('[GetFunctionCode]', getFunctionCode))(Promise, fn, receiver, withAppended, maybeWrapAsError, nodebackForPromise, util.tryCatch, util.errorObj, util.notEnumerableProp, INTERNAL)
                }
              }
              function makeNodePromisifiedClosure(callback, receiver, _, fn) {
                var defaultThis = function () {
                  return this
                }();
                var method = callback;
                if (typeof method === 'string') {
                  callback = fn
                }
                function promisified() {
                  var _receiver = receiver;
                  if (receiver === THIS)
                    _receiver = this;
                  var promise = new Promise(INTERNAL);
                  promise._captureStackTrace();
                  var cb = typeof method === 'string' && this !== defaultThis ? this[method] : callback;
                  var fn = nodebackForPromise(promise);
                  try {
                    cb.apply(_receiver, withAppended(arguments, fn))
                  } catch (e) {
                    promise._rejectCallback(maybeWrapAsError(e), true, true)
                  }
                  return promise
                }
                util.notEnumerableProp(promisified, '__isPromisified__', true);
                return promisified
              }
              var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
              function promisifyAll(obj, suffix, filter, promisifier) {
                var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + '$');
                var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
                for (var i = 0, len = methods.length; i < len; i += 2) {
                  var key = methods[i];
                  var fn = methods[i + 1];
                  var promisifiedKey = key + suffix;
                  if (promisifier === makeNodePromisified) {
                    obj[promisifiedKey] = makeNodePromisified(key, THIS, key, fn, suffix)
                  } else {
                    var promisified = promisifier(fn, function () {
                      return makeNodePromisified(key, THIS, key, fn, suffix)
                    });
                    util.notEnumerableProp(promisified, '__isPromisified__', true);
                    obj[promisifiedKey] = promisified
                  }
                }
                util.toFastProperties(obj);
                return obj
              }
              function promisify(callback, receiver) {
                return makeNodePromisified(callback, receiver, undefined, callback)
              }
              Promise.promisify = function (fn, receiver) {
                if (typeof fn !== 'function') {
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                if (isPromisified(fn)) {
                  return fn
                }
                var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
                util.copyDescriptors(fn, ret, propsFilter);
                return ret
              };
              Promise.promisifyAll = function (target, options) {
                if (typeof target !== 'function' && typeof target !== 'object') {
                  throw new TypeError('the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/9ITlV0\n')
                }
                options = Object(options);
                var suffix = options.suffix;
                if (typeof suffix !== 'string')
                  suffix = defaultSuffix;
                var filter = options.filter;
                if (typeof filter !== 'function')
                  filter = defaultFilter;
                var promisifier = options.promisifier;
                if (typeof promisifier !== 'function')
                  promisifier = makeNodePromisified;
                if (!util.isIdentifier(suffix)) {
                  throw new RangeError('suffix must be a valid identifier\n\n    See http://goo.gl/8FZo5V\n')
                }
                var keys = util.inheritedDataKeys(target);
                for (var i = 0; i < keys.length; ++i) {
                  var value = target[keys[i]];
                  if (keys[i] !== 'constructor' && util.isClass(value)) {
                    promisifyAll(value.prototype, suffix, filter, promisifier);
                    promisifyAll(value, suffix, filter, promisifier)
                  }
                }
                return promisifyAll(target, suffix, filter, promisifier)
              }
            }
          },
          {
            './errors': 13,
            './promise_resolver.js': 25,
            './util.js': 38
          }
        ],
        27: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var isObject = util.isObject;
              var es5 = _dereq_('./es5.js');
              function PropertiesPromiseArray(obj) {
                var keys = es5.keys(obj);
                var len = keys.length;
                var values = new Array(len * 2);
                for (var i = 0; i < len; ++i) {
                  var key = keys[i];
                  values[i] = obj[key];
                  values[i + len] = key
                }
                this.constructor$(values)
              }
              util.inherits(PropertiesPromiseArray, PromiseArray);
              PropertiesPromiseArray.prototype._init = function () {
                this._init$(undefined, -3)
              };
              PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
                this._values[index] = value;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  var val = {};
                  var keyOffset = this.length();
                  for (var i = 0, len = this.length(); i < len; ++i) {
                    val[this._values[i + keyOffset]] = this._values[i]
                  }
                  this._resolve(val)
                }
              };
              PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
                this._promise._progress({
                  key: this._values[index + this.length()],
                  value: value
                })
              };
              PropertiesPromiseArray.prototype.shouldCopyValues = function () {
                return false
              };
              PropertiesPromiseArray.prototype.getActualLength = function (len) {
                return len >> 1
              };
              function props(promises) {
                var ret;
                var castValue = tryConvertToPromise(promises);
                if (!isObject(castValue)) {
                  return apiRejection('cannot await properties of a non-object\n\n    See http://goo.gl/OsFKC8\n')
                } else if (castValue instanceof Promise) {
                  ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined)
                } else {
                  ret = new PropertiesPromiseArray(castValue).promise()
                }
                if (castValue instanceof Promise) {
                  ret._propagateFrom(castValue, 4)
                }
                return ret
              }
              Promise.prototype.props = function () {
                return props(this)
              };
              Promise.props = function (promises) {
                return props(promises)
              }
            }
          },
          {
            './es5.js': 14,
            './util.js': 38
          }
        ],
        28: [
          function (_dereq_, module, exports) {
            'use strict';
            function arrayMove(src, srcIndex, dst, dstIndex, len) {
              for (var j = 0; j < len; ++j) {
                dst[j + dstIndex] = src[j + srcIndex];
                src[j + srcIndex] = void 0
              }
            }
            function Queue(capacity) {
              this._capacity = capacity;
              this._length = 0;
              this._front = 0
            }
            Queue.prototype._willBeOverCapacity = function (size) {
              return this._capacity < size
            };
            Queue.prototype._pushOne = function (arg) {
              var length = this.length();
              this._checkCapacity(length + 1);
              var i = this._front + length & this._capacity - 1;
              this[i] = arg;
              this._length = length + 1
            };
            Queue.prototype._unshiftOne = function (value) {
              var capacity = this._capacity;
              this._checkCapacity(this.length() + 1);
              var front = this._front;
              var i = (front - 1 & capacity - 1 ^ capacity) - capacity;
              this[i] = value;
              this._front = i;
              this._length = this.length() + 1
            };
            Queue.prototype.unshift = function (fn, receiver, arg) {
              this._unshiftOne(arg);
              this._unshiftOne(receiver);
              this._unshiftOne(fn)
            };
            Queue.prototype.push = function (fn, receiver, arg) {
              var length = this.length() + 3;
              if (this._willBeOverCapacity(length)) {
                this._pushOne(fn);
                this._pushOne(receiver);
                this._pushOne(arg);
                return
              }
              var j = this._front + length - 3;
              this._checkCapacity(length);
              var wrapMask = this._capacity - 1;
              this[j + 0 & wrapMask] = fn;
              this[j + 1 & wrapMask] = receiver;
              this[j + 2 & wrapMask] = arg;
              this._length = length
            };
            Queue.prototype.shift = function () {
              var front = this._front, ret = this[front];
              this[front] = undefined;
              this._front = front + 1 & this._capacity - 1;
              this._length--;
              return ret
            };
            Queue.prototype.length = function () {
              return this._length
            };
            Queue.prototype._checkCapacity = function (size) {
              if (this._capacity < size) {
                this._resizeTo(this._capacity << 1)
              }
            };
            Queue.prototype._resizeTo = function (capacity) {
              var oldCapacity = this._capacity;
              this._capacity = capacity;
              var front = this._front;
              var length = this._length;
              var moveItemsCount = front + length & oldCapacity - 1;
              arrayMove(this, 0, this, oldCapacity, moveItemsCount)
            };
            module.exports = Queue
          },
          {}
        ],
        29: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var isArray = _dereq_('./util.js').isArray;
              var raceLater = function (promise) {
                return promise.then(function (array) {
                  return race(array, promise)
                })
              };
              function race(promises, parent) {
                var maybePromise = tryConvertToPromise(promises);
                if (maybePromise instanceof Promise) {
                  return raceLater(maybePromise)
                } else if (!isArray(promises)) {
                  return apiRejection('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n')
                }
                var ret = new Promise(INTERNAL);
                if (parent !== undefined) {
                  ret._propagateFrom(parent, 4 | 1)
                }
                var fulfill = ret._fulfill;
                var reject = ret._reject;
                for (var i = 0, len = promises.length; i < len; ++i) {
                  var val = promises[i];
                  if (val === undefined && !(i in promises)) {
                    continue
                  }
                  Promise.cast(val)._then(fulfill, reject, undefined, ret, null)
                }
                return ret
              }
              Promise.race = function (promises) {
                return race(promises, undefined)
              };
              Promise.prototype.race = function () {
                return race(this, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        30: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              function ReductionPromiseArray(promises, fn, accum, _each) {
                this.constructor$(promises);
                this._promise._captureStackTrace();
                this._preservedValues = _each === INTERNAL ? [] : null;
                this._zerothIsAccum = accum === undefined;
                this._gotAccum = false;
                this._reducingIndex = this._zerothIsAccum ? 1 : 0;
                this._valuesPhase = undefined;
                var maybePromise = tryConvertToPromise(accum, this._promise);
                var rejected = false;
                var isPromise = maybePromise instanceof Promise;
                if (isPromise) {
                  maybePromise = maybePromise._target();
                  if (maybePromise._isPending()) {
                    maybePromise._proxyPromiseArray(this, -1)
                  } else if (maybePromise._isFulfilled()) {
                    accum = maybePromise._value();
                    this._gotAccum = true
                  } else {
                    this._reject(maybePromise._reason());
                    rejected = true
                  }
                }
                if (!(isPromise || this._zerothIsAccum))
                  this._gotAccum = true;
                var domain = getDomain();
                this._callback = domain === null ? fn : domain.bind(fn);
                this._accum = accum;
                if (!rejected)
                  async.invoke(init, this, undefined)
              }
              function init() {
                this._init$(undefined, -5)
              }
              util.inherits(ReductionPromiseArray, PromiseArray);
              ReductionPromiseArray.prototype._init = function () {
              };
              ReductionPromiseArray.prototype._resolveEmptyArray = function () {
                if (this._gotAccum || this._zerothIsAccum) {
                  this._resolve(this._preservedValues !== null ? [] : this._accum)
                }
              };
              ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var values = this._values;
                values[index] = value;
                var length = this.length();
                var preservedValues = this._preservedValues;
                var isEach = preservedValues !== null;
                var gotAccum = this._gotAccum;
                var valuesPhase = this._valuesPhase;
                var valuesPhaseIndex;
                if (!valuesPhase) {
                  valuesPhase = this._valuesPhase = new Array(length);
                  for (valuesPhaseIndex = 0; valuesPhaseIndex < length; ++valuesPhaseIndex) {
                    valuesPhase[valuesPhaseIndex] = 0
                  }
                }
                valuesPhaseIndex = valuesPhase[index];
                if (index === 0 && this._zerothIsAccum) {
                  this._accum = value;
                  this._gotAccum = gotAccum = true;
                  valuesPhase[index] = valuesPhaseIndex === 0 ? 1 : 2
                } else if (index === -1) {
                  this._accum = value;
                  this._gotAccum = gotAccum = true
                } else {
                  if (valuesPhaseIndex === 0) {
                    valuesPhase[index] = 1
                  } else {
                    valuesPhase[index] = 2;
                    this._accum = value
                  }
                }
                if (!gotAccum)
                  return;
                var callback = this._callback;
                var receiver = this._promise._boundValue();
                var ret;
                for (var i = this._reducingIndex; i < length; ++i) {
                  valuesPhaseIndex = valuesPhase[i];
                  if (valuesPhaseIndex === 2) {
                    this._reducingIndex = i + 1;
                    continue
                  }
                  if (valuesPhaseIndex !== 1)
                    return;
                  value = values[i];
                  this._promise._pushContext();
                  if (isEach) {
                    preservedValues.push(value);
                    ret = tryCatch(callback).call(receiver, value, i, length)
                  } else {
                    ret = tryCatch(callback).call(receiver, this._accum, value, i, length)
                  }
                  this._promise._popContext();
                  if (ret === errorObj)
                    return this._reject(ret.e);
                  var maybePromise = tryConvertToPromise(ret, this._promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (maybePromise._isPending()) {
                      valuesPhase[i] = 4;
                      return maybePromise._proxyPromiseArray(this, i)
                    } else if (maybePromise._isFulfilled()) {
                      ret = maybePromise._value()
                    } else {
                      return this._reject(maybePromise._reason())
                    }
                  }
                  this._reducingIndex = i + 1;
                  this._accum = ret
                }
                this._resolve(isEach ? preservedValues : this._accum)
              };
              function reduce(promises, fn, initialValue, _each) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
                return array.promise()
              }
              Promise.prototype.reduce = function (fn, initialValue) {
                return reduce(this, fn, initialValue, null)
              };
              Promise.reduce = function (promises, fn, initialValue, _each) {
                return reduce(promises, fn, initialValue, _each)
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        31: [
          function (_dereq_, module, exports) {
            'use strict';
            var schedule;
            var util = _dereq_('./util');
            var noAsyncScheduler = function () {
              throw new Error('No async scheduler available\n\n    See http://goo.gl/m3OTXk\n')
            };
            if (util.isNode && typeof MutationObserver === 'undefined') {
              var GlobalSetImmediate = global.setImmediate;
              var ProcessNextTick = process.nextTick;
              schedule = util.isRecentNode ? function (fn) {
                GlobalSetImmediate.call(global, fn)
              } : function (fn) {
                ProcessNextTick.call(process, fn)
              }
            } else if (typeof MutationObserver !== 'undefined' && !(typeof window !== 'undefined' && window.navigator && window.navigator.standalone)) {
              schedule = function (fn) {
                var div = document.createElement('div');
                var observer = new MutationObserver(fn);
                observer.observe(div, { attributes: true });
                return function () {
                  div.classList.toggle('foo')
                }
              };
              schedule.isStatic = true
            } else if (typeof setImmediate !== 'undefined') {
              schedule = function (fn) {
                setImmediate(fn)
              }
            } else if (typeof setTimeout !== 'undefined') {
              schedule = function (fn) {
                setTimeout(fn, 0)
              }
            } else {
              schedule = noAsyncScheduler
            }
            module.exports = schedule
          },
          { './util': 38 }
        ],
        32: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray) {
              var PromiseInspection = Promise.PromiseInspection;
              var util = _dereq_('./util.js');
              function SettledPromiseArray(values) {
                this.constructor$(values)
              }
              util.inherits(SettledPromiseArray, PromiseArray);
              SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
                this._values[index] = inspection;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  this._resolve(this._values)
                }
              };
              SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var ret = new PromiseInspection;
                ret._bitField = 268435456;
                ret._settledValue = value;
                this._promiseResolved(index, ret)
              };
              SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
                var ret = new PromiseInspection;
                ret._bitField = 134217728;
                ret._settledValue = reason;
                this._promiseResolved(index, ret)
              };
              Promise.settle = function (promises) {
                return new SettledPromiseArray(promises).promise()
              };
              Promise.prototype.settle = function () {
                return new SettledPromiseArray(this).promise()
              }
            }
          },
          { './util.js': 38 }
        ],
        33: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection) {
              var util = _dereq_('./util.js');
              var RangeError = _dereq_('./errors.js').RangeError;
              var AggregateError = _dereq_('./errors.js').AggregateError;
              var isArray = util.isArray;
              function SomePromiseArray(values) {
                this.constructor$(values);
                this._howMany = 0;
                this._unwrap = false;
                this._initialized = false
              }
              util.inherits(SomePromiseArray, PromiseArray);
              SomePromiseArray.prototype._init = function () {
                if (!this._initialized) {
                  return
                }
                if (this._howMany === 0) {
                  this._resolve([]);
                  return
                }
                this._init$(undefined, -5);
                var isArrayResolved = isArray(this._values);
                if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
                  this._reject(this._getRangeError(this.length()))
                }
              };
              SomePromiseArray.prototype.init = function () {
                this._initialized = true;
                this._init()
              };
              SomePromiseArray.prototype.setUnwrap = function () {
                this._unwrap = true
              };
              SomePromiseArray.prototype.howMany = function () {
                return this._howMany
              };
              SomePromiseArray.prototype.setHowMany = function (count) {
                this._howMany = count
              };
              SomePromiseArray.prototype._promiseFulfilled = function (value) {
                this._addFulfilled(value);
                if (this._fulfilled() === this.howMany()) {
                  this._values.length = this.howMany();
                  if (this.howMany() === 1 && this._unwrap) {
                    this._resolve(this._values[0])
                  } else {
                    this._resolve(this._values)
                  }
                }
              };
              SomePromiseArray.prototype._promiseRejected = function (reason) {
                this._addRejected(reason);
                if (this.howMany() > this._canPossiblyFulfill()) {
                  var e = new AggregateError;
                  for (var i = this.length(); i < this._values.length; ++i) {
                    e.push(this._values[i])
                  }
                  this._reject(e)
                }
              };
              SomePromiseArray.prototype._fulfilled = function () {
                return this._totalResolved
              };
              SomePromiseArray.prototype._rejected = function () {
                return this._values.length - this.length()
              };
              SomePromiseArray.prototype._addRejected = function (reason) {
                this._values.push(reason)
              };
              SomePromiseArray.prototype._addFulfilled = function (value) {
                this._values[this._totalResolved++] = value
              };
              SomePromiseArray.prototype._canPossiblyFulfill = function () {
                return this.length() - this._rejected()
              };
              SomePromiseArray.prototype._getRangeError = function (count) {
                var message = 'Input array must contain at least ' + this._howMany + ' items but contains only ' + count + ' items';
                return new RangeError(message)
              };
              SomePromiseArray.prototype._resolveEmptyArray = function () {
                this._reject(this._getRangeError(0))
              };
              function some(promises, howMany) {
                if ((howMany | 0) !== howMany || howMany < 0) {
                  return apiRejection('expecting a positive integer\n\n    See http://goo.gl/1wAmHx\n')
                }
                var ret = new SomePromiseArray(promises);
                var promise = ret.promise();
                ret.setHowMany(howMany);
                ret.init();
                return promise
              }
              Promise.some = function (promises, howMany) {
                return some(promises, howMany)
              };
              Promise.prototype.some = function (howMany) {
                return some(this, howMany)
              };
              Promise._SomePromiseArray = SomePromiseArray
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        34: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              function PromiseInspection(promise) {
                if (promise !== undefined) {
                  promise = promise._target();
                  this._bitField = promise._bitField;
                  this._settledValue = promise._settledValue
                } else {
                  this._bitField = 0;
                  this._settledValue = undefined
                }
              }
              PromiseInspection.prototype.value = function () {
                if (!this.isFulfilled()) {
                  throw new TypeError('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n')
                }
                return this._settledValue
              };
              PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function () {
                if (!this.isRejected()) {
                  throw new TypeError('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n')
                }
                return this._settledValue
              };
              PromiseInspection.prototype.isFulfilled = Promise.prototype._isFulfilled = function () {
                return (this._bitField & 268435456) > 0
              };
              PromiseInspection.prototype.isRejected = Promise.prototype._isRejected = function () {
                return (this._bitField & 134217728) > 0
              };
              PromiseInspection.prototype.isPending = Promise.prototype._isPending = function () {
                return (this._bitField & 402653184) === 0
              };
              PromiseInspection.prototype.isResolved = Promise.prototype._isResolved = function () {
                return (this._bitField & 402653184) > 0
              };
              Promise.prototype.isPending = function () {
                return this._target()._isPending()
              };
              Promise.prototype.isRejected = function () {
                return this._target()._isRejected()
              };
              Promise.prototype.isFulfilled = function () {
                return this._target()._isFulfilled()
              };
              Promise.prototype.isResolved = function () {
                return this._target()._isResolved()
              };
              Promise.prototype._value = function () {
                return this._settledValue
              };
              Promise.prototype._reason = function () {
                this._unsetRejectionIsUnhandled();
                return this._settledValue
              };
              Promise.prototype.value = function () {
                var target = this._target();
                if (!target.isFulfilled()) {
                  throw new TypeError('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n')
                }
                return target._settledValue
              };
              Promise.prototype.reason = function () {
                var target = this._target();
                if (!target.isRejected()) {
                  throw new TypeError('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n')
                }
                target._unsetRejectionIsUnhandled();
                return target._settledValue
              };
              Promise.PromiseInspection = PromiseInspection
            }
          },
          {}
        ],
        35: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var util = _dereq_('./util.js');
              var errorObj = util.errorObj;
              var isObject = util.isObject;
              function tryConvertToPromise(obj, context) {
                if (isObject(obj)) {
                  if (obj instanceof Promise) {
                    return obj
                  } else if (isAnyBluebirdPromise(obj)) {
                    var ret = new Promise(INTERNAL);
                    obj._then(ret._fulfillUnchecked, ret._rejectUncheckedCheckError, ret._progressUnchecked, ret, null);
                    return ret
                  }
                  var then = util.tryCatch(getThen)(obj);
                  if (then === errorObj) {
                    if (context)
                      context._pushContext();
                    var ret = Promise.reject(then.e);
                    if (context)
                      context._popContext();
                    return ret
                  } else if (typeof then === 'function') {
                    return doThenable(obj, then, context)
                  }
                }
                return obj
              }
              function getThen(obj) {
                return obj.then
              }
              var hasProp = {}.hasOwnProperty;
              function isAnyBluebirdPromise(obj) {
                return hasProp.call(obj, '_promise0')
              }
              function doThenable(x, then, context) {
                var promise = new Promise(INTERNAL);
                var ret = promise;
                if (context)
                  context._pushContext();
                promise._captureStackTrace();
                if (context)
                  context._popContext();
                var synchronous = true;
                var result = util.tryCatch(then).call(x, resolveFromThenable, rejectFromThenable, progressFromThenable);
                synchronous = false;
                if (promise && result === errorObj) {
                  promise._rejectCallback(result.e, true, true);
                  promise = null
                }
                function resolveFromThenable(value) {
                  if (!promise)
                    return;
                  promise._resolveCallback(value);
                  promise = null
                }
                function rejectFromThenable(reason) {
                  if (!promise)
                    return;
                  promise._rejectCallback(reason, synchronous, true);
                  promise = null
                }
                function progressFromThenable(value) {
                  if (!promise)
                    return;
                  if (typeof promise._progress === 'function') {
                    promise._progress(value)
                  }
                }
                return ret
              }
              return tryConvertToPromise
            }
          },
          { './util.js': 38 }
        ],
        36: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var util = _dereq_('./util.js');
              var TimeoutError = Promise.TimeoutError;
              var afterTimeout = function (promise, message) {
                if (!promise.isPending())
                  return;
                var err;
                if (!util.isPrimitive(message) && message instanceof Error) {
                  err = message
                } else {
                  if (typeof message !== 'string') {
                    message = 'operation timed out'
                  }
                  err = new TimeoutError(message)
                }
                util.markAsOriginatingFromRejection(err);
                promise._attachExtraTrace(err);
                promise._cancel(err)
              };
              var afterValue = function (value) {
                return delay(+this).thenReturn(value)
              };
              var delay = Promise.delay = function (value, ms) {
                if (ms === undefined) {
                  ms = value;
                  value = undefined;
                  var ret = new Promise(INTERNAL);
                  setTimeout(function () {
                    ret._fulfill()
                  }, ms);
                  return ret
                }
                ms = +ms;
                return Promise.resolve(value)._then(afterValue, null, null, ms, undefined)
              };
              Promise.prototype.delay = function (ms) {
                return delay(this, ms)
              };
              function successClear(value) {
                var handle = this;
                if (handle instanceof Number)
                  handle = +handle;
                clearTimeout(handle);
                return value
              }
              function failureClear(reason) {
                var handle = this;
                if (handle instanceof Number)
                  handle = +handle;
                clearTimeout(handle);
                throw reason
              }
              Promise.prototype.timeout = function (ms, message) {
                ms = +ms;
                var ret = this.then().cancellable();
                ret._cancellationParent = this;
                var handle = setTimeout(function timeoutTimeout() {
                  afterTimeout(ret, message)
                }, ms);
                return ret._then(successClear, failureClear, undefined, handle, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        37: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, apiRejection, tryConvertToPromise, createContext) {
              var TypeError = _dereq_('./errors.js').TypeError;
              var inherits = _dereq_('./util.js').inherits;
              var PromiseInspection = Promise.PromiseInspection;
              function inspectionMapper(inspections) {
                var len = inspections.length;
                for (var i = 0; i < len; ++i) {
                  var inspection = inspections[i];
                  if (inspection.isRejected()) {
                    return Promise.reject(inspection.error())
                  }
                  inspections[i] = inspection._settledValue
                }
                return inspections
              }
              function thrower(e) {
                setTimeout(function () {
                  throw e
                }, 0)
              }
              function castPreservingDisposable(thenable) {
                var maybePromise = tryConvertToPromise(thenable);
                if (maybePromise !== thenable && typeof thenable._isDisposable === 'function' && typeof thenable._getDisposer === 'function' && thenable._isDisposable()) {
                  maybePromise._setDisposable(thenable._getDisposer())
                }
                return maybePromise
              }
              function dispose(resources, inspection) {
                var i = 0;
                var len = resources.length;
                var ret = Promise.defer();
                function iterator() {
                  if (i >= len)
                    return ret.resolve();
                  var maybePromise = castPreservingDisposable(resources[i++]);
                  if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
                    try {
                      maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise)
                    } catch (e) {
                      return thrower(e)
                    }
                    if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower, null, null, null)
                    }
                  }
                  iterator()
                }
                iterator();
                return ret.promise
              }
              function disposerSuccess(value) {
                var inspection = new PromiseInspection;
                inspection._settledValue = value;
                inspection._bitField = 268435456;
                return dispose(this, inspection).thenReturn(value)
              }
              function disposerFail(reason) {
                var inspection = new PromiseInspection;
                inspection._settledValue = reason;
                inspection._bitField = 134217728;
                return dispose(this, inspection).thenThrow(reason)
              }
              function Disposer(data, promise, context) {
                this._data = data;
                this._promise = promise;
                this._context = context
              }
              Disposer.prototype.data = function () {
                return this._data
              };
              Disposer.prototype.promise = function () {
                return this._promise
              };
              Disposer.prototype.resource = function () {
                if (this.promise().isFulfilled()) {
                  return this.promise().value()
                }
                return null
              };
              Disposer.prototype.tryDispose = function (inspection) {
                var resource = this.resource();
                var context = this._context;
                if (context !== undefined)
                  context._pushContext();
                var ret = resource !== null ? this.doDispose(resource, inspection) : null;
                if (context !== undefined)
                  context._popContext();
                this._promise._unsetDisposable();
                this._data = null;
                return ret
              };
              Disposer.isDisposer = function (d) {
                return d != null && typeof d.resource === 'function' && typeof d.tryDispose === 'function'
              };
              function FunctionDisposer(fn, promise, context) {
                this.constructor$(fn, promise, context)
              }
              inherits(FunctionDisposer, Disposer);
              FunctionDisposer.prototype.doDispose = function (resource, inspection) {
                var fn = this.data();
                return fn.call(resource, resource, inspection)
              };
              function maybeUnwrapDisposer(value) {
                if (Disposer.isDisposer(value)) {
                  this.resources[this.index]._setDisposable(value);
                  return value.promise()
                }
                return value
              }
              Promise.using = function () {
                var len = arguments.length;
                if (len < 2)
                  return apiRejection('you must pass at least 2 arguments to Promise.using');
                var fn = arguments[len - 1];
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var input;
                var spreadArgs = true;
                if (len === 2 && Array.isArray(arguments[0])) {
                  input = arguments[0];
                  len = input.length;
                  spreadArgs = false
                } else {
                  input = arguments;
                  len--
                }
                var resources = new Array(len);
                for (var i = 0; i < len; ++i) {
                  var resource = input[i];
                  if (Disposer.isDisposer(resource)) {
                    var disposer = resource;
                    resource = resource.promise();
                    resource._setDisposable(disposer)
                  } else {
                    var maybePromise = tryConvertToPromise(resource);
                    if (maybePromise instanceof Promise) {
                      resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
                        resources: resources,
                        index: i
                      }, undefined)
                    }
                  }
                  resources[i] = resource
                }
                var promise = Promise.settle(resources).then(inspectionMapper).then(function (vals) {
                  promise._pushContext();
                  var ret;
                  try {
                    ret = spreadArgs ? fn.apply(undefined, vals) : fn.call(undefined, vals)
                  } finally {
                    promise._popContext()
                  }
                  return ret
                })._then(disposerSuccess, disposerFail, undefined, resources, undefined);
                resources.promise = promise;
                return promise
              };
              Promise.prototype._setDisposable = function (disposer) {
                this._bitField = this._bitField | 262144;
                this._disposer = disposer
              };
              Promise.prototype._isDisposable = function () {
                return (this._bitField & 262144) > 0
              };
              Promise.prototype._getDisposer = function () {
                return this._disposer
              };
              Promise.prototype._unsetDisposable = function () {
                this._bitField = this._bitField & ~262144;
                this._disposer = undefined
              };
              Promise.prototype.disposer = function (fn) {
                if (typeof fn === 'function') {
                  return new FunctionDisposer(fn, this, createContext())
                }
                throw new TypeError
              }
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        38: [
          function (_dereq_, module, exports) {
            'use strict';
            var es5 = _dereq_('./es5.js');
            var canEvaluate = typeof navigator == 'undefined';
            var haveGetters = function () {
              try {
                var o = {};
                es5.defineProperty(o, 'f', {
                  get: function () {
                    return 3
                  }
                });
                return o.f === 3
              } catch (e) {
                return false
              }
            }();
            var errorObj = { e: {} };
            var tryCatchTarget;
            function tryCatcher() {
              try {
                var target = tryCatchTarget;
                tryCatchTarget = null;
                return target.apply(this, arguments)
              } catch (e) {
                errorObj.e = e;
                return errorObj
              }
            }
            function tryCatch(fn) {
              tryCatchTarget = fn;
              return tryCatcher
            }
            var inherits = function (Child, Parent) {
              var hasProp = {}.hasOwnProperty;
              function T() {
                this.constructor = Child;
                this.constructor$ = Parent;
                for (var propertyName in Parent.prototype) {
                  if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== '$') {
                    this[propertyName + '$'] = Parent.prototype[propertyName]
                  }
                }
              }
              T.prototype = Parent.prototype;
              Child.prototype = new T;
              return Child.prototype
            };
            function isPrimitive(val) {
              return val == null || val === true || val === false || typeof val === 'string' || typeof val === 'number'
            }
            function isObject(value) {
              return !isPrimitive(value)
            }
            function maybeWrapAsError(maybeError) {
              if (!isPrimitive(maybeError))
                return maybeError;
              return new Error(safeToString(maybeError))
            }
            function withAppended(target, appendee) {
              var len = target.length;
              var ret = new Array(len + 1);
              var i;
              for (i = 0; i < len; ++i) {
                ret[i] = target[i]
              }
              ret[i] = appendee;
              return ret
            }
            function getDataPropertyOrDefault(obj, key, defaultValue) {
              if (es5.isES5) {
                var desc = Object.getOwnPropertyDescriptor(obj, key);
                if (desc != null) {
                  return desc.get == null && desc.set == null ? desc.value : defaultValue
                }
              } else {
                return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined
              }
            }
            function notEnumerableProp(obj, name, value) {
              if (isPrimitive(obj))
                return obj;
              var descriptor = {
                value: value,
                configurable: true,
                enumerable: false,
                writable: true
              };
              es5.defineProperty(obj, name, descriptor);
              return obj
            }
            function thrower(r) {
              throw r
            }
            var inheritedDataKeys = function () {
              var excludedPrototypes = [
                Array.prototype,
                Object.prototype,
                Function.prototype
              ];
              var isExcludedProto = function (val) {
                for (var i = 0; i < excludedPrototypes.length; ++i) {
                  if (excludedPrototypes[i] === val) {
                    return true
                  }
                }
                return false
              };
              if (es5.isES5) {
                var getKeys = Object.getOwnPropertyNames;
                return function (obj) {
                  var ret = [];
                  var visitedKeys = Object.create(null);
                  while (obj != null && !isExcludedProto(obj)) {
                    var keys;
                    try {
                      keys = getKeys(obj)
                    } catch (e) {
                      return ret
                    }
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key])
                        continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key)
                      }
                    }
                    obj = es5.getPrototypeOf(obj)
                  }
                  return ret
                }
              } else {
                var hasProp = {}.hasOwnProperty;
                return function (obj) {
                  if (isExcludedProto(obj))
                    return [];
                  var ret = [];
                  /*jshint forin:false */
                  enumeration:
                    for (var key in obj) {
                      if (hasProp.call(obj, key)) {
                        ret.push(key)
                      } else {
                        for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration
                          }
                        }
                        ret.push(key)
                      }
                    }
                  return ret
                }
              }
            }();
            var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
            function isClass(fn) {
              try {
                if (typeof fn === 'function') {
                  var keys = es5.names(fn.prototype);
                  var hasMethods = es5.isES5 && keys.length > 1;
                  var hasMethodsOtherThanConstructor = keys.length > 0 && !(keys.length === 1 && keys[0] === 'constructor');
                  var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + '') && es5.names(fn).length > 0;
                  if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) {
                    return true
                  }
                }
                return false
              } catch (e) {
                return false
              }
            }
            function toFastProperties(obj) {
              /*jshint -W027,-W055,-W031*/
              function f() {
              }
              f.prototype = obj;
              var l = 8;
              while (l--)
                new f;
              return obj;
              eval(obj)
            }
            var rident = /^[a-z$_][a-z$_0-9]*$/i;
            function isIdentifier(str) {
              return rident.test(str)
            }
            function filledRange(count, prefix, suffix) {
              var ret = new Array(count);
              for (var i = 0; i < count; ++i) {
                ret[i] = prefix + i + suffix
              }
              return ret
            }
            function safeToString(obj) {
              try {
                return obj + ''
              } catch (e) {
                return '[no string representation]'
              }
            }
            function markAsOriginatingFromRejection(e) {
              try {
                notEnumerableProp(e, 'isOperational', true)
              } catch (ignore) {
              }
            }
            function originatesFromRejection(e) {
              if (e == null)
                return false;
              return e instanceof Error['__BluebirdErrorTypes__'].OperationalError || e['isOperational'] === true
            }
            function canAttachTrace(obj) {
              return obj instanceof Error && es5.propertyIsWritable(obj, 'stack')
            }
            var ensureErrorObject = function () {
              if (!('stack' in new Error)) {
                return function (value) {
                  if (canAttachTrace(value))
                    return value;
                  try {
                    throw new Error(safeToString(value))
                  } catch (err) {
                    return err
                  }
                }
              } else {
                return function (value) {
                  if (canAttachTrace(value))
                    return value;
                  return new Error(safeToString(value))
                }
              }
            }();
            function classString(obj) {
              return {}.toString.call(obj)
            }
            function copyDescriptors(from, to, filter) {
              var keys = es5.names(from);
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (filter(key)) {
                  try {
                    es5.defineProperty(to, key, es5.getDescriptor(from, key))
                  } catch (ignore) {
                  }
                }
              }
            }
            var ret = {
              isClass: isClass,
              isIdentifier: isIdentifier,
              inheritedDataKeys: inheritedDataKeys,
              getDataPropertyOrDefault: getDataPropertyOrDefault,
              thrower: thrower,
              isArray: es5.isArray,
              haveGetters: haveGetters,
              notEnumerableProp: notEnumerableProp,
              isPrimitive: isPrimitive,
              isObject: isObject,
              canEvaluate: canEvaluate,
              errorObj: errorObj,
              tryCatch: tryCatch,
              inherits: inherits,
              withAppended: withAppended,
              maybeWrapAsError: maybeWrapAsError,
              toFastProperties: toFastProperties,
              filledRange: filledRange,
              toString: safeToString,
              canAttachTrace: canAttachTrace,
              ensureErrorObject: ensureErrorObject,
              originatesFromRejection: originatesFromRejection,
              markAsOriginatingFromRejection: markAsOriginatingFromRejection,
              classString: classString,
              copyDescriptors: copyDescriptors,
              hasDevTools: typeof chrome !== 'undefined' && chrome && typeof chrome.loadTimes === 'function',
              isNode: typeof process !== 'undefined' && classString(process).toLowerCase() === '[object process]'
            };
            ret.isRecentNode = ret.isNode && function () {
              var version = process.versions.node.split('.').map(Number);
              return version[0] === 0 && version[1] > 10 || version[0] > 0
            }();
            if (ret.isNode)
              ret.toFastProperties(process);
            try {
              throw new Error
            } catch (e) {
              ret.lastLineError = e
            }
            module.exports = ret
          },
          { './es5.js': 14 }
        ]
      }, {}, [4])(4)
    });
    ;
    if (typeof window !== 'undefined' && window !== null) {
      window.P = window.Promise
    } else if (typeof self !== 'undefined' && self !== null) {
      self.P = self.Promise
    }
  });
  // source: node_modules/crowdcontrol/node_modules/xhr-promise/index.js
  require.define('crowdcontrol/node_modules/xhr-promise', function (module, exports, __dirname, __filename) {
    module.exports = require('crowdcontrol/node_modules/xhr-promise/lib/xhr-promise')
  });
  // source: node_modules/crowdcontrol/node_modules/xhr-promise/lib/xhr-promise.js
  require.define('crowdcontrol/node_modules/xhr-promise/lib/xhr-promise', function (module, exports, __dirname, __filename) {
    /*
 * Copyright 2015 Scott Brady
 * MIT License
 * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
 */
    var ParseHeaders, Promise, XMLHttpRequestPromise, extend;
    Promise = require('crowdcontrol/node_modules/xhr-promise/node_modules/bluebird/js/browser/bluebird');
    extend = require('crowdcontrol/node_modules/xhr-promise/node_modules/extend');
    ParseHeaders = require('crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/parse-headers');
    /*
 * Module to wrap an XMLHttpRequest in a promise.
 */
    module.exports = XMLHttpRequestPromise = function () {
      function XMLHttpRequestPromise() {
      }
      XMLHttpRequestPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';
      /*
   * XMLHttpRequestPromise.send(options) -> Promise
   * - options (Object): URL, method, data, etc.
   *
   * Create the XHR object and wire up event handlers to use a promise.
   */
      XMLHttpRequestPromise.prototype.send = function (options) {
        var defaults;
        if (options == null) {
          options = {}
        }
        defaults = {
          method: 'GET',
          data: null,
          headers: {},
          async: true,
          username: null,
          password: null
        };
        options = extend({}, defaults, options);
        return new Promise(function (_this) {
          return function (resolve, reject) {
            var e, header, ref, value, xhr;
            if (!XMLHttpRequest) {
              _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
              return
            }
            if (typeof options.url !== 'string' || options.url.length === 0) {
              _this._handleError('url', reject, null, 'URL is a required parameter');
              return
            }
            _this._xhr = xhr = new XMLHttpRequest;
            xhr.onload = function () {
              var responseText;
              _this._detachWindowUnload();
              try {
                responseText = _this._getResponseText()
              } catch (_error) {
                _this._handleError('parse', reject, null, 'invalid JSON response');
                return
              }
              return resolve({
                url: _this._getResponseUrl(),
                status: xhr.status,
                statusText: xhr.statusText,
                responseText: responseText,
                headers: _this._getHeaders(),
                xhr: xhr
              })
            };
            xhr.onerror = function () {
              return _this._handleError('error', reject)
            };
            xhr.ontimeout = function () {
              return _this._handleError('timeout', reject)
            };
            xhr.onabort = function () {
              return _this._handleError('abort', reject)
            };
            _this._attachWindowUnload();
            xhr.open(options.method, options.url, options.async, options.username, options.password);
            if (options.data != null && !options.headers['Content-Type']) {
              options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE
            }
            ref = options.headers;
            for (header in ref) {
              value = ref[header];
              xhr.setRequestHeader(header, value)
            }
            try {
              return xhr.send(options.data)
            } catch (_error) {
              e = _error;
              return _this._handleError('send', reject, null, e.toString())
            }
          }
        }(this))
      };
      /*
   * XMLHttpRequestPromise.getXHR() -> XMLHttpRequest
   */
      XMLHttpRequestPromise.prototype.getXHR = function () {
        return this._xhr
      };
      /*
   * XMLHttpRequestPromise._attachWindowUnload()
   *
   * Fix for IE 9 and IE 10
   * Internet Explorer freezes when you close a webpage during an XHR request
   * https://support.microsoft.com/kb/2856746
   *
   */
      XMLHttpRequestPromise.prototype._attachWindowUnload = function () {
        this._unloadHandler = this._handleWindowUnload.bind(this);
        if (window.attachEvent) {
          return window.attachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._detachWindowUnload()
   */
      XMLHttpRequestPromise.prototype._detachWindowUnload = function () {
        if (window.detachEvent) {
          return window.detachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._getHeaders() -> Object
   */
      XMLHttpRequestPromise.prototype._getHeaders = function () {
        return ParseHeaders(this._xhr.getAllResponseHeaders())
      };
      /*
   * XMLHttpRequestPromise._getResponseText() -> Mixed
   *
   * Parses response text JSON if present.
   */
      XMLHttpRequestPromise.prototype._getResponseText = function () {
        var responseText;
        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
        switch (this._xhr.getResponseHeader('Content-Type')) {
        case 'application/json':
        case 'text/javascript':
          responseText = JSON.parse(responseText + '')
        }
        return responseText
      };
      /*
   * XMLHttpRequestPromise._getResponseUrl() -> String
   *
   * Actual response URL after following redirects.
   */
      XMLHttpRequestPromise.prototype._getResponseUrl = function () {
        if (this._xhr.responseURL != null) {
          return this._xhr.responseURL
        }
        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
          return this._xhr.getResponseHeader('X-Request-URL')
        }
        return ''
      };
      /*
   * XMLHttpRequestPromise._handleError(reason, reject, status, statusText)
   * - reason (String)
   * - reject (Function)
   * - status (String)
   * - statusText (String)
   */
      XMLHttpRequestPromise.prototype._handleError = function (reason, reject, status, statusText) {
        this._detachWindowUnload();
        return reject({
          reason: reason,
          status: status || this._xhr.status,
          statusText: statusText || this._xhr.statusText,
          xhr: this._xhr
        })
      };
      /*
   * XMLHttpRequestPromise._handleWindowUnload()
   */
      XMLHttpRequestPromise.prototype._handleWindowUnload = function () {
        return this._xhr.abort()
      };
      return XMLHttpRequestPromise
    }()
  });
  // source: node_modules/crowdcontrol/node_modules/xhr-promise/node_modules/bluebird/js/browser/bluebird.js
  require.define('crowdcontrol/node_modules/xhr-promise/node_modules/bluebird/js/browser/bluebird', function (module, exports, __dirname, __filename) {
    /* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
    /**
 * bluebird build version 2.9.34
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, cancel, using, filter, any, each, timers
*/
    !function (e) {
      if ('object' == typeof exports && 'undefined' != typeof module)
        module.exports = e();
      else if ('function' == typeof define && define.amd)
        define([], e);
      else {
        var f;
        'undefined' != typeof window ? f = window : 'undefined' != typeof global ? f = global : 'undefined' != typeof self && (f = self), f.Promise = e()
      }
    }(function () {
      var define, module, exports;
      return function e(t, n, r) {
        function s(o, u) {
          if (!n[o]) {
            if (!t[o]) {
              var a = typeof _dereq_ == 'function' && _dereq_;
              if (!u && a)
                return a(o, !0);
              if (i)
                return i(o, !0);
              var f = new Error("Cannot find module '" + o + "'");
              throw f.code = 'MODULE_NOT_FOUND', f
            }
            var l = n[o] = { exports: {} };
            t[o][0].call(l.exports, function (e) {
              var n = t[o][1][e];
              return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
          }
          return n[o].exports
        }
        var i = typeof _dereq_ == 'function' && _dereq_;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s
      }({
        1: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var SomePromiseArray = Promise._SomePromiseArray;
              function any(promises) {
                var ret = new SomePromiseArray(promises);
                var promise = ret.promise();
                ret.setHowMany(1);
                ret.setUnwrap();
                ret.init();
                return promise
              }
              Promise.any = function (promises) {
                return any(promises)
              };
              Promise.prototype.any = function () {
                return any(this)
              }
            }
          },
          {}
        ],
        2: [
          function (_dereq_, module, exports) {
            'use strict';
            var firstLineError;
            try {
              throw new Error
            } catch (e) {
              firstLineError = e
            }
            var schedule = _dereq_('./schedule.js');
            var Queue = _dereq_('./queue.js');
            var util = _dereq_('./util.js');
            function Async() {
              this._isTickUsed = false;
              this._lateQueue = new Queue(16);
              this._normalQueue = new Queue(16);
              this._trampolineEnabled = true;
              var self = this;
              this.drainQueues = function () {
                self._drainQueues()
              };
              this._schedule = schedule.isStatic ? schedule(this.drainQueues) : schedule
            }
            Async.prototype.disableTrampolineIfNecessary = function () {
              if (util.hasDevTools) {
                this._trampolineEnabled = false
              }
            };
            Async.prototype.enableTrampoline = function () {
              if (!this._trampolineEnabled) {
                this._trampolineEnabled = true;
                this._schedule = function (fn) {
                  setTimeout(fn, 0)
                }
              }
            };
            Async.prototype.haveItemsQueued = function () {
              return this._normalQueue.length() > 0
            };
            Async.prototype.throwLater = function (fn, arg) {
              if (arguments.length === 1) {
                arg = fn;
                fn = function () {
                  throw arg
                }
              }
              if (typeof setTimeout !== 'undefined') {
                setTimeout(function () {
                  fn(arg)
                }, 0)
              } else
                try {
                  this._schedule(function () {
                    fn(arg)
                  })
                } catch (e) {
                  throw new Error('No async scheduler available\n\n    See http://goo.gl/m3OTXk\n')
                }
            };
            function AsyncInvokeLater(fn, receiver, arg) {
              this._lateQueue.push(fn, receiver, arg);
              this._queueTick()
            }
            function AsyncInvoke(fn, receiver, arg) {
              this._normalQueue.push(fn, receiver, arg);
              this._queueTick()
            }
            function AsyncSettlePromises(promise) {
              this._normalQueue._pushOne(promise);
              this._queueTick()
            }
            if (!util.hasDevTools) {
              Async.prototype.invokeLater = AsyncInvokeLater;
              Async.prototype.invoke = AsyncInvoke;
              Async.prototype.settlePromises = AsyncSettlePromises
            } else {
              if (schedule.isStatic) {
                schedule = function (fn) {
                  setTimeout(fn, 0)
                }
              }
              Async.prototype.invokeLater = function (fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvokeLater.call(this, fn, receiver, arg)
                } else {
                  this._schedule(function () {
                    setTimeout(function () {
                      fn.call(receiver, arg)
                    }, 100)
                  })
                }
              };
              Async.prototype.invoke = function (fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvoke.call(this, fn, receiver, arg)
                } else {
                  this._schedule(function () {
                    fn.call(receiver, arg)
                  })
                }
              };
              Async.prototype.settlePromises = function (promise) {
                if (this._trampolineEnabled) {
                  AsyncSettlePromises.call(this, promise)
                } else {
                  this._schedule(function () {
                    promise._settlePromises()
                  })
                }
              }
            }
            Async.prototype.invokeFirst = function (fn, receiver, arg) {
              this._normalQueue.unshift(fn, receiver, arg);
              this._queueTick()
            };
            Async.prototype._drainQueue = function (queue) {
              while (queue.length() > 0) {
                var fn = queue.shift();
                if (typeof fn !== 'function') {
                  fn._settlePromises();
                  continue
                }
                var receiver = queue.shift();
                var arg = queue.shift();
                fn.call(receiver, arg)
              }
            };
            Async.prototype._drainQueues = function () {
              this._drainQueue(this._normalQueue);
              this._reset();
              this._drainQueue(this._lateQueue)
            };
            Async.prototype._queueTick = function () {
              if (!this._isTickUsed) {
                this._isTickUsed = true;
                this._schedule(this.drainQueues)
              }
            };
            Async.prototype._reset = function () {
              this._isTickUsed = false
            };
            module.exports = new Async;
            module.exports.firstLineError = firstLineError
          },
          {
            './queue.js': 28,
            './schedule.js': 31,
            './util.js': 38
          }
        ],
        3: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise) {
              var rejectThis = function (_, e) {
                this._reject(e)
              };
              var targetRejected = function (e, context) {
                context.promiseRejectionQueued = true;
                context.bindingPromise._then(rejectThis, rejectThis, null, this, e)
              };
              var bindingResolved = function (thisArg, context) {
                if (this._isPending()) {
                  this._resolveCallback(context.target)
                }
              };
              var bindingRejected = function (e, context) {
                if (!context.promiseRejectionQueued)
                  this._reject(e)
              };
              Promise.prototype.bind = function (thisArg) {
                var maybePromise = tryConvertToPromise(thisArg);
                var ret = new Promise(INTERNAL);
                ret._propagateFrom(this, 1);
                var target = this._target();
                ret._setBoundTo(maybePromise);
                if (maybePromise instanceof Promise) {
                  var context = {
                    promiseRejectionQueued: false,
                    promise: ret,
                    target: target,
                    bindingPromise: maybePromise
                  };
                  target._then(INTERNAL, targetRejected, ret._progress, ret, context);
                  maybePromise._then(bindingResolved, bindingRejected, ret._progress, ret, context)
                } else {
                  ret._resolveCallback(target)
                }
                return ret
              };
              Promise.prototype._setBoundTo = function (obj) {
                if (obj !== undefined) {
                  this._bitField = this._bitField | 131072;
                  this._boundTo = obj
                } else {
                  this._bitField = this._bitField & ~131072
                }
              };
              Promise.prototype._isBound = function () {
                return (this._bitField & 131072) === 131072
              };
              Promise.bind = function (thisArg, value) {
                var maybePromise = tryConvertToPromise(thisArg);
                var ret = new Promise(INTERNAL);
                ret._setBoundTo(maybePromise);
                if (maybePromise instanceof Promise) {
                  maybePromise._then(function () {
                    ret._resolveCallback(value)
                  }, ret._reject, ret._progress, ret, null)
                } else {
                  ret._resolveCallback(value)
                }
                return ret
              }
            }
          },
          {}
        ],
        4: [
          function (_dereq_, module, exports) {
            'use strict';
            var old;
            if (typeof Promise !== 'undefined')
              old = Promise;
            function noConflict() {
              try {
                if (Promise === bluebird)
                  Promise = old
              } catch (e) {
              }
              return bluebird
            }
            var bluebird = _dereq_('./promise.js')();
            bluebird.noConflict = noConflict;
            module.exports = bluebird
          },
          { './promise.js': 23 }
        ],
        5: [
          function (_dereq_, module, exports) {
            'use strict';
            var cr = Object.create;
            if (cr) {
              var callerCache = cr(null);
              var getterCache = cr(null);
              callerCache[' size'] = getterCache[' size'] = 0
            }
            module.exports = function (Promise) {
              var util = _dereq_('./util.js');
              var canEvaluate = util.canEvaluate;
              var isIdentifier = util.isIdentifier;
              var getMethodCaller;
              var getGetter;
              if (!true) {
                var makeMethodCaller = function (methodName) {
                  return new Function('ensureMethod', "                                    \n        return function(obj) {                                               \n            'use strict'                                                     \n            var len = this.length;                                           \n            ensureMethod(obj, 'methodName');                                 \n            switch(len) {                                                    \n                case 1: return obj.methodName(this[0]);                      \n                case 2: return obj.methodName(this[0], this[1]);             \n                case 3: return obj.methodName(this[0], this[1], this[2]);    \n                case 0: return obj.methodName();                             \n                default:                                                     \n                    return obj.methodName.apply(obj, this);                  \n            }                                                                \n        };                                                                   \n        ".replace(/methodName/g, methodName))(ensureMethod)
                };
                var makeGetter = function (propertyName) {
                  return new Function('obj', "                                             \n        'use strict';                                                        \n        return obj.propertyName;                                             \n        ".replace('propertyName', propertyName))
                };
                var getCompiled = function (name, compiler, cache) {
                  var ret = cache[name];
                  if (typeof ret !== 'function') {
                    if (!isIdentifier(name)) {
                      return null
                    }
                    ret = compiler(name);
                    cache[name] = ret;
                    cache[' size']++;
                    if (cache[' size'] > 512) {
                      var keys = Object.keys(cache);
                      for (var i = 0; i < 256; ++i)
                        delete cache[keys[i]];
                      cache[' size'] = keys.length - 256
                    }
                  }
                  return ret
                };
                getMethodCaller = function (name) {
                  return getCompiled(name, makeMethodCaller, callerCache)
                };
                getGetter = function (name) {
                  return getCompiled(name, makeGetter, getterCache)
                }
              }
              function ensureMethod(obj, methodName) {
                var fn;
                if (obj != null)
                  fn = obj[methodName];
                if (typeof fn !== 'function') {
                  var message = 'Object ' + util.classString(obj) + " has no method '" + util.toString(methodName) + "'";
                  throw new Promise.TypeError(message)
                }
                return fn
              }
              function caller(obj) {
                var methodName = this.pop();
                var fn = ensureMethod(obj, methodName);
                return fn.apply(obj, this)
              }
              Promise.prototype.call = function (methodName) {
                var $_len = arguments.length;
                var args = new Array($_len - 1);
                for (var $_i = 1; $_i < $_len; ++$_i) {
                  args[$_i - 1] = arguments[$_i]
                }
                if (!true) {
                  if (canEvaluate) {
                    var maybeCaller = getMethodCaller(methodName);
                    if (maybeCaller !== null) {
                      return this._then(maybeCaller, undefined, undefined, args, undefined)
                    }
                  }
                }
                args.push(methodName);
                return this._then(caller, undefined, undefined, args, undefined)
              };
              function namedGetter(obj) {
                return obj[this]
              }
              function indexedGetter(obj) {
                var index = +this;
                if (index < 0)
                  index = Math.max(0, index + obj.length);
                return obj[index]
              }
              Promise.prototype.get = function (propertyName) {
                var isIndex = typeof propertyName === 'number';
                var getter;
                if (!isIndex) {
                  if (canEvaluate) {
                    var maybeGetter = getGetter(propertyName);
                    getter = maybeGetter !== null ? maybeGetter : namedGetter
                  } else {
                    getter = namedGetter
                  }
                } else {
                  getter = indexedGetter
                }
                return this._then(getter, undefined, undefined, propertyName, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        6: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var errors = _dereq_('./errors.js');
              var async = _dereq_('./async.js');
              var CancellationError = errors.CancellationError;
              Promise.prototype._cancel = function (reason) {
                if (!this.isCancellable())
                  return this;
                var parent;
                var promiseToReject = this;
                while ((parent = promiseToReject._cancellationParent) !== undefined && parent.isCancellable()) {
                  promiseToReject = parent
                }
                this._unsetCancellable();
                promiseToReject._target()._rejectCallback(reason, false, true)
              };
              Promise.prototype.cancel = function (reason) {
                if (!this.isCancellable())
                  return this;
                if (reason === undefined)
                  reason = new CancellationError;
                async.invokeLater(this._cancel, this, reason);
                return this
              };
              Promise.prototype.cancellable = function () {
                if (this._cancellable())
                  return this;
                async.enableTrampoline();
                this._setCancellable();
                this._cancellationParent = undefined;
                return this
              };
              Promise.prototype.uncancellable = function () {
                var ret = this.then();
                ret._unsetCancellable();
                return ret
              };
              Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
                var ret = this._then(didFulfill, didReject, didProgress, undefined, undefined);
                ret._setCancellable();
                ret._cancellationParent = undefined;
                return ret
              }
            }
          },
          {
            './async.js': 2,
            './errors.js': 13
          }
        ],
        7: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function () {
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
              var stackFramePattern = null;
              var formatStack = null;
              var indentStackFrames = false;
              var warn;
              function CapturedTrace(parent) {
                this._parent = parent;
                var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
                captureStackTrace(this, CapturedTrace);
                if (length > 32)
                  this.uncycle()
              }
              util.inherits(CapturedTrace, Error);
              CapturedTrace.prototype.uncycle = function () {
                var length = this._length;
                if (length < 2)
                  return;
                var nodes = [];
                var stackToIndex = {};
                for (var i = 0, node = this; node !== undefined; ++i) {
                  nodes.push(node);
                  node = node._parent
                }
                length = this._length = i;
                for (var i = length - 1; i >= 0; --i) {
                  var stack = nodes[i].stack;
                  if (stackToIndex[stack] === undefined) {
                    stackToIndex[stack] = i
                  }
                }
                for (var i = 0; i < length; ++i) {
                  var currentStack = nodes[i].stack;
                  var index = stackToIndex[currentStack];
                  if (index !== undefined && index !== i) {
                    if (index > 0) {
                      nodes[index - 1]._parent = undefined;
                      nodes[index - 1]._length = 1
                    }
                    nodes[i]._parent = undefined;
                    nodes[i]._length = 1;
                    var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
                    if (index < length - 1) {
                      cycleEdgeNode._parent = nodes[index + 1];
                      cycleEdgeNode._parent.uncycle();
                      cycleEdgeNode._length = cycleEdgeNode._parent._length + 1
                    } else {
                      cycleEdgeNode._parent = undefined;
                      cycleEdgeNode._length = 1
                    }
                    var currentChildLength = cycleEdgeNode._length + 1;
                    for (var j = i - 2; j >= 0; --j) {
                      nodes[j]._length = currentChildLength;
                      currentChildLength++
                    }
                    return
                  }
                }
              };
              CapturedTrace.prototype.parent = function () {
                return this._parent
              };
              CapturedTrace.prototype.hasParent = function () {
                return this._parent !== undefined
              };
              CapturedTrace.prototype.attachExtraTrace = function (error) {
                if (error.__stackCleaned__)
                  return;
                this.uncycle();
                var parsed = CapturedTrace.parseStackAndMessage(error);
                var message = parsed.message;
                var stacks = [parsed.stack];
                var trace = this;
                while (trace !== undefined) {
                  stacks.push(cleanStack(trace.stack.split('\n')));
                  trace = trace._parent
                }
                removeCommonRoots(stacks);
                removeDuplicateOrEmptyJumps(stacks);
                util.notEnumerableProp(error, 'stack', reconstructStack(message, stacks));
                util.notEnumerableProp(error, '__stackCleaned__', true)
              };
              function reconstructStack(message, stacks) {
                for (var i = 0; i < stacks.length - 1; ++i) {
                  stacks[i].push('From previous event:');
                  stacks[i] = stacks[i].join('\n')
                }
                if (i < stacks.length) {
                  stacks[i] = stacks[i].join('\n')
                }
                return message + '\n' + stacks.join('\n')
              }
              function removeDuplicateOrEmptyJumps(stacks) {
                for (var i = 0; i < stacks.length; ++i) {
                  if (stacks[i].length === 0 || i + 1 < stacks.length && stacks[i][0] === stacks[i + 1][0]) {
                    stacks.splice(i, 1);
                    i--
                  }
                }
              }
              function removeCommonRoots(stacks) {
                var current = stacks[0];
                for (var i = 1; i < stacks.length; ++i) {
                  var prev = stacks[i];
                  var currentLastIndex = current.length - 1;
                  var currentLastLine = current[currentLastIndex];
                  var commonRootMeetPoint = -1;
                  for (var j = prev.length - 1; j >= 0; --j) {
                    if (prev[j] === currentLastLine) {
                      commonRootMeetPoint = j;
                      break
                    }
                  }
                  for (var j = commonRootMeetPoint; j >= 0; --j) {
                    var line = prev[j];
                    if (current[currentLastIndex] === line) {
                      current.pop();
                      currentLastIndex--
                    } else {
                      break
                    }
                  }
                  current = prev
                }
              }
              function cleanStack(stack) {
                var ret = [];
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  var isTraceLine = stackFramePattern.test(line) || '    (No stack trace)' === line;
                  var isInternalFrame = isTraceLine && shouldIgnore(line);
                  if (isTraceLine && !isInternalFrame) {
                    if (indentStackFrames && line.charAt(0) !== ' ') {
                      line = '    ' + line
                    }
                    ret.push(line)
                  }
                }
                return ret
              }
              function stackFramesAsArray(error) {
                var stack = error.stack.replace(/\s+$/g, '').split('\n');
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  if ('    (No stack trace)' === line || stackFramePattern.test(line)) {
                    break
                  }
                }
                if (i > 0) {
                  stack = stack.slice(i)
                }
                return stack
              }
              CapturedTrace.parseStackAndMessage = function (error) {
                var stack = error.stack;
                var message = error.toString();
                stack = typeof stack === 'string' && stack.length > 0 ? stackFramesAsArray(error) : ['    (No stack trace)'];
                return {
                  message: message,
                  stack: cleanStack(stack)
                }
              };
              CapturedTrace.formatAndLogError = function (error, title) {
                if (typeof console !== 'undefined') {
                  var message;
                  if (typeof error === 'object' || typeof error === 'function') {
                    var stack = error.stack;
                    message = title + formatStack(stack, error)
                  } else {
                    message = title + String(error)
                  }
                  if (typeof warn === 'function') {
                    warn(message)
                  } else if (typeof console.log === 'function' || typeof console.log === 'object') {
                    console.log(message)
                  }
                }
              };
              CapturedTrace.unhandledRejection = function (reason) {
                CapturedTrace.formatAndLogError(reason, '^--- With additional stack trace: ')
              };
              CapturedTrace.isSupported = function () {
                return typeof captureStackTrace === 'function'
              };
              CapturedTrace.fireRejectionEvent = function (name, localHandler, reason, promise) {
                var localEventFired = false;
                try {
                  if (typeof localHandler === 'function') {
                    localEventFired = true;
                    if (name === 'rejectionHandled') {
                      localHandler(promise)
                    } else {
                      localHandler(reason, promise)
                    }
                  }
                } catch (e) {
                  async.throwLater(e)
                }
                var globalEventFired = false;
                try {
                  globalEventFired = fireGlobalEvent(name, reason, promise)
                } catch (e) {
                  globalEventFired = true;
                  async.throwLater(e)
                }
                var domEventFired = false;
                if (fireDomEvent) {
                  try {
                    domEventFired = fireDomEvent(name.toLowerCase(), {
                      reason: reason,
                      promise: promise
                    })
                  } catch (e) {
                    domEventFired = true;
                    async.throwLater(e)
                  }
                }
                if (!globalEventFired && !localEventFired && !domEventFired && name === 'unhandledRejection') {
                  CapturedTrace.formatAndLogError(reason, 'Unhandled rejection ')
                }
              };
              function formatNonError(obj) {
                var str;
                if (typeof obj === 'function') {
                  str = '[function ' + (obj.name || 'anonymous') + ']'
                } else {
                  str = obj.toString();
                  var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                  if (ruselessToString.test(str)) {
                    try {
                      var newStr = JSON.stringify(obj);
                      str = newStr
                    } catch (e) {
                    }
                  }
                  if (str.length === 0) {
                    str = '(empty array)'
                  }
                }
                return '(<' + snip(str) + '>, no stack trace)'
              }
              function snip(str) {
                var maxChars = 41;
                if (str.length < maxChars) {
                  return str
                }
                return str.substr(0, maxChars - 3) + '...'
              }
              var shouldIgnore = function () {
                return false
              };
              var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
              function parseLineInfo(line) {
                var matches = line.match(parseLineInfoRegex);
                if (matches) {
                  return {
                    fileName: matches[1],
                    line: parseInt(matches[2], 10)
                  }
                }
              }
              CapturedTrace.setBounds = function (firstLineError, lastLineError) {
                if (!CapturedTrace.isSupported())
                  return;
                var firstStackLines = firstLineError.stack.split('\n');
                var lastStackLines = lastLineError.stack.split('\n');
                var firstIndex = -1;
                var lastIndex = -1;
                var firstFileName;
                var lastFileName;
                for (var i = 0; i < firstStackLines.length; ++i) {
                  var result = parseLineInfo(firstStackLines[i]);
                  if (result) {
                    firstFileName = result.fileName;
                    firstIndex = result.line;
                    break
                  }
                }
                for (var i = 0; i < lastStackLines.length; ++i) {
                  var result = parseLineInfo(lastStackLines[i]);
                  if (result) {
                    lastFileName = result.fileName;
                    lastIndex = result.line;
                    break
                  }
                }
                if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
                  return
                }
                shouldIgnore = function (line) {
                  if (bluebirdFramePattern.test(line))
                    return true;
                  var info = parseLineInfo(line);
                  if (info) {
                    if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
                      return true
                    }
                  }
                  return false
                }
              };
              var captureStackTrace = function stackDetection() {
                var v8stackFramePattern = /^\s*at\s*/;
                var v8stackFormatter = function (stack, error) {
                  if (typeof stack === 'string')
                    return stack;
                  if (error.name !== undefined && error.message !== undefined) {
                    return error.toString()
                  }
                  return formatNonError(error)
                };
                if (typeof Error.stackTraceLimit === 'number' && typeof Error.captureStackTrace === 'function') {
                  Error.stackTraceLimit = Error.stackTraceLimit + 6;
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  var captureStackTrace = Error.captureStackTrace;
                  shouldIgnore = function (line) {
                    return bluebirdFramePattern.test(line)
                  };
                  return function (receiver, ignoreUntil) {
                    Error.stackTraceLimit = Error.stackTraceLimit + 6;
                    captureStackTrace(receiver, ignoreUntil);
                    Error.stackTraceLimit = Error.stackTraceLimit - 6
                  }
                }
                var err = new Error;
                if (typeof err.stack === 'string' && err.stack.split('\n')[0].indexOf('stackDetection@') >= 0) {
                  stackFramePattern = /@/;
                  formatStack = v8stackFormatter;
                  indentStackFrames = true;
                  return function captureStackTrace(o) {
                    o.stack = new Error().stack
                  }
                }
                var hasStackAfterThrow;
                try {
                  throw new Error
                } catch (e) {
                  hasStackAfterThrow = 'stack' in e
                }
                if (!('stack' in err) && hasStackAfterThrow && typeof Error.stackTraceLimit === 'number') {
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  return function captureStackTrace(o) {
                    Error.stackTraceLimit = Error.stackTraceLimit + 6;
                    try {
                      throw new Error
                    } catch (e) {
                      o.stack = e.stack
                    }
                    Error.stackTraceLimit = Error.stackTraceLimit - 6
                  }
                }
                formatStack = function (stack, error) {
                  if (typeof stack === 'string')
                    return stack;
                  if ((typeof error === 'object' || typeof error === 'function') && error.name !== undefined && error.message !== undefined) {
                    return error.toString()
                  }
                  return formatNonError(error)
                };
                return null
              }([]);
              var fireDomEvent;
              var fireGlobalEvent = function () {
                if (util.isNode) {
                  return function (name, reason, promise) {
                    if (name === 'rejectionHandled') {
                      return process.emit(name, promise)
                    } else {
                      return process.emit(name, reason, promise)
                    }
                  }
                } else {
                  var customEventWorks = false;
                  var anyEventWorks = true;
                  try {
                    var ev = new self.CustomEvent('test');
                    customEventWorks = ev instanceof CustomEvent
                  } catch (e) {
                  }
                  if (!customEventWorks) {
                    try {
                      var event = document.createEvent('CustomEvent');
                      event.initCustomEvent('testingtheevent', false, true, {});
                      self.dispatchEvent(event)
                    } catch (e) {
                      anyEventWorks = false
                    }
                  }
                  if (anyEventWorks) {
                    fireDomEvent = function (type, detail) {
                      var event;
                      if (customEventWorks) {
                        event = new self.CustomEvent(type, {
                          detail: detail,
                          bubbles: false,
                          cancelable: true
                        })
                      } else if (self.dispatchEvent) {
                        event = document.createEvent('CustomEvent');
                        event.initCustomEvent(type, false, true, detail)
                      }
                      return event ? !self.dispatchEvent(event) : false
                    }
                  }
                  var toWindowMethodNameMap = {};
                  toWindowMethodNameMap['unhandledRejection'] = ('on' + 'unhandledRejection').toLowerCase();
                  toWindowMethodNameMap['rejectionHandled'] = ('on' + 'rejectionHandled').toLowerCase();
                  return function (name, reason, promise) {
                    var methodName = toWindowMethodNameMap[name];
                    var method = self[methodName];
                    if (!method)
                      return false;
                    if (name === 'rejectionHandled') {
                      method.call(self, promise)
                    } else {
                      method.call(self, reason, promise)
                    }
                    return true
                  }
                }
              }();
              if (typeof console !== 'undefined' && typeof console.warn !== 'undefined') {
                warn = function (message) {
                  console.warn(message)
                };
                if (util.isNode && process.stderr.isTTY) {
                  warn = function (message) {
                    process.stderr.write('[31m' + message + '[39m\n')
                  }
                } else if (!util.isNode && typeof new Error().stack === 'string') {
                  warn = function (message) {
                    console.warn('%c' + message, 'color: red')
                  }
                }
              }
              return CapturedTrace
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        8: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (NEXT_FILTER) {
              var util = _dereq_('./util.js');
              var errors = _dereq_('./errors.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var keys = _dereq_('./es5.js').keys;
              var TypeError = errors.TypeError;
              function CatchFilter(instances, callback, promise) {
                this._instances = instances;
                this._callback = callback;
                this._promise = promise
              }
              function safePredicate(predicate, e) {
                var safeObject = {};
                var retfilter = tryCatch(predicate).call(safeObject, e);
                if (retfilter === errorObj)
                  return retfilter;
                var safeKeys = keys(safeObject);
                if (safeKeys.length) {
                  errorObj.e = new TypeError('Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n');
                  return errorObj
                }
                return retfilter
              }
              CatchFilter.prototype.doFilter = function (e) {
                var cb = this._callback;
                var promise = this._promise;
                var boundTo = promise._boundValue();
                for (var i = 0, len = this._instances.length; i < len; ++i) {
                  var item = this._instances[i];
                  var itemIsErrorType = item === Error || item != null && item.prototype instanceof Error;
                  if (itemIsErrorType && e instanceof item) {
                    var ret = tryCatch(cb).call(boundTo, e);
                    if (ret === errorObj) {
                      NEXT_FILTER.e = ret.e;
                      return NEXT_FILTER
                    }
                    return ret
                  } else if (typeof item === 'function' && !itemIsErrorType) {
                    var shouldHandle = safePredicate(item, e);
                    if (shouldHandle === errorObj) {
                      e = errorObj.e;
                      break
                    } else if (shouldHandle) {
                      var ret = tryCatch(cb).call(boundTo, e);
                      if (ret === errorObj) {
                        NEXT_FILTER.e = ret.e;
                        return NEXT_FILTER
                      }
                      return ret
                    }
                  }
                }
                NEXT_FILTER.e = e;
                return NEXT_FILTER
              };
              return CatchFilter
            }
          },
          {
            './errors.js': 13,
            './es5.js': 14,
            './util.js': 38
          }
        ],
        9: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, CapturedTrace, isDebugging) {
              var contextStack = [];
              function Context() {
                this._trace = new CapturedTrace(peekContext())
              }
              Context.prototype._pushContext = function () {
                if (!isDebugging())
                  return;
                if (this._trace !== undefined) {
                  contextStack.push(this._trace)
                }
              };
              Context.prototype._popContext = function () {
                if (!isDebugging())
                  return;
                if (this._trace !== undefined) {
                  contextStack.pop()
                }
              };
              function createContext() {
                if (isDebugging())
                  return new Context
              }
              function peekContext() {
                var lastIndex = contextStack.length - 1;
                if (lastIndex >= 0) {
                  return contextStack[lastIndex]
                }
                return undefined
              }
              Promise.prototype._peekContext = peekContext;
              Promise.prototype._pushContext = Context.prototype._pushContext;
              Promise.prototype._popContext = Context.prototype._popContext;
              return createContext
            }
          },
          {}
        ],
        10: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, CapturedTrace) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var Warning = _dereq_('./errors.js').Warning;
              var util = _dereq_('./util.js');
              var canAttachTrace = util.canAttachTrace;
              var unhandledRejectionHandled;
              var possiblyUnhandledRejection;
              var debugging = false || util.isNode && (!!process.env['BLUEBIRD_DEBUG'] || process.env['NODE_ENV'] === 'development');
              if (debugging) {
                async.disableTrampolineIfNecessary()
              }
              Promise.prototype._ignoreRejections = function () {
                this._unsetRejectionIsUnhandled();
                this._bitField = this._bitField | 16777216
              };
              Promise.prototype._ensurePossibleRejectionHandled = function () {
                if ((this._bitField & 16777216) !== 0)
                  return;
                this._setRejectionIsUnhandled();
                async.invokeLater(this._notifyUnhandledRejection, this, undefined)
              };
              Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
                CapturedTrace.fireRejectionEvent('rejectionHandled', unhandledRejectionHandled, undefined, this)
              };
              Promise.prototype._notifyUnhandledRejection = function () {
                if (this._isRejectionUnhandled()) {
                  var reason = this._getCarriedStackTrace() || this._settledValue;
                  this._setUnhandledRejectionIsNotified();
                  CapturedTrace.fireRejectionEvent('unhandledRejection', possiblyUnhandledRejection, reason, this)
                }
              };
              Promise.prototype._setUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField | 524288
              };
              Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField & ~524288
              };
              Promise.prototype._isUnhandledRejectionNotified = function () {
                return (this._bitField & 524288) > 0
              };
              Promise.prototype._setRejectionIsUnhandled = function () {
                this._bitField = this._bitField | 2097152
              };
              Promise.prototype._unsetRejectionIsUnhandled = function () {
                this._bitField = this._bitField & ~2097152;
                if (this._isUnhandledRejectionNotified()) {
                  this._unsetUnhandledRejectionIsNotified();
                  this._notifyUnhandledRejectionIsHandled()
                }
              };
              Promise.prototype._isRejectionUnhandled = function () {
                return (this._bitField & 2097152) > 0
              };
              Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
                this._bitField = this._bitField | 1048576;
                this._fulfillmentHandler0 = capturedTrace
              };
              Promise.prototype._isCarryingStackTrace = function () {
                return (this._bitField & 1048576) > 0
              };
              Promise.prototype._getCarriedStackTrace = function () {
                return this._isCarryingStackTrace() ? this._fulfillmentHandler0 : undefined
              };
              Promise.prototype._captureStackTrace = function () {
                if (debugging) {
                  this._trace = new CapturedTrace(this._peekContext())
                }
                return this
              };
              Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
                if (debugging && canAttachTrace(error)) {
                  var trace = this._trace;
                  if (trace !== undefined) {
                    if (ignoreSelf)
                      trace = trace._parent
                  }
                  if (trace !== undefined) {
                    trace.attachExtraTrace(error)
                  } else if (!error.__stackCleaned__) {
                    var parsed = CapturedTrace.parseStackAndMessage(error);
                    util.notEnumerableProp(error, 'stack', parsed.message + '\n' + parsed.stack.join('\n'));
                    util.notEnumerableProp(error, '__stackCleaned__', true)
                  }
                }
              };
              Promise.prototype._warn = function (message) {
                var warning = new Warning(message);
                var ctx = this._peekContext();
                if (ctx) {
                  ctx.attachExtraTrace(warning)
                } else {
                  var parsed = CapturedTrace.parseStackAndMessage(warning);
                  warning.stack = parsed.message + '\n' + parsed.stack.join('\n')
                }
                CapturedTrace.formatAndLogError(warning, '')
              };
              Promise.onPossiblyUnhandledRejection = function (fn) {
                var domain = getDomain();
                possiblyUnhandledRejection = typeof fn === 'function' ? domain === null ? fn : domain.bind(fn) : undefined
              };
              Promise.onUnhandledRejectionHandled = function (fn) {
                var domain = getDomain();
                unhandledRejectionHandled = typeof fn === 'function' ? domain === null ? fn : domain.bind(fn) : undefined
              };
              Promise.longStackTraces = function () {
                if (async.haveItemsQueued() && debugging === false) {
                  throw new Error('cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/DT1qyG\n')
                }
                debugging = CapturedTrace.isSupported();
                if (debugging) {
                  async.disableTrampolineIfNecessary()
                }
              };
              Promise.hasLongStackTraces = function () {
                return debugging && CapturedTrace.isSupported()
              };
              if (!CapturedTrace.isSupported()) {
                Promise.longStackTraces = function () {
                };
                debugging = false
              }
              return function () {
                return debugging
              }
            }
          },
          {
            './async.js': 2,
            './errors.js': 13,
            './util.js': 38
          }
        ],
        11: [
          function (_dereq_, module, exports) {
            'use strict';
            var util = _dereq_('./util.js');
            var isPrimitive = util.isPrimitive;
            module.exports = function (Promise) {
              var returner = function () {
                return this
              };
              var thrower = function () {
                throw this
              };
              var returnUndefined = function () {
              };
              var throwUndefined = function () {
                throw undefined
              };
              var wrapper = function (value, action) {
                if (action === 1) {
                  return function () {
                    throw value
                  }
                } else if (action === 2) {
                  return function () {
                    return value
                  }
                }
              };
              Promise.prototype['return'] = Promise.prototype.thenReturn = function (value) {
                if (value === undefined)
                  return this.then(returnUndefined);
                if (isPrimitive(value)) {
                  return this._then(wrapper(value, 2), undefined, undefined, undefined, undefined)
                }
                return this._then(returner, undefined, undefined, value, undefined)
              };
              Promise.prototype['throw'] = Promise.prototype.thenThrow = function (reason) {
                if (reason === undefined)
                  return this.then(throwUndefined);
                if (isPrimitive(reason)) {
                  return this._then(wrapper(reason, 1), undefined, undefined, undefined, undefined)
                }
                return this._then(thrower, undefined, undefined, reason, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        12: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var PromiseReduce = Promise.reduce;
              Promise.prototype.each = function (fn) {
                return PromiseReduce(this, fn, null, INTERNAL)
              };
              Promise.each = function (promises, fn) {
                return PromiseReduce(promises, fn, null, INTERNAL)
              }
            }
          },
          {}
        ],
        13: [
          function (_dereq_, module, exports) {
            'use strict';
            var es5 = _dereq_('./es5.js');
            var Objectfreeze = es5.freeze;
            var util = _dereq_('./util.js');
            var inherits = util.inherits;
            var notEnumerableProp = util.notEnumerableProp;
            function subError(nameProperty, defaultMessage) {
              function SubError(message) {
                if (!(this instanceof SubError))
                  return new SubError(message);
                notEnumerableProp(this, 'message', typeof message === 'string' ? message : defaultMessage);
                notEnumerableProp(this, 'name', nameProperty);
                if (Error.captureStackTrace) {
                  Error.captureStackTrace(this, this.constructor)
                } else {
                  Error.call(this)
                }
              }
              inherits(SubError, Error);
              return SubError
            }
            var _TypeError, _RangeError;
            var Warning = subError('Warning', 'warning');
            var CancellationError = subError('CancellationError', 'cancellation error');
            var TimeoutError = subError('TimeoutError', 'timeout error');
            var AggregateError = subError('AggregateError', 'aggregate error');
            try {
              _TypeError = TypeError;
              _RangeError = RangeError
            } catch (e) {
              _TypeError = subError('TypeError', 'type error');
              _RangeError = subError('RangeError', 'range error')
            }
            var methods = ('join pop push shift unshift slice filter forEach some ' + 'every map indexOf lastIndexOf reduce reduceRight sort reverse').split(' ');
            for (var i = 0; i < methods.length; ++i) {
              if (typeof Array.prototype[methods[i]] === 'function') {
                AggregateError.prototype[methods[i]] = Array.prototype[methods[i]]
              }
            }
            es5.defineProperty(AggregateError.prototype, 'length', {
              value: 0,
              configurable: false,
              writable: true,
              enumerable: true
            });
            AggregateError.prototype['isOperational'] = true;
            var level = 0;
            AggregateError.prototype.toString = function () {
              var indent = Array(level * 4 + 1).join(' ');
              var ret = '\n' + indent + 'AggregateError of:' + '\n';
              level++;
              indent = Array(level * 4 + 1).join(' ');
              for (var i = 0; i < this.length; ++i) {
                var str = this[i] === this ? '[Circular AggregateError]' : this[i] + '';
                var lines = str.split('\n');
                for (var j = 0; j < lines.length; ++j) {
                  lines[j] = indent + lines[j]
                }
                str = lines.join('\n');
                ret += str + '\n'
              }
              level--;
              return ret
            };
            function OperationalError(message) {
              if (!(this instanceof OperationalError))
                return new OperationalError(message);
              notEnumerableProp(this, 'name', 'OperationalError');
              notEnumerableProp(this, 'message', message);
              this.cause = message;
              this['isOperational'] = true;
              if (message instanceof Error) {
                notEnumerableProp(this, 'message', message.message);
                notEnumerableProp(this, 'stack', message.stack)
              } else if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor)
              }
            }
            inherits(OperationalError, Error);
            var errorTypes = Error['__BluebirdErrorTypes__'];
            if (!errorTypes) {
              errorTypes = Objectfreeze({
                CancellationError: CancellationError,
                TimeoutError: TimeoutError,
                OperationalError: OperationalError,
                RejectionError: OperationalError,
                AggregateError: AggregateError
              });
              notEnumerableProp(Error, '__BluebirdErrorTypes__', errorTypes)
            }
            module.exports = {
              Error: Error,
              TypeError: _TypeError,
              RangeError: _RangeError,
              CancellationError: errorTypes.CancellationError,
              OperationalError: errorTypes.OperationalError,
              TimeoutError: errorTypes.TimeoutError,
              AggregateError: errorTypes.AggregateError,
              Warning: Warning
            }
          },
          {
            './es5.js': 14,
            './util.js': 38
          }
        ],
        14: [
          function (_dereq_, module, exports) {
            var isES5 = function () {
              'use strict';
              return this === undefined
            }();
            if (isES5) {
              module.exports = {
                freeze: Object.freeze,
                defineProperty: Object.defineProperty,
                getDescriptor: Object.getOwnPropertyDescriptor,
                keys: Object.keys,
                names: Object.getOwnPropertyNames,
                getPrototypeOf: Object.getPrototypeOf,
                isArray: Array.isArray,
                isES5: isES5,
                propertyIsWritable: function (obj, prop) {
                  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                  return !!(!descriptor || descriptor.writable || descriptor.set)
                }
              }
            } else {
              var has = {}.hasOwnProperty;
              var str = {}.toString;
              var proto = {}.constructor.prototype;
              var ObjectKeys = function (o) {
                var ret = [];
                for (var key in o) {
                  if (has.call(o, key)) {
                    ret.push(key)
                  }
                }
                return ret
              };
              var ObjectGetDescriptor = function (o, key) {
                return { value: o[key] }
              };
              var ObjectDefineProperty = function (o, key, desc) {
                o[key] = desc.value;
                return o
              };
              var ObjectFreeze = function (obj) {
                return obj
              };
              var ObjectGetPrototypeOf = function (obj) {
                try {
                  return Object(obj).constructor.prototype
                } catch (e) {
                  return proto
                }
              };
              var ArrayIsArray = function (obj) {
                try {
                  return str.call(obj) === '[object Array]'
                } catch (e) {
                  return false
                }
              };
              module.exports = {
                isArray: ArrayIsArray,
                keys: ObjectKeys,
                names: ObjectKeys,
                defineProperty: ObjectDefineProperty,
                getDescriptor: ObjectGetDescriptor,
                freeze: ObjectFreeze,
                getPrototypeOf: ObjectGetPrototypeOf,
                isES5: isES5,
                propertyIsWritable: function () {
                  return true
                }
              }
            }
          },
          {}
        ],
        15: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var PromiseMap = Promise.map;
              Promise.prototype.filter = function (fn, options) {
                return PromiseMap(this, fn, options, INTERNAL)
              };
              Promise.filter = function (promises, fn, options) {
                return PromiseMap(promises, fn, options, INTERNAL)
              }
            }
          },
          {}
        ],
        16: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, NEXT_FILTER, tryConvertToPromise) {
              var util = _dereq_('./util.js');
              var isPrimitive = util.isPrimitive;
              var thrower = util.thrower;
              function returnThis() {
                return this
              }
              function throwThis() {
                throw this
              }
              function return$(r) {
                return function () {
                  return r
                }
              }
              function throw$(r) {
                return function () {
                  throw r
                }
              }
              function promisedFinally(ret, reasonOrValue, isFulfilled) {
                var then;
                if (isPrimitive(reasonOrValue)) {
                  then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue)
                } else {
                  then = isFulfilled ? returnThis : throwThis
                }
                return ret._then(then, thrower, undefined, reasonOrValue, undefined)
              }
              function finallyHandler(reasonOrValue) {
                var promise = this.promise;
                var handler = this.handler;
                var ret = promise._isBound() ? handler.call(promise._boundValue()) : handler();
                if (ret !== undefined) {
                  var maybePromise = tryConvertToPromise(ret, promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    return promisedFinally(maybePromise, reasonOrValue, promise.isFulfilled())
                  }
                }
                if (promise.isRejected()) {
                  NEXT_FILTER.e = reasonOrValue;
                  return NEXT_FILTER
                } else {
                  return reasonOrValue
                }
              }
              function tapHandler(value) {
                var promise = this.promise;
                var handler = this.handler;
                var ret = promise._isBound() ? handler.call(promise._boundValue(), value) : handler(value);
                if (ret !== undefined) {
                  var maybePromise = tryConvertToPromise(ret, promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    return promisedFinally(maybePromise, value, true)
                  }
                }
                return value
              }
              Promise.prototype._passThroughHandler = function (handler, isFinally) {
                if (typeof handler !== 'function')
                  return this.then();
                var promiseAndHandler = {
                  promise: this,
                  handler: handler
                };
                return this._then(isFinally ? finallyHandler : tapHandler, isFinally ? finallyHandler : undefined, undefined, promiseAndHandler, undefined)
              };
              Promise.prototype.lastly = Promise.prototype['finally'] = function (handler) {
                return this._passThroughHandler(handler, true)
              };
              Promise.prototype.tap = function (handler) {
                return this._passThroughHandler(handler, false)
              }
            }
          },
          { './util.js': 38 }
        ],
        17: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, apiRejection, INTERNAL, tryConvertToPromise) {
              var errors = _dereq_('./errors.js');
              var TypeError = errors.TypeError;
              var util = _dereq_('./util.js');
              var errorObj = util.errorObj;
              var tryCatch = util.tryCatch;
              var yieldHandlers = [];
              function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
                for (var i = 0; i < yieldHandlers.length; ++i) {
                  traceParent._pushContext();
                  var result = tryCatch(yieldHandlers[i])(value);
                  traceParent._popContext();
                  if (result === errorObj) {
                    traceParent._pushContext();
                    var ret = Promise.reject(errorObj.e);
                    traceParent._popContext();
                    return ret
                  }
                  var maybePromise = tryConvertToPromise(result, traceParent);
                  if (maybePromise instanceof Promise)
                    return maybePromise
                }
                return null
              }
              function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
                var promise = this._promise = new Promise(INTERNAL);
                promise._captureStackTrace();
                this._stack = stack;
                this._generatorFunction = generatorFunction;
                this._receiver = receiver;
                this._generator = undefined;
                this._yieldHandlers = typeof yieldHandler === 'function' ? [yieldHandler].concat(yieldHandlers) : yieldHandlers
              }
              PromiseSpawn.prototype.promise = function () {
                return this._promise
              };
              PromiseSpawn.prototype._run = function () {
                this._generator = this._generatorFunction.call(this._receiver);
                this._receiver = this._generatorFunction = undefined;
                this._next(undefined)
              };
              PromiseSpawn.prototype._continue = function (result) {
                if (result === errorObj) {
                  return this._promise._rejectCallback(result.e, false, true)
                }
                var value = result.value;
                if (result.done === true) {
                  this._promise._resolveCallback(value)
                } else {
                  var maybePromise = tryConvertToPromise(value, this._promise);
                  if (!(maybePromise instanceof Promise)) {
                    maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
                    if (maybePromise === null) {
                      this._throw(new TypeError('A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/4Y4pDk\n\n'.replace('%s', value) + 'From coroutine:\n' + this._stack.split('\n').slice(1, -7).join('\n')));
                      return
                    }
                  }
                  maybePromise._then(this._next, this._throw, undefined, this, null)
                }
              };
              PromiseSpawn.prototype._throw = function (reason) {
                this._promise._attachExtraTrace(reason);
                this._promise._pushContext();
                var result = tryCatch(this._generator['throw']).call(this._generator, reason);
                this._promise._popContext();
                this._continue(result)
              };
              PromiseSpawn.prototype._next = function (value) {
                this._promise._pushContext();
                var result = tryCatch(this._generator.next).call(this._generator, value);
                this._promise._popContext();
                this._continue(result)
              };
              Promise.coroutine = function (generatorFunction, options) {
                if (typeof generatorFunction !== 'function') {
                  throw new TypeError('generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n')
                }
                var yieldHandler = Object(options).yieldHandler;
                var PromiseSpawn$ = PromiseSpawn;
                var stack = new Error().stack;
                return function () {
                  var generator = generatorFunction.apply(this, arguments);
                  var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler, stack);
                  spawn._generator = generator;
                  spawn._next(undefined);
                  return spawn.promise()
                }
              };
              Promise.coroutine.addYieldHandler = function (fn) {
                if (typeof fn !== 'function')
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                yieldHandlers.push(fn)
              };
              Promise.spawn = function (generatorFunction) {
                if (typeof generatorFunction !== 'function') {
                  return apiRejection('generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n')
                }
                var spawn = new PromiseSpawn(generatorFunction, this);
                var ret = spawn.promise();
                spawn._run(Promise.spawn);
                return ret
              }
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        18: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
              var util = _dereq_('./util.js');
              var canEvaluate = util.canEvaluate;
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var reject;
              if (!true) {
                if (canEvaluate) {
                  var thenCallback = function (i) {
                    return new Function('value', 'holder', "                             \n            'use strict';                                                    \n            holder.pIndex = value;                                           \n            holder.checkFulfillment(this);                                   \n            ".replace(/Index/g, i))
                  };
                  var caller = function (count) {
                    var values = [];
                    for (var i = 1; i <= count; ++i)
                      values.push('holder.p' + i);
                    return new Function('holder', "                                      \n            'use strict';                                                    \n            var callback = holder.fn;                                        \n            return callback(values);                                         \n            ".replace(/values/g, values.join(', ')))
                  };
                  var thenCallbacks = [];
                  var callers = [undefined];
                  for (var i = 1; i <= 5; ++i) {
                    thenCallbacks.push(thenCallback(i));
                    callers.push(caller(i))
                  }
                  var Holder = function (total, fn) {
                    this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
                    this.fn = fn;
                    this.total = total;
                    this.now = 0
                  };
                  Holder.prototype.callers = callers;
                  Holder.prototype.checkFulfillment = function (promise) {
                    var now = this.now;
                    now++;
                    var total = this.total;
                    if (now >= total) {
                      var handler = this.callers[total];
                      promise._pushContext();
                      var ret = tryCatch(handler)(this);
                      promise._popContext();
                      if (ret === errorObj) {
                        promise._rejectCallback(ret.e, false, true)
                      } else {
                        promise._resolveCallback(ret)
                      }
                    } else {
                      this.now = now
                    }
                  };
                  var reject = function (reason) {
                    this._reject(reason)
                  }
                }
              }
              Promise.join = function () {
                var last = arguments.length - 1;
                var fn;
                if (last > 0 && typeof arguments[last] === 'function') {
                  fn = arguments[last];
                  if (!true) {
                    if (last < 6 && canEvaluate) {
                      var ret = new Promise(INTERNAL);
                      ret._captureStackTrace();
                      var holder = new Holder(last, fn);
                      var callbacks = thenCallbacks;
                      for (var i = 0; i < last; ++i) {
                        var maybePromise = tryConvertToPromise(arguments[i], ret);
                        if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          if (maybePromise._isPending()) {
                            maybePromise._then(callbacks[i], reject, undefined, ret, holder)
                          } else if (maybePromise._isFulfilled()) {
                            callbacks[i].call(ret, maybePromise._value(), holder)
                          } else {
                            ret._reject(maybePromise._reason())
                          }
                        } else {
                          callbacks[i].call(ret, maybePromise, holder)
                        }
                      }
                      return ret
                    }
                  }
                }
                var $_len = arguments.length;
                var args = new Array($_len);
                for (var $_i = 0; $_i < $_len; ++$_i) {
                  args[$_i] = arguments[$_i]
                }
                if (fn)
                  args.pop();
                var ret = new PromiseArray(args).promise();
                return fn !== undefined ? ret.spread(fn) : ret
              }
            }
          },
          { './util.js': 38 }
        ],
        19: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var PENDING = {};
              var EMPTY_ARRAY = [];
              function MappingPromiseArray(promises, fn, limit, _filter) {
                this.constructor$(promises);
                this._promise._captureStackTrace();
                var domain = getDomain();
                this._callback = domain === null ? fn : domain.bind(fn);
                this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
                this._limit = limit;
                this._inFlight = 0;
                this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
                async.invoke(init, this, undefined)
              }
              util.inherits(MappingPromiseArray, PromiseArray);
              function init() {
                this._init$(undefined, -2)
              }
              MappingPromiseArray.prototype._init = function () {
              };
              MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var values = this._values;
                var length = this.length();
                var preservedValues = this._preservedValues;
                var limit = this._limit;
                if (values[index] === PENDING) {
                  values[index] = value;
                  if (limit >= 1) {
                    this._inFlight--;
                    this._drainQueue();
                    if (this._isResolved())
                      return
                  }
                } else {
                  if (limit >= 1 && this._inFlight >= limit) {
                    values[index] = value;
                    this._queue.push(index);
                    return
                  }
                  if (preservedValues !== null)
                    preservedValues[index] = value;
                  var callback = this._callback;
                  var receiver = this._promise._boundValue();
                  this._promise._pushContext();
                  var ret = tryCatch(callback).call(receiver, value, index, length);
                  this._promise._popContext();
                  if (ret === errorObj)
                    return this._reject(ret.e);
                  var maybePromise = tryConvertToPromise(ret, this._promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (maybePromise._isPending()) {
                      if (limit >= 1)
                        this._inFlight++;
                      values[index] = PENDING;
                      return maybePromise._proxyPromiseArray(this, index)
                    } else if (maybePromise._isFulfilled()) {
                      ret = maybePromise._value()
                    } else {
                      return this._reject(maybePromise._reason())
                    }
                  }
                  values[index] = ret
                }
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= length) {
                  if (preservedValues !== null) {
                    this._filter(values, preservedValues)
                  } else {
                    this._resolve(values)
                  }
                }
              };
              MappingPromiseArray.prototype._drainQueue = function () {
                var queue = this._queue;
                var limit = this._limit;
                var values = this._values;
                while (queue.length > 0 && this._inFlight < limit) {
                  if (this._isResolved())
                    return;
                  var index = queue.pop();
                  this._promiseFulfilled(values[index], index)
                }
              };
              MappingPromiseArray.prototype._filter = function (booleans, values) {
                var len = values.length;
                var ret = new Array(len);
                var j = 0;
                for (var i = 0; i < len; ++i) {
                  if (booleans[i])
                    ret[j++] = values[i]
                }
                ret.length = j;
                this._resolve(ret)
              };
              MappingPromiseArray.prototype.preservedValues = function () {
                return this._preservedValues
              };
              function map(promises, fn, options, _filter) {
                var limit = typeof options === 'object' && options !== null ? options.concurrency : 0;
                limit = typeof limit === 'number' && isFinite(limit) && limit >= 1 ? limit : 0;
                return new MappingPromiseArray(promises, fn, limit, _filter)
              }
              Promise.prototype.map = function (fn, options) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                return map(this, fn, options, null).promise()
              };
              Promise.map = function (promises, fn, options, _filter) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                return map(promises, fn, options, _filter).promise()
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        20: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              Promise.method = function (fn) {
                if (typeof fn !== 'function') {
                  throw new Promise.TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                return function () {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  ret._pushContext();
                  var value = tryCatch(fn).apply(this, arguments);
                  ret._popContext();
                  ret._resolveFromSyncValue(value);
                  return ret
                }
              };
              Promise.attempt = Promise['try'] = function (fn, args, ctx) {
                if (typeof fn !== 'function') {
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._pushContext();
                var value = util.isArray(args) ? tryCatch(fn).apply(ctx, args) : tryCatch(fn).call(ctx, args);
                ret._popContext();
                ret._resolveFromSyncValue(value);
                return ret
              };
              Promise.prototype._resolveFromSyncValue = function (value) {
                if (value === util.errorObj) {
                  this._rejectCallback(value.e, false, true)
                } else {
                  this._resolveCallback(value, true)
                }
              }
            }
          },
          { './util.js': 38 }
        ],
        21: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var util = _dereq_('./util.js');
              var async = _dereq_('./async.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              function spreadAdapter(val, nodeback) {
                var promise = this;
                if (!util.isArray(val))
                  return successAdapter.call(promise, val, nodeback);
                var ret = tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              function successAdapter(val, nodeback) {
                var promise = this;
                var receiver = promise._boundValue();
                var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              function errorAdapter(reason, nodeback) {
                var promise = this;
                if (!reason) {
                  var target = promise._target();
                  var newReason = target._getCarriedStackTrace();
                  newReason.cause = reason;
                  reason = newReason
                }
                var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback, options) {
                if (typeof nodeback == 'function') {
                  var adapter = successAdapter;
                  if (options !== undefined && Object(options).spread) {
                    adapter = spreadAdapter
                  }
                  this._then(adapter, errorAdapter, undefined, this, nodeback)
                }
                return this
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        22: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray) {
              var util = _dereq_('./util.js');
              var async = _dereq_('./async.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              Promise.prototype.progressed = function (handler) {
                return this._then(undefined, undefined, handler, undefined, undefined)
              };
              Promise.prototype._progress = function (progressValue) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._target()._progressUnchecked(progressValue)
              };
              Promise.prototype._progressHandlerAt = function (index) {
                return index === 0 ? this._progressHandler0 : this[(index << 2) + index - 5 + 2]
              };
              Promise.prototype._doProgressWith = function (progression) {
                var progressValue = progression.value;
                var handler = progression.handler;
                var promise = progression.promise;
                var receiver = progression.receiver;
                var ret = tryCatch(handler).call(receiver, progressValue);
                if (ret === errorObj) {
                  if (ret.e != null && ret.e.name !== 'StopProgressPropagation') {
                    var trace = util.canAttachTrace(ret.e) ? ret.e : new Error(util.toString(ret.e));
                    promise._attachExtraTrace(trace);
                    promise._progress(ret.e)
                  }
                } else if (ret instanceof Promise) {
                  ret._then(promise._progress, null, null, promise, undefined)
                } else {
                  promise._progress(ret)
                }
              };
              Promise.prototype._progressUnchecked = function (progressValue) {
                var len = this._length();
                var progress = this._progress;
                for (var i = 0; i < len; i++) {
                  var handler = this._progressHandlerAt(i);
                  var promise = this._promiseAt(i);
                  if (!(promise instanceof Promise)) {
                    var receiver = this._receiverAt(i);
                    if (typeof handler === 'function') {
                      handler.call(receiver, progressValue, promise)
                    } else if (receiver instanceof PromiseArray && !receiver._isResolved()) {
                      receiver._promiseProgressed(progressValue, promise)
                    }
                    continue
                  }
                  if (typeof handler === 'function') {
                    async.invoke(this._doProgressWith, this, {
                      handler: handler,
                      promise: promise,
                      receiver: this._receiverAt(i),
                      value: progressValue
                    })
                  } else {
                    async.invoke(progress, promise, progressValue)
                  }
                }
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        23: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function () {
              var makeSelfResolutionError = function () {
                return new TypeError('circular promise resolution chain\n\n    See http://goo.gl/LhFpo0\n')
              };
              var reflect = function () {
                return new Promise.PromiseInspection(this._target())
              };
              var apiRejection = function (msg) {
                return Promise.reject(new TypeError(msg))
              };
              var util = _dereq_('./util.js');
              var getDomain;
              if (util.isNode) {
                getDomain = function () {
                  var ret = process.domain;
                  if (ret === undefined)
                    ret = null;
                  return ret
                }
              } else {
                getDomain = function () {
                  return null
                }
              }
              util.notEnumerableProp(Promise, '_getDomain', getDomain);
              var async = _dereq_('./async.js');
              var errors = _dereq_('./errors.js');
              var TypeError = Promise.TypeError = errors.TypeError;
              Promise.RangeError = errors.RangeError;
              Promise.CancellationError = errors.CancellationError;
              Promise.TimeoutError = errors.TimeoutError;
              Promise.OperationalError = errors.OperationalError;
              Promise.RejectionError = errors.OperationalError;
              Promise.AggregateError = errors.AggregateError;
              var INTERNAL = function () {
              };
              var APPLY = {};
              var NEXT_FILTER = { e: null };
              var tryConvertToPromise = _dereq_('./thenables.js')(Promise, INTERNAL);
              var PromiseArray = _dereq_('./promise_array.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              var CapturedTrace = _dereq_('./captured_trace.js')();
              var isDebugging = _dereq_('./debuggability.js')(Promise, CapturedTrace);
              /*jshint unused:false*/
              var createContext = _dereq_('./context.js')(Promise, CapturedTrace, isDebugging);
              var CatchFilter = _dereq_('./catch_filter.js')(NEXT_FILTER);
              var PromiseResolver = _dereq_('./promise_resolver.js');
              var nodebackForPromise = PromiseResolver._nodebackForPromise;
              var errorObj = util.errorObj;
              var tryCatch = util.tryCatch;
              function Promise(resolver) {
                if (typeof resolver !== 'function') {
                  throw new TypeError('the promise constructor requires a resolver function\n\n    See http://goo.gl/EC22Yn\n')
                }
                if (this.constructor !== Promise) {
                  throw new TypeError('the promise constructor cannot be invoked directly\n\n    See http://goo.gl/KsIlge\n')
                }
                this._bitField = 0;
                this._fulfillmentHandler0 = undefined;
                this._rejectionHandler0 = undefined;
                this._progressHandler0 = undefined;
                this._promise0 = undefined;
                this._receiver0 = undefined;
                this._settledValue = undefined;
                if (resolver !== INTERNAL)
                  this._resolveFromResolver(resolver)
              }
              Promise.prototype.toString = function () {
                return '[object Promise]'
              };
              Promise.prototype.caught = Promise.prototype['catch'] = function (fn) {
                var len = arguments.length;
                if (len > 1) {
                  var catchInstances = new Array(len - 1), j = 0, i;
                  for (i = 0; i < len - 1; ++i) {
                    var item = arguments[i];
                    if (typeof item === 'function') {
                      catchInstances[j++] = item
                    } else {
                      return Promise.reject(new TypeError('Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n'))
                    }
                  }
                  catchInstances.length = j;
                  fn = arguments[i];
                  var catchFilter = new CatchFilter(catchInstances, fn, this);
                  return this._then(undefined, catchFilter.doFilter, undefined, catchFilter, undefined)
                }
                return this._then(undefined, fn, undefined, undefined, undefined)
              };
              Promise.prototype.reflect = function () {
                return this._then(reflect, reflect, undefined, this, undefined)
              };
              Promise.prototype.then = function (didFulfill, didReject, didProgress) {
                if (isDebugging() && arguments.length > 0 && typeof didFulfill !== 'function' && typeof didReject !== 'function') {
                  var msg = '.then() only accepts functions but was passed: ' + util.classString(didFulfill);
                  if (arguments.length > 1) {
                    msg += ', ' + util.classString(didReject)
                  }
                  this._warn(msg)
                }
                return this._then(didFulfill, didReject, didProgress, undefined, undefined)
              };
              Promise.prototype.done = function (didFulfill, didReject, didProgress) {
                var promise = this._then(didFulfill, didReject, didProgress, undefined, undefined);
                promise._setIsFinal()
              };
              Promise.prototype.spread = function (didFulfill, didReject) {
                return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined)
              };
              Promise.prototype.isCancellable = function () {
                return !this.isResolved() && this._cancellable()
              };
              Promise.prototype.toJSON = function () {
                var ret = {
                  isFulfilled: false,
                  isRejected: false,
                  fulfillmentValue: undefined,
                  rejectionReason: undefined
                };
                if (this.isFulfilled()) {
                  ret.fulfillmentValue = this.value();
                  ret.isFulfilled = true
                } else if (this.isRejected()) {
                  ret.rejectionReason = this.reason();
                  ret.isRejected = true
                }
                return ret
              };
              Promise.prototype.all = function () {
                return new PromiseArray(this).promise()
              };
              Promise.prototype.error = function (fn) {
                return this.caught(util.originatesFromRejection, fn)
              };
              Promise.is = function (val) {
                return val instanceof Promise
              };
              Promise.fromNode = function (fn) {
                var ret = new Promise(INTERNAL);
                var result = tryCatch(fn)(nodebackForPromise(ret));
                if (result === errorObj) {
                  ret._rejectCallback(result.e, true, true)
                }
                return ret
              };
              Promise.all = function (promises) {
                return new PromiseArray(promises).promise()
              };
              Promise.defer = Promise.pending = function () {
                var promise = new Promise(INTERNAL);
                return new PromiseResolver(promise)
              };
              Promise.cast = function (obj) {
                var ret = tryConvertToPromise(obj);
                if (!(ret instanceof Promise)) {
                  var val = ret;
                  ret = new Promise(INTERNAL);
                  ret._fulfillUnchecked(val)
                }
                return ret
              };
              Promise.resolve = Promise.fulfilled = Promise.cast;
              Promise.reject = Promise.rejected = function (reason) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._rejectCallback(reason, true);
                return ret
              };
              Promise.setScheduler = function (fn) {
                if (typeof fn !== 'function')
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var prev = async._schedule;
                async._schedule = fn;
                return prev
              };
              Promise.prototype._then = function (didFulfill, didReject, didProgress, receiver, internalData) {
                var haveInternalData = internalData !== undefined;
                var ret = haveInternalData ? internalData : new Promise(INTERNAL);
                if (!haveInternalData) {
                  ret._propagateFrom(this, 4 | 1);
                  ret._captureStackTrace()
                }
                var target = this._target();
                if (target !== this) {
                  if (receiver === undefined)
                    receiver = this._boundTo;
                  if (!haveInternalData)
                    ret._setIsMigrated()
                }
                var callbackIndex = target._addCallbacks(didFulfill, didReject, didProgress, ret, receiver, getDomain());
                if (target._isResolved() && !target._isSettlePromisesQueued()) {
                  async.invoke(target._settlePromiseAtPostResolution, target, callbackIndex)
                }
                return ret
              };
              Promise.prototype._settlePromiseAtPostResolution = function (index) {
                if (this._isRejectionUnhandled())
                  this._unsetRejectionIsUnhandled();
                this._settlePromiseAt(index)
              };
              Promise.prototype._length = function () {
                return this._bitField & 131071
              };
              Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
                return (this._bitField & 939524096) > 0
              };
              Promise.prototype._isFollowing = function () {
                return (this._bitField & 536870912) === 536870912
              };
              Promise.prototype._setLength = function (len) {
                this._bitField = this._bitField & -131072 | len & 131071
              };
              Promise.prototype._setFulfilled = function () {
                this._bitField = this._bitField | 268435456
              };
              Promise.prototype._setRejected = function () {
                this._bitField = this._bitField | 134217728
              };
              Promise.prototype._setFollowing = function () {
                this._bitField = this._bitField | 536870912
              };
              Promise.prototype._setIsFinal = function () {
                this._bitField = this._bitField | 33554432
              };
              Promise.prototype._isFinal = function () {
                return (this._bitField & 33554432) > 0
              };
              Promise.prototype._cancellable = function () {
                return (this._bitField & 67108864) > 0
              };
              Promise.prototype._setCancellable = function () {
                this._bitField = this._bitField | 67108864
              };
              Promise.prototype._unsetCancellable = function () {
                this._bitField = this._bitField & ~67108864
              };
              Promise.prototype._setIsMigrated = function () {
                this._bitField = this._bitField | 4194304
              };
              Promise.prototype._unsetIsMigrated = function () {
                this._bitField = this._bitField & ~4194304
              };
              Promise.prototype._isMigrated = function () {
                return (this._bitField & 4194304) > 0
              };
              Promise.prototype._receiverAt = function (index) {
                var ret = index === 0 ? this._receiver0 : this[index * 5 - 5 + 4];
                if (ret === undefined && this._isBound()) {
                  return this._boundValue()
                }
                return ret
              };
              Promise.prototype._promiseAt = function (index) {
                return index === 0 ? this._promise0 : this[index * 5 - 5 + 3]
              };
              Promise.prototype._fulfillmentHandlerAt = function (index) {
                return index === 0 ? this._fulfillmentHandler0 : this[index * 5 - 5 + 0]
              };
              Promise.prototype._rejectionHandlerAt = function (index) {
                return index === 0 ? this._rejectionHandler0 : this[index * 5 - 5 + 1]
              };
              Promise.prototype._boundValue = function () {
                var ret = this._boundTo;
                if (ret !== undefined) {
                  if (ret instanceof Promise) {
                    if (ret.isFulfilled()) {
                      return ret.value()
                    } else {
                      return undefined
                    }
                  }
                }
                return ret
              };
              Promise.prototype._migrateCallbacks = function (follower, index) {
                var fulfill = follower._fulfillmentHandlerAt(index);
                var reject = follower._rejectionHandlerAt(index);
                var progress = follower._progressHandlerAt(index);
                var promise = follower._promiseAt(index);
                var receiver = follower._receiverAt(index);
                if (promise instanceof Promise)
                  promise._setIsMigrated();
                this._addCallbacks(fulfill, reject, progress, promise, receiver, null)
              };
              Promise.prototype._addCallbacks = function (fulfill, reject, progress, promise, receiver, domain) {
                var index = this._length();
                if (index >= 131071 - 5) {
                  index = 0;
                  this._setLength(0)
                }
                if (index === 0) {
                  this._promise0 = promise;
                  if (receiver !== undefined)
                    this._receiver0 = receiver;
                  if (typeof fulfill === 'function' && !this._isCarryingStackTrace()) {
                    this._fulfillmentHandler0 = domain === null ? fulfill : domain.bind(fulfill)
                  }
                  if (typeof reject === 'function') {
                    this._rejectionHandler0 = domain === null ? reject : domain.bind(reject)
                  }
                  if (typeof progress === 'function') {
                    this._progressHandler0 = domain === null ? progress : domain.bind(progress)
                  }
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = promise;
                  this[base + 4] = receiver;
                  if (typeof fulfill === 'function') {
                    this[base + 0] = domain === null ? fulfill : domain.bind(fulfill)
                  }
                  if (typeof reject === 'function') {
                    this[base + 1] = domain === null ? reject : domain.bind(reject)
                  }
                  if (typeof progress === 'function') {
                    this[base + 2] = domain === null ? progress : domain.bind(progress)
                  }
                }
                this._setLength(index + 1);
                return index
              };
              Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
                var index = this._length();
                if (index >= 131071 - 5) {
                  index = 0;
                  this._setLength(0)
                }
                if (index === 0) {
                  this._promise0 = promiseSlotValue;
                  this._receiver0 = receiver
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = promiseSlotValue;
                  this[base + 4] = receiver
                }
                this._setLength(index + 1)
              };
              Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
                this._setProxyHandlers(promiseArray, index)
              };
              Promise.prototype._resolveCallback = function (value, shouldBind) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                if (value === this)
                  return this._rejectCallback(makeSelfResolutionError(), false, true);
                var maybePromise = tryConvertToPromise(value, this);
                if (!(maybePromise instanceof Promise))
                  return this._fulfill(value);
                var propagationFlags = 1 | (shouldBind ? 4 : 0);
                this._propagateFrom(maybePromise, propagationFlags);
                var promise = maybePromise._target();
                if (promise._isPending()) {
                  var len = this._length();
                  for (var i = 0; i < len; ++i) {
                    promise._migrateCallbacks(this, i)
                  }
                  this._setFollowing();
                  this._setLength(0);
                  this._setFollowee(promise)
                } else if (promise._isFulfilled()) {
                  this._fulfillUnchecked(promise._value())
                } else {
                  this._rejectUnchecked(promise._reason(), promise._getCarriedStackTrace())
                }
              };
              Promise.prototype._rejectCallback = function (reason, synchronous, shouldNotMarkOriginatingFromRejection) {
                if (!shouldNotMarkOriginatingFromRejection) {
                  util.markAsOriginatingFromRejection(reason)
                }
                var trace = util.ensureErrorObject(reason);
                var hasStack = trace === reason;
                this._attachExtraTrace(trace, synchronous ? hasStack : false);
                this._reject(reason, hasStack ? undefined : trace)
              };
              Promise.prototype._resolveFromResolver = function (resolver) {
                var promise = this;
                this._captureStackTrace();
                this._pushContext();
                var synchronous = true;
                var r = tryCatch(resolver)(function (value) {
                  if (promise === null)
                    return;
                  promise._resolveCallback(value);
                  promise = null
                }, function (reason) {
                  if (promise === null)
                    return;
                  promise._rejectCallback(reason, synchronous);
                  promise = null
                });
                synchronous = false;
                this._popContext();
                if (r !== undefined && r === errorObj && promise !== null) {
                  promise._rejectCallback(r.e, true, true);
                  promise = null
                }
              };
              Promise.prototype._settlePromiseFromHandler = function (handler, receiver, value, promise) {
                if (promise._isRejected())
                  return;
                promise._pushContext();
                var x;
                if (receiver === APPLY && !this._isRejected()) {
                  x = tryCatch(handler).apply(this._boundValue(), value)
                } else {
                  x = tryCatch(handler).call(receiver, value)
                }
                promise._popContext();
                if (x === errorObj || x === promise || x === NEXT_FILTER) {
                  var err = x === promise ? makeSelfResolutionError() : x.e;
                  promise._rejectCallback(err, false, true)
                } else {
                  promise._resolveCallback(x)
                }
              };
              Promise.prototype._target = function () {
                var ret = this;
                while (ret._isFollowing())
                  ret = ret._followee();
                return ret
              };
              Promise.prototype._followee = function () {
                return this._rejectionHandler0
              };
              Promise.prototype._setFollowee = function (promise) {
                this._rejectionHandler0 = promise
              };
              Promise.prototype._cleanValues = function () {
                if (this._cancellable()) {
                  this._cancellationParent = undefined
                }
              };
              Promise.prototype._propagateFrom = function (parent, flags) {
                if ((flags & 1) > 0 && parent._cancellable()) {
                  this._setCancellable();
                  this._cancellationParent = parent
                }
                if ((flags & 4) > 0 && parent._isBound()) {
                  this._setBoundTo(parent._boundTo)
                }
              };
              Promise.prototype._fulfill = function (value) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._fulfillUnchecked(value)
              };
              Promise.prototype._reject = function (reason, carriedStackTrace) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._rejectUnchecked(reason, carriedStackTrace)
              };
              Promise.prototype._settlePromiseAt = function (index) {
                var promise = this._promiseAt(index);
                var isPromise = promise instanceof Promise;
                if (isPromise && promise._isMigrated()) {
                  promise._unsetIsMigrated();
                  return async.invoke(this._settlePromiseAt, this, index)
                }
                var handler = this._isFulfilled() ? this._fulfillmentHandlerAt(index) : this._rejectionHandlerAt(index);
                var carriedStackTrace = this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
                var value = this._settledValue;
                var receiver = this._receiverAt(index);
                this._clearCallbackDataAtIndex(index);
                if (typeof handler === 'function') {
                  if (!isPromise) {
                    handler.call(receiver, value, promise)
                  } else {
                    this._settlePromiseFromHandler(handler, receiver, value, promise)
                  }
                } else if (receiver instanceof PromiseArray) {
                  if (!receiver._isResolved()) {
                    if (this._isFulfilled()) {
                      receiver._promiseFulfilled(value, promise)
                    } else {
                      receiver._promiseRejected(value, promise)
                    }
                  }
                } else if (isPromise) {
                  if (this._isFulfilled()) {
                    promise._fulfill(value)
                  } else {
                    promise._reject(value, carriedStackTrace)
                  }
                }
                if (index >= 4 && (index & 31) === 4)
                  async.invokeLater(this._setLength, this, 0)
              };
              Promise.prototype._clearCallbackDataAtIndex = function (index) {
                if (index === 0) {
                  if (!this._isCarryingStackTrace()) {
                    this._fulfillmentHandler0 = undefined
                  }
                  this._rejectionHandler0 = this._progressHandler0 = this._receiver0 = this._promise0 = undefined
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = this[base + 4] = this[base + 0] = this[base + 1] = this[base + 2] = undefined
                }
              };
              Promise.prototype._isSettlePromisesQueued = function () {
                return (this._bitField & -1073741824) === -1073741824
              };
              Promise.prototype._setSettlePromisesQueued = function () {
                this._bitField = this._bitField | -1073741824
              };
              Promise.prototype._unsetSettlePromisesQueued = function () {
                this._bitField = this._bitField & ~-1073741824
              };
              Promise.prototype._queueSettlePromises = function () {
                async.settlePromises(this);
                this._setSettlePromisesQueued()
              };
              Promise.prototype._fulfillUnchecked = function (value) {
                if (value === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._rejectUnchecked(err, undefined)
                }
                this._setFulfilled();
                this._settledValue = value;
                this._cleanValues();
                if (this._length() > 0) {
                  this._queueSettlePromises()
                }
              };
              Promise.prototype._rejectUncheckedCheckError = function (reason) {
                var trace = util.ensureErrorObject(reason);
                this._rejectUnchecked(reason, trace === reason ? undefined : trace)
              };
              Promise.prototype._rejectUnchecked = function (reason, trace) {
                if (reason === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._rejectUnchecked(err)
                }
                this._setRejected();
                this._settledValue = reason;
                this._cleanValues();
                if (this._isFinal()) {
                  async.throwLater(function (e) {
                    if ('stack' in e) {
                      async.invokeFirst(CapturedTrace.unhandledRejection, undefined, e)
                    }
                    throw e
                  }, trace === undefined ? reason : trace);
                  return
                }
                if (trace !== undefined && trace !== reason) {
                  this._setCarriedStackTrace(trace)
                }
                if (this._length() > 0) {
                  this._queueSettlePromises()
                } else {
                  this._ensurePossibleRejectionHandled()
                }
              };
              Promise.prototype._settlePromises = function () {
                this._unsetSettlePromisesQueued();
                var len = this._length();
                for (var i = 0; i < len; i++) {
                  this._settlePromiseAt(i)
                }
              };
              util.notEnumerableProp(Promise, '_makeSelfResolutionError', makeSelfResolutionError);
              _dereq_('./progress.js')(Promise, PromiseArray);
              _dereq_('./method.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              _dereq_('./bind.js')(Promise, INTERNAL, tryConvertToPromise);
              _dereq_('./finally.js')(Promise, NEXT_FILTER, tryConvertToPromise);
              _dereq_('./direct_resolve.js')(Promise);
              _dereq_('./synchronous_inspection.js')(Promise);
              _dereq_('./join.js')(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
              Promise.Promise = Promise;
              _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
              _dereq_('./cancel.js')(Promise);
              _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
              _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
              _dereq_('./nodeify.js')(Promise);
              _dereq_('./call_get.js')(Promise);
              _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
              _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
              _dereq_('./settle.js')(Promise, PromiseArray);
              _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
              _dereq_('./promisify.js')(Promise, INTERNAL);
              _dereq_('./any.js')(Promise);
              _dereq_('./each.js')(Promise, INTERNAL);
              _dereq_('./timers.js')(Promise, INTERNAL);
              _dereq_('./filter.js')(Promise, INTERNAL);
              util.toFastProperties(Promise);
              util.toFastProperties(Promise.prototype);
              function fillTypes(value) {
                var p = new Promise(INTERNAL);
                p._fulfillmentHandler0 = value;
                p._rejectionHandler0 = value;
                p._progressHandler0 = value;
                p._promise0 = value;
                p._receiver0 = value;
                p._settledValue = value
              }
              // Complete slack tracking, opt out of field-type tracking and           
              // stabilize map                                                         
              fillTypes({ a: 1 });
              fillTypes({ b: 2 });
              fillTypes({ c: 3 });
              fillTypes(1);
              fillTypes(function () {
              });
              fillTypes(undefined);
              fillTypes(false);
              fillTypes(new Promise(INTERNAL));
              CapturedTrace.setBounds(async.firstLineError, util.lastLineError);
              return Promise
            }
          },
          {
            './any.js': 1,
            './async.js': 2,
            './bind.js': 3,
            './call_get.js': 5,
            './cancel.js': 6,
            './captured_trace.js': 7,
            './catch_filter.js': 8,
            './context.js': 9,
            './debuggability.js': 10,
            './direct_resolve.js': 11,
            './each.js': 12,
            './errors.js': 13,
            './filter.js': 15,
            './finally.js': 16,
            './generators.js': 17,
            './join.js': 18,
            './map.js': 19,
            './method.js': 20,
            './nodeify.js': 21,
            './progress.js': 22,
            './promise_array.js': 24,
            './promise_resolver.js': 25,
            './promisify.js': 26,
            './props.js': 27,
            './race.js': 29,
            './reduce.js': 30,
            './settle.js': 32,
            './some.js': 33,
            './synchronous_inspection.js': 34,
            './thenables.js': 35,
            './timers.js': 36,
            './using.js': 37,
            './util.js': 38
          }
        ],
        24: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var isArray = util.isArray;
              function toResolutionValue(val) {
                switch (val) {
                case -2:
                  return [];
                case -3:
                  return {}
                }
              }
              function PromiseArray(values) {
                var promise = this._promise = new Promise(INTERNAL);
                var parent;
                if (values instanceof Promise) {
                  parent = values;
                  promise._propagateFrom(parent, 1 | 4)
                }
                this._values = values;
                this._length = 0;
                this._totalResolved = 0;
                this._init(undefined, -2)
              }
              PromiseArray.prototype.length = function () {
                return this._length
              };
              PromiseArray.prototype.promise = function () {
                return this._promise
              };
              PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
                var values = tryConvertToPromise(this._values, this._promise);
                if (values instanceof Promise) {
                  values = values._target();
                  this._values = values;
                  if (values._isFulfilled()) {
                    values = values._value();
                    if (!isArray(values)) {
                      var err = new Promise.TypeError('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n');
                      this.__hardReject__(err);
                      return
                    }
                  } else if (values._isPending()) {
                    values._then(init, this._reject, undefined, this, resolveValueIfEmpty);
                    return
                  } else {
                    this._reject(values._reason());
                    return
                  }
                } else if (!isArray(values)) {
                  this._promise._reject(apiRejection('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n')._reason());
                  return
                }
                if (values.length === 0) {
                  if (resolveValueIfEmpty === -5) {
                    this._resolveEmptyArray()
                  } else {
                    this._resolve(toResolutionValue(resolveValueIfEmpty))
                  }
                  return
                }
                var len = this.getActualLength(values.length);
                this._length = len;
                this._values = this.shouldCopyValues() ? new Array(len) : this._values;
                var promise = this._promise;
                for (var i = 0; i < len; ++i) {
                  var isResolved = this._isResolved();
                  var maybePromise = tryConvertToPromise(values[i], promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (isResolved) {
                      maybePromise._ignoreRejections()
                    } else if (maybePromise._isPending()) {
                      maybePromise._proxyPromiseArray(this, i)
                    } else if (maybePromise._isFulfilled()) {
                      this._promiseFulfilled(maybePromise._value(), i)
                    } else {
                      this._promiseRejected(maybePromise._reason(), i)
                    }
                  } else if (!isResolved) {
                    this._promiseFulfilled(maybePromise, i)
                  }
                }
              };
              PromiseArray.prototype._isResolved = function () {
                return this._values === null
              };
              PromiseArray.prototype._resolve = function (value) {
                this._values = null;
                this._promise._fulfill(value)
              };
              PromiseArray.prototype.__hardReject__ = PromiseArray.prototype._reject = function (reason) {
                this._values = null;
                this._promise._rejectCallback(reason, false, true)
              };
              PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
                this._promise._progress({
                  index: index,
                  value: progressValue
                })
              };
              PromiseArray.prototype._promiseFulfilled = function (value, index) {
                this._values[index] = value;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  this._resolve(this._values)
                }
              };
              PromiseArray.prototype._promiseRejected = function (reason, index) {
                this._totalResolved++;
                this._reject(reason)
              };
              PromiseArray.prototype.shouldCopyValues = function () {
                return true
              };
              PromiseArray.prototype.getActualLength = function (len) {
                return len
              };
              return PromiseArray
            }
          },
          { './util.js': 38 }
        ],
        25: [
          function (_dereq_, module, exports) {
            'use strict';
            var util = _dereq_('./util.js');
            var maybeWrapAsError = util.maybeWrapAsError;
            var errors = _dereq_('./errors.js');
            var TimeoutError = errors.TimeoutError;
            var OperationalError = errors.OperationalError;
            var haveGetters = util.haveGetters;
            var es5 = _dereq_('./es5.js');
            function isUntypedError(obj) {
              return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype
            }
            var rErrorKey = /^(?:name|message|stack|cause)$/;
            function wrapAsOperationalError(obj) {
              var ret;
              if (isUntypedError(obj)) {
                ret = new OperationalError(obj);
                ret.name = obj.name;
                ret.message = obj.message;
                ret.stack = obj.stack;
                var keys = es5.keys(obj);
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  if (!rErrorKey.test(key)) {
                    ret[key] = obj[key]
                  }
                }
                return ret
              }
              util.markAsOriginatingFromRejection(obj);
              return obj
            }
            function nodebackForPromise(promise) {
              return function (err, value) {
                if (promise === null)
                  return;
                if (err) {
                  var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
                  promise._attachExtraTrace(wrapped);
                  promise._reject(wrapped)
                } else if (arguments.length > 2) {
                  var $_len = arguments.length;
                  var args = new Array($_len - 1);
                  for (var $_i = 1; $_i < $_len; ++$_i) {
                    args[$_i - 1] = arguments[$_i]
                  }
                  promise._fulfill(args)
                } else {
                  promise._fulfill(value)
                }
                promise = null
              }
            }
            var PromiseResolver;
            if (!haveGetters) {
              PromiseResolver = function (promise) {
                this.promise = promise;
                this.asCallback = nodebackForPromise(promise);
                this.callback = this.asCallback
              }
            } else {
              PromiseResolver = function (promise) {
                this.promise = promise
              }
            }
            if (haveGetters) {
              var prop = {
                get: function () {
                  return nodebackForPromise(this.promise)
                }
              };
              es5.defineProperty(PromiseResolver.prototype, 'asCallback', prop);
              es5.defineProperty(PromiseResolver.prototype, 'callback', prop)
            }
            PromiseResolver._nodebackForPromise = nodebackForPromise;
            PromiseResolver.prototype.toString = function () {
              return '[object PromiseResolver]'
            };
            PromiseResolver.prototype.resolve = PromiseResolver.prototype.fulfill = function (value) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._resolveCallback(value)
            };
            PromiseResolver.prototype.reject = function (reason) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._rejectCallback(reason)
            };
            PromiseResolver.prototype.progress = function (value) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._progress(value)
            };
            PromiseResolver.prototype.cancel = function (err) {
              this.promise.cancel(err)
            };
            PromiseResolver.prototype.timeout = function () {
              this.reject(new TimeoutError('timeout'))
            };
            PromiseResolver.prototype.isResolved = function () {
              return this.promise.isResolved()
            };
            PromiseResolver.prototype.toJSON = function () {
              return this.promise.toJSON()
            };
            module.exports = PromiseResolver
          },
          {
            './errors.js': 13,
            './es5.js': 14,
            './util.js': 38
          }
        ],
        26: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var THIS = {};
              var util = _dereq_('./util.js');
              var nodebackForPromise = _dereq_('./promise_resolver.js')._nodebackForPromise;
              var withAppended = util.withAppended;
              var maybeWrapAsError = util.maybeWrapAsError;
              var canEvaluate = util.canEvaluate;
              var TypeError = _dereq_('./errors').TypeError;
              var defaultSuffix = 'Async';
              var defaultPromisified = { __isPromisified__: true };
              var noCopyProps = [
                'arity',
                'length',
                'name',
                'arguments',
                'caller',
                'callee',
                'prototype',
                '__isPromisified__'
              ];
              var noCopyPropsPattern = new RegExp('^(?:' + noCopyProps.join('|') + ')$');
              var defaultFilter = function (name) {
                return util.isIdentifier(name) && name.charAt(0) !== '_' && name !== 'constructor'
              };
              function propsFilter(key) {
                return !noCopyPropsPattern.test(key)
              }
              function isPromisified(fn) {
                try {
                  return fn.__isPromisified__ === true
                } catch (e) {
                  return false
                }
              }
              function hasPromisified(obj, key, suffix) {
                var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
                return val ? isPromisified(val) : false
              }
              function checkValid(ret, suffix, suffixRegexp) {
                for (var i = 0; i < ret.length; i += 2) {
                  var key = ret[i];
                  if (suffixRegexp.test(key)) {
                    var keyWithoutAsyncSuffix = key.replace(suffixRegexp, '');
                    for (var j = 0; j < ret.length; j += 2) {
                      if (ret[j] === keyWithoutAsyncSuffix) {
                        throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/iWrZbw\n".replace('%s', suffix))
                      }
                    }
                  }
                }
              }
              function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
                var keys = util.inheritedDataKeys(obj);
                var ret = [];
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  var value = obj[key];
                  var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj);
                  if (typeof value === 'function' && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj, passesDefaultFilter)) {
                    ret.push(key, value)
                  }
                }
                checkValid(ret, suffix, suffixRegexp);
                return ret
              }
              var escapeIdentRegex = function (str) {
                return str.replace(/([$])/, '\\$')
              };
              var makeNodePromisifiedEval;
              if (!true) {
                var switchCaseArgumentOrder = function (likelyArgumentCount) {
                  var ret = [likelyArgumentCount];
                  var min = Math.max(0, likelyArgumentCount - 1 - 3);
                  for (var i = likelyArgumentCount - 1; i >= min; --i) {
                    ret.push(i)
                  }
                  for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                    ret.push(i)
                  }
                  return ret
                };
                var argumentSequence = function (argumentCount) {
                  return util.filledRange(argumentCount, '_arg', '')
                };
                var parameterDeclaration = function (parameterCount) {
                  return util.filledRange(Math.max(parameterCount, 3), '_arg', '')
                };
                var parameterCount = function (fn) {
                  if (typeof fn.length === 'number') {
                    return Math.max(Math.min(fn.length, 1023 + 1), 0)
                  }
                  return 0
                };
                makeNodePromisifiedEval = function (callback, receiver, originalName, fn) {
                  var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                  var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                  var shouldProxyThis = typeof callback === 'string' || receiver === THIS;
                  function generateCallForArgumentCount(count) {
                    var args = argumentSequence(count).join(', ');
                    var comma = count > 0 ? ', ' : '';
                    var ret;
                    if (shouldProxyThis) {
                      ret = 'ret = callback.call(this, {{args}}, nodeback); break;\n'
                    } else {
                      ret = receiver === undefined ? 'ret = callback({{args}}, nodeback); break;\n' : 'ret = callback.call(receiver, {{args}}, nodeback); break;\n'
                    }
                    return ret.replace('{{args}}', args).replace(', ', comma)
                  }
                  function generateArgumentSwitchCase() {
                    var ret = '';
                    for (var i = 0; i < argumentOrder.length; ++i) {
                      ret += 'case ' + argumentOrder[i] + ':' + generateCallForArgumentCount(argumentOrder[i])
                    }
                    ret += '                                                             \n        default:                                                             \n            var args = new Array(len + 1);                                   \n            var i = 0;                                                       \n            for (var i = 0; i < len; ++i) {                                  \n               args[i] = arguments[i];                                       \n            }                                                                \n            args[i] = nodeback;                                              \n            [CodeForCall]                                                    \n            break;                                                           \n        '.replace('[CodeForCall]', shouldProxyThis ? 'ret = callback.apply(this, args);\n' : 'ret = callback.apply(receiver, args);\n');
                    return ret
                  }
                  var getFunctionCode = typeof callback === 'string' ? "this != null ? this['" + callback + "'] : fn" : 'fn';
                  return new Function('Promise', 'fn', 'receiver', 'withAppended', 'maybeWrapAsError', 'nodebackForPromise', 'tryCatch', 'errorObj', 'notEnumerableProp', 'INTERNAL', "'use strict';                            \n        var ret = function (Parameters) {                                    \n            'use strict';                                                    \n            var len = arguments.length;                                      \n            var promise = new Promise(INTERNAL);                             \n            promise._captureStackTrace();                                    \n            var nodeback = nodebackForPromise(promise);                      \n            var ret;                                                         \n            var callback = tryCatch([GetFunctionCode]);                      \n            switch(len) {                                                    \n                [CodeForSwitchCase]                                          \n            }                                                                \n            if (ret === errorObj) {                                          \n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n            }                                                                \n            return promise;                                                  \n        };                                                                   \n        notEnumerableProp(ret, '__isPromisified__', true);                   \n        return ret;                                                          \n        ".replace('Parameters', parameterDeclaration(newParameterCount)).replace('[CodeForSwitchCase]', generateArgumentSwitchCase()).replace('[GetFunctionCode]', getFunctionCode))(Promise, fn, receiver, withAppended, maybeWrapAsError, nodebackForPromise, util.tryCatch, util.errorObj, util.notEnumerableProp, INTERNAL)
                }
              }
              function makeNodePromisifiedClosure(callback, receiver, _, fn) {
                var defaultThis = function () {
                  return this
                }();
                var method = callback;
                if (typeof method === 'string') {
                  callback = fn
                }
                function promisified() {
                  var _receiver = receiver;
                  if (receiver === THIS)
                    _receiver = this;
                  var promise = new Promise(INTERNAL);
                  promise._captureStackTrace();
                  var cb = typeof method === 'string' && this !== defaultThis ? this[method] : callback;
                  var fn = nodebackForPromise(promise);
                  try {
                    cb.apply(_receiver, withAppended(arguments, fn))
                  } catch (e) {
                    promise._rejectCallback(maybeWrapAsError(e), true, true)
                  }
                  return promise
                }
                util.notEnumerableProp(promisified, '__isPromisified__', true);
                return promisified
              }
              var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
              function promisifyAll(obj, suffix, filter, promisifier) {
                var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + '$');
                var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
                for (var i = 0, len = methods.length; i < len; i += 2) {
                  var key = methods[i];
                  var fn = methods[i + 1];
                  var promisifiedKey = key + suffix;
                  obj[promisifiedKey] = promisifier === makeNodePromisified ? makeNodePromisified(key, THIS, key, fn, suffix) : promisifier(fn, function () {
                    return makeNodePromisified(key, THIS, key, fn, suffix)
                  })
                }
                util.toFastProperties(obj);
                return obj
              }
              function promisify(callback, receiver) {
                return makeNodePromisified(callback, receiver, undefined, callback)
              }
              Promise.promisify = function (fn, receiver) {
                if (typeof fn !== 'function') {
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                if (isPromisified(fn)) {
                  return fn
                }
                var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
                util.copyDescriptors(fn, ret, propsFilter);
                return ret
              };
              Promise.promisifyAll = function (target, options) {
                if (typeof target !== 'function' && typeof target !== 'object') {
                  throw new TypeError('the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/9ITlV0\n')
                }
                options = Object(options);
                var suffix = options.suffix;
                if (typeof suffix !== 'string')
                  suffix = defaultSuffix;
                var filter = options.filter;
                if (typeof filter !== 'function')
                  filter = defaultFilter;
                var promisifier = options.promisifier;
                if (typeof promisifier !== 'function')
                  promisifier = makeNodePromisified;
                if (!util.isIdentifier(suffix)) {
                  throw new RangeError('suffix must be a valid identifier\n\n    See http://goo.gl/8FZo5V\n')
                }
                var keys = util.inheritedDataKeys(target);
                for (var i = 0; i < keys.length; ++i) {
                  var value = target[keys[i]];
                  if (keys[i] !== 'constructor' && util.isClass(value)) {
                    promisifyAll(value.prototype, suffix, filter, promisifier);
                    promisifyAll(value, suffix, filter, promisifier)
                  }
                }
                return promisifyAll(target, suffix, filter, promisifier)
              }
            }
          },
          {
            './errors': 13,
            './promise_resolver.js': 25,
            './util.js': 38
          }
        ],
        27: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var isObject = util.isObject;
              var es5 = _dereq_('./es5.js');
              function PropertiesPromiseArray(obj) {
                var keys = es5.keys(obj);
                var len = keys.length;
                var values = new Array(len * 2);
                for (var i = 0; i < len; ++i) {
                  var key = keys[i];
                  values[i] = obj[key];
                  values[i + len] = key
                }
                this.constructor$(values)
              }
              util.inherits(PropertiesPromiseArray, PromiseArray);
              PropertiesPromiseArray.prototype._init = function () {
                this._init$(undefined, -3)
              };
              PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
                this._values[index] = value;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  var val = {};
                  var keyOffset = this.length();
                  for (var i = 0, len = this.length(); i < len; ++i) {
                    val[this._values[i + keyOffset]] = this._values[i]
                  }
                  this._resolve(val)
                }
              };
              PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
                this._promise._progress({
                  key: this._values[index + this.length()],
                  value: value
                })
              };
              PropertiesPromiseArray.prototype.shouldCopyValues = function () {
                return false
              };
              PropertiesPromiseArray.prototype.getActualLength = function (len) {
                return len >> 1
              };
              function props(promises) {
                var ret;
                var castValue = tryConvertToPromise(promises);
                if (!isObject(castValue)) {
                  return apiRejection('cannot await properties of a non-object\n\n    See http://goo.gl/OsFKC8\n')
                } else if (castValue instanceof Promise) {
                  ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined)
                } else {
                  ret = new PropertiesPromiseArray(castValue).promise()
                }
                if (castValue instanceof Promise) {
                  ret._propagateFrom(castValue, 4)
                }
                return ret
              }
              Promise.prototype.props = function () {
                return props(this)
              };
              Promise.props = function (promises) {
                return props(promises)
              }
            }
          },
          {
            './es5.js': 14,
            './util.js': 38
          }
        ],
        28: [
          function (_dereq_, module, exports) {
            'use strict';
            function arrayMove(src, srcIndex, dst, dstIndex, len) {
              for (var j = 0; j < len; ++j) {
                dst[j + dstIndex] = src[j + srcIndex];
                src[j + srcIndex] = void 0
              }
            }
            function Queue(capacity) {
              this._capacity = capacity;
              this._length = 0;
              this._front = 0
            }
            Queue.prototype._willBeOverCapacity = function (size) {
              return this._capacity < size
            };
            Queue.prototype._pushOne = function (arg) {
              var length = this.length();
              this._checkCapacity(length + 1);
              var i = this._front + length & this._capacity - 1;
              this[i] = arg;
              this._length = length + 1
            };
            Queue.prototype._unshiftOne = function (value) {
              var capacity = this._capacity;
              this._checkCapacity(this.length() + 1);
              var front = this._front;
              var i = (front - 1 & capacity - 1 ^ capacity) - capacity;
              this[i] = value;
              this._front = i;
              this._length = this.length() + 1
            };
            Queue.prototype.unshift = function (fn, receiver, arg) {
              this._unshiftOne(arg);
              this._unshiftOne(receiver);
              this._unshiftOne(fn)
            };
            Queue.prototype.push = function (fn, receiver, arg) {
              var length = this.length() + 3;
              if (this._willBeOverCapacity(length)) {
                this._pushOne(fn);
                this._pushOne(receiver);
                this._pushOne(arg);
                return
              }
              var j = this._front + length - 3;
              this._checkCapacity(length);
              var wrapMask = this._capacity - 1;
              this[j + 0 & wrapMask] = fn;
              this[j + 1 & wrapMask] = receiver;
              this[j + 2 & wrapMask] = arg;
              this._length = length
            };
            Queue.prototype.shift = function () {
              var front = this._front, ret = this[front];
              this[front] = undefined;
              this._front = front + 1 & this._capacity - 1;
              this._length--;
              return ret
            };
            Queue.prototype.length = function () {
              return this._length
            };
            Queue.prototype._checkCapacity = function (size) {
              if (this._capacity < size) {
                this._resizeTo(this._capacity << 1)
              }
            };
            Queue.prototype._resizeTo = function (capacity) {
              var oldCapacity = this._capacity;
              this._capacity = capacity;
              var front = this._front;
              var length = this._length;
              var moveItemsCount = front + length & oldCapacity - 1;
              arrayMove(this, 0, this, oldCapacity, moveItemsCount)
            };
            module.exports = Queue
          },
          {}
        ],
        29: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var isArray = _dereq_('./util.js').isArray;
              var raceLater = function (promise) {
                return promise.then(function (array) {
                  return race(array, promise)
                })
              };
              function race(promises, parent) {
                var maybePromise = tryConvertToPromise(promises);
                if (maybePromise instanceof Promise) {
                  return raceLater(maybePromise)
                } else if (!isArray(promises)) {
                  return apiRejection('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n')
                }
                var ret = new Promise(INTERNAL);
                if (parent !== undefined) {
                  ret._propagateFrom(parent, 4 | 1)
                }
                var fulfill = ret._fulfill;
                var reject = ret._reject;
                for (var i = 0, len = promises.length; i < len; ++i) {
                  var val = promises[i];
                  if (val === undefined && !(i in promises)) {
                    continue
                  }
                  Promise.cast(val)._then(fulfill, reject, undefined, ret, null)
                }
                return ret
              }
              Promise.race = function (promises) {
                return race(promises, undefined)
              };
              Promise.prototype.race = function () {
                return race(this, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        30: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              function ReductionPromiseArray(promises, fn, accum, _each) {
                this.constructor$(promises);
                this._promise._captureStackTrace();
                this._preservedValues = _each === INTERNAL ? [] : null;
                this._zerothIsAccum = accum === undefined;
                this._gotAccum = false;
                this._reducingIndex = this._zerothIsAccum ? 1 : 0;
                this._valuesPhase = undefined;
                var maybePromise = tryConvertToPromise(accum, this._promise);
                var rejected = false;
                var isPromise = maybePromise instanceof Promise;
                if (isPromise) {
                  maybePromise = maybePromise._target();
                  if (maybePromise._isPending()) {
                    maybePromise._proxyPromiseArray(this, -1)
                  } else if (maybePromise._isFulfilled()) {
                    accum = maybePromise._value();
                    this._gotAccum = true
                  } else {
                    this._reject(maybePromise._reason());
                    rejected = true
                  }
                }
                if (!(isPromise || this._zerothIsAccum))
                  this._gotAccum = true;
                var domain = getDomain();
                this._callback = domain === null ? fn : domain.bind(fn);
                this._accum = accum;
                if (!rejected)
                  async.invoke(init, this, undefined)
              }
              function init() {
                this._init$(undefined, -5)
              }
              util.inherits(ReductionPromiseArray, PromiseArray);
              ReductionPromiseArray.prototype._init = function () {
              };
              ReductionPromiseArray.prototype._resolveEmptyArray = function () {
                if (this._gotAccum || this._zerothIsAccum) {
                  this._resolve(this._preservedValues !== null ? [] : this._accum)
                }
              };
              ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var values = this._values;
                values[index] = value;
                var length = this.length();
                var preservedValues = this._preservedValues;
                var isEach = preservedValues !== null;
                var gotAccum = this._gotAccum;
                var valuesPhase = this._valuesPhase;
                var valuesPhaseIndex;
                if (!valuesPhase) {
                  valuesPhase = this._valuesPhase = new Array(length);
                  for (valuesPhaseIndex = 0; valuesPhaseIndex < length; ++valuesPhaseIndex) {
                    valuesPhase[valuesPhaseIndex] = 0
                  }
                }
                valuesPhaseIndex = valuesPhase[index];
                if (index === 0 && this._zerothIsAccum) {
                  this._accum = value;
                  this._gotAccum = gotAccum = true;
                  valuesPhase[index] = valuesPhaseIndex === 0 ? 1 : 2
                } else if (index === -1) {
                  this._accum = value;
                  this._gotAccum = gotAccum = true
                } else {
                  if (valuesPhaseIndex === 0) {
                    valuesPhase[index] = 1
                  } else {
                    valuesPhase[index] = 2;
                    this._accum = value
                  }
                }
                if (!gotAccum)
                  return;
                var callback = this._callback;
                var receiver = this._promise._boundValue();
                var ret;
                for (var i = this._reducingIndex; i < length; ++i) {
                  valuesPhaseIndex = valuesPhase[i];
                  if (valuesPhaseIndex === 2) {
                    this._reducingIndex = i + 1;
                    continue
                  }
                  if (valuesPhaseIndex !== 1)
                    return;
                  value = values[i];
                  this._promise._pushContext();
                  if (isEach) {
                    preservedValues.push(value);
                    ret = tryCatch(callback).call(receiver, value, i, length)
                  } else {
                    ret = tryCatch(callback).call(receiver, this._accum, value, i, length)
                  }
                  this._promise._popContext();
                  if (ret === errorObj)
                    return this._reject(ret.e);
                  var maybePromise = tryConvertToPromise(ret, this._promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (maybePromise._isPending()) {
                      valuesPhase[i] = 4;
                      return maybePromise._proxyPromiseArray(this, i)
                    } else if (maybePromise._isFulfilled()) {
                      ret = maybePromise._value()
                    } else {
                      return this._reject(maybePromise._reason())
                    }
                  }
                  this._reducingIndex = i + 1;
                  this._accum = ret
                }
                this._resolve(isEach ? preservedValues : this._accum)
              };
              function reduce(promises, fn, initialValue, _each) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
                return array.promise()
              }
              Promise.prototype.reduce = function (fn, initialValue) {
                return reduce(this, fn, initialValue, null)
              };
              Promise.reduce = function (promises, fn, initialValue, _each) {
                return reduce(promises, fn, initialValue, _each)
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        31: [
          function (_dereq_, module, exports) {
            'use strict';
            var schedule;
            var util = _dereq_('./util');
            var noAsyncScheduler = function () {
              throw new Error('No async scheduler available\n\n    See http://goo.gl/m3OTXk\n')
            };
            if (util.isNode && typeof MutationObserver === 'undefined') {
              var GlobalSetImmediate = global.setImmediate;
              var ProcessNextTick = process.nextTick;
              schedule = util.isRecentNode ? function (fn) {
                GlobalSetImmediate.call(global, fn)
              } : function (fn) {
                ProcessNextTick.call(process, fn)
              }
            } else if (typeof MutationObserver !== 'undefined' && !(typeof window !== 'undefined' && window.navigator && window.navigator.standalone)) {
              schedule = function (fn) {
                var div = document.createElement('div');
                var observer = new MutationObserver(fn);
                observer.observe(div, { attributes: true });
                return function () {
                  div.classList.toggle('foo')
                }
              };
              schedule.isStatic = true
            } else if (typeof setImmediate !== 'undefined') {
              schedule = function (fn) {
                setImmediate(fn)
              }
            } else if (typeof setTimeout !== 'undefined') {
              schedule = function (fn) {
                setTimeout(fn, 0)
              }
            } else {
              schedule = noAsyncScheduler
            }
            module.exports = schedule
          },
          { './util': 38 }
        ],
        32: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray) {
              var PromiseInspection = Promise.PromiseInspection;
              var util = _dereq_('./util.js');
              function SettledPromiseArray(values) {
                this.constructor$(values)
              }
              util.inherits(SettledPromiseArray, PromiseArray);
              SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
                this._values[index] = inspection;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  this._resolve(this._values)
                }
              };
              SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var ret = new PromiseInspection;
                ret._bitField = 268435456;
                ret._settledValue = value;
                this._promiseResolved(index, ret)
              };
              SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
                var ret = new PromiseInspection;
                ret._bitField = 134217728;
                ret._settledValue = reason;
                this._promiseResolved(index, ret)
              };
              Promise.settle = function (promises) {
                return new SettledPromiseArray(promises).promise()
              };
              Promise.prototype.settle = function () {
                return new SettledPromiseArray(this).promise()
              }
            }
          },
          { './util.js': 38 }
        ],
        33: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection) {
              var util = _dereq_('./util.js');
              var RangeError = _dereq_('./errors.js').RangeError;
              var AggregateError = _dereq_('./errors.js').AggregateError;
              var isArray = util.isArray;
              function SomePromiseArray(values) {
                this.constructor$(values);
                this._howMany = 0;
                this._unwrap = false;
                this._initialized = false
              }
              util.inherits(SomePromiseArray, PromiseArray);
              SomePromiseArray.prototype._init = function () {
                if (!this._initialized) {
                  return
                }
                if (this._howMany === 0) {
                  this._resolve([]);
                  return
                }
                this._init$(undefined, -5);
                var isArrayResolved = isArray(this._values);
                if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
                  this._reject(this._getRangeError(this.length()))
                }
              };
              SomePromiseArray.prototype.init = function () {
                this._initialized = true;
                this._init()
              };
              SomePromiseArray.prototype.setUnwrap = function () {
                this._unwrap = true
              };
              SomePromiseArray.prototype.howMany = function () {
                return this._howMany
              };
              SomePromiseArray.prototype.setHowMany = function (count) {
                this._howMany = count
              };
              SomePromiseArray.prototype._promiseFulfilled = function (value) {
                this._addFulfilled(value);
                if (this._fulfilled() === this.howMany()) {
                  this._values.length = this.howMany();
                  if (this.howMany() === 1 && this._unwrap) {
                    this._resolve(this._values[0])
                  } else {
                    this._resolve(this._values)
                  }
                }
              };
              SomePromiseArray.prototype._promiseRejected = function (reason) {
                this._addRejected(reason);
                if (this.howMany() > this._canPossiblyFulfill()) {
                  var e = new AggregateError;
                  for (var i = this.length(); i < this._values.length; ++i) {
                    e.push(this._values[i])
                  }
                  this._reject(e)
                }
              };
              SomePromiseArray.prototype._fulfilled = function () {
                return this._totalResolved
              };
              SomePromiseArray.prototype._rejected = function () {
                return this._values.length - this.length()
              };
              SomePromiseArray.prototype._addRejected = function (reason) {
                this._values.push(reason)
              };
              SomePromiseArray.prototype._addFulfilled = function (value) {
                this._values[this._totalResolved++] = value
              };
              SomePromiseArray.prototype._canPossiblyFulfill = function () {
                return this.length() - this._rejected()
              };
              SomePromiseArray.prototype._getRangeError = function (count) {
                var message = 'Input array must contain at least ' + this._howMany + ' items but contains only ' + count + ' items';
                return new RangeError(message)
              };
              SomePromiseArray.prototype._resolveEmptyArray = function () {
                this._reject(this._getRangeError(0))
              };
              function some(promises, howMany) {
                if ((howMany | 0) !== howMany || howMany < 0) {
                  return apiRejection('expecting a positive integer\n\n    See http://goo.gl/1wAmHx\n')
                }
                var ret = new SomePromiseArray(promises);
                var promise = ret.promise();
                ret.setHowMany(howMany);
                ret.init();
                return promise
              }
              Promise.some = function (promises, howMany) {
                return some(promises, howMany)
              };
              Promise.prototype.some = function (howMany) {
                return some(this, howMany)
              };
              Promise._SomePromiseArray = SomePromiseArray
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        34: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              function PromiseInspection(promise) {
                if (promise !== undefined) {
                  promise = promise._target();
                  this._bitField = promise._bitField;
                  this._settledValue = promise._settledValue
                } else {
                  this._bitField = 0;
                  this._settledValue = undefined
                }
              }
              PromiseInspection.prototype.value = function () {
                if (!this.isFulfilled()) {
                  throw new TypeError('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n')
                }
                return this._settledValue
              };
              PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function () {
                if (!this.isRejected()) {
                  throw new TypeError('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n')
                }
                return this._settledValue
              };
              PromiseInspection.prototype.isFulfilled = Promise.prototype._isFulfilled = function () {
                return (this._bitField & 268435456) > 0
              };
              PromiseInspection.prototype.isRejected = Promise.prototype._isRejected = function () {
                return (this._bitField & 134217728) > 0
              };
              PromiseInspection.prototype.isPending = Promise.prototype._isPending = function () {
                return (this._bitField & 402653184) === 0
              };
              PromiseInspection.prototype.isResolved = Promise.prototype._isResolved = function () {
                return (this._bitField & 402653184) > 0
              };
              Promise.prototype.isPending = function () {
                return this._target()._isPending()
              };
              Promise.prototype.isRejected = function () {
                return this._target()._isRejected()
              };
              Promise.prototype.isFulfilled = function () {
                return this._target()._isFulfilled()
              };
              Promise.prototype.isResolved = function () {
                return this._target()._isResolved()
              };
              Promise.prototype._value = function () {
                return this._settledValue
              };
              Promise.prototype._reason = function () {
                this._unsetRejectionIsUnhandled();
                return this._settledValue
              };
              Promise.prototype.value = function () {
                var target = this._target();
                if (!target.isFulfilled()) {
                  throw new TypeError('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n')
                }
                return target._settledValue
              };
              Promise.prototype.reason = function () {
                var target = this._target();
                if (!target.isRejected()) {
                  throw new TypeError('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n')
                }
                target._unsetRejectionIsUnhandled();
                return target._settledValue
              };
              Promise.PromiseInspection = PromiseInspection
            }
          },
          {}
        ],
        35: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var util = _dereq_('./util.js');
              var errorObj = util.errorObj;
              var isObject = util.isObject;
              function tryConvertToPromise(obj, context) {
                if (isObject(obj)) {
                  if (obj instanceof Promise) {
                    return obj
                  } else if (isAnyBluebirdPromise(obj)) {
                    var ret = new Promise(INTERNAL);
                    obj._then(ret._fulfillUnchecked, ret._rejectUncheckedCheckError, ret._progressUnchecked, ret, null);
                    return ret
                  }
                  var then = util.tryCatch(getThen)(obj);
                  if (then === errorObj) {
                    if (context)
                      context._pushContext();
                    var ret = Promise.reject(then.e);
                    if (context)
                      context._popContext();
                    return ret
                  } else if (typeof then === 'function') {
                    return doThenable(obj, then, context)
                  }
                }
                return obj
              }
              function getThen(obj) {
                return obj.then
              }
              var hasProp = {}.hasOwnProperty;
              function isAnyBluebirdPromise(obj) {
                return hasProp.call(obj, '_promise0')
              }
              function doThenable(x, then, context) {
                var promise = new Promise(INTERNAL);
                var ret = promise;
                if (context)
                  context._pushContext();
                promise._captureStackTrace();
                if (context)
                  context._popContext();
                var synchronous = true;
                var result = util.tryCatch(then).call(x, resolveFromThenable, rejectFromThenable, progressFromThenable);
                synchronous = false;
                if (promise && result === errorObj) {
                  promise._rejectCallback(result.e, true, true);
                  promise = null
                }
                function resolveFromThenable(value) {
                  if (!promise)
                    return;
                  promise._resolveCallback(value);
                  promise = null
                }
                function rejectFromThenable(reason) {
                  if (!promise)
                    return;
                  promise._rejectCallback(reason, synchronous, true);
                  promise = null
                }
                function progressFromThenable(value) {
                  if (!promise)
                    return;
                  if (typeof promise._progress === 'function') {
                    promise._progress(value)
                  }
                }
                return ret
              }
              return tryConvertToPromise
            }
          },
          { './util.js': 38 }
        ],
        36: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var util = _dereq_('./util.js');
              var TimeoutError = Promise.TimeoutError;
              var afterTimeout = function (promise, message) {
                if (!promise.isPending())
                  return;
                if (typeof message !== 'string') {
                  message = 'operation timed out'
                }
                var err = new TimeoutError(message);
                util.markAsOriginatingFromRejection(err);
                promise._attachExtraTrace(err);
                promise._cancel(err)
              };
              var afterValue = function (value) {
                return delay(+this).thenReturn(value)
              };
              var delay = Promise.delay = function (value, ms) {
                if (ms === undefined) {
                  ms = value;
                  value = undefined;
                  var ret = new Promise(INTERNAL);
                  setTimeout(function () {
                    ret._fulfill()
                  }, ms);
                  return ret
                }
                ms = +ms;
                return Promise.resolve(value)._then(afterValue, null, null, ms, undefined)
              };
              Promise.prototype.delay = function (ms) {
                return delay(this, ms)
              };
              function successClear(value) {
                var handle = this;
                if (handle instanceof Number)
                  handle = +handle;
                clearTimeout(handle);
                return value
              }
              function failureClear(reason) {
                var handle = this;
                if (handle instanceof Number)
                  handle = +handle;
                clearTimeout(handle);
                throw reason
              }
              Promise.prototype.timeout = function (ms, message) {
                ms = +ms;
                var ret = this.then().cancellable();
                ret._cancellationParent = this;
                var handle = setTimeout(function timeoutTimeout() {
                  afterTimeout(ret, message)
                }, ms);
                return ret._then(successClear, failureClear, undefined, handle, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        37: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, apiRejection, tryConvertToPromise, createContext) {
              var TypeError = _dereq_('./errors.js').TypeError;
              var inherits = _dereq_('./util.js').inherits;
              var PromiseInspection = Promise.PromiseInspection;
              function inspectionMapper(inspections) {
                var len = inspections.length;
                for (var i = 0; i < len; ++i) {
                  var inspection = inspections[i];
                  if (inspection.isRejected()) {
                    return Promise.reject(inspection.error())
                  }
                  inspections[i] = inspection._settledValue
                }
                return inspections
              }
              function thrower(e) {
                setTimeout(function () {
                  throw e
                }, 0)
              }
              function castPreservingDisposable(thenable) {
                var maybePromise = tryConvertToPromise(thenable);
                if (maybePromise !== thenable && typeof thenable._isDisposable === 'function' && typeof thenable._getDisposer === 'function' && thenable._isDisposable()) {
                  maybePromise._setDisposable(thenable._getDisposer())
                }
                return maybePromise
              }
              function dispose(resources, inspection) {
                var i = 0;
                var len = resources.length;
                var ret = Promise.defer();
                function iterator() {
                  if (i >= len)
                    return ret.resolve();
                  var maybePromise = castPreservingDisposable(resources[i++]);
                  if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
                    try {
                      maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise)
                    } catch (e) {
                      return thrower(e)
                    }
                    if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower, null, null, null)
                    }
                  }
                  iterator()
                }
                iterator();
                return ret.promise
              }
              function disposerSuccess(value) {
                var inspection = new PromiseInspection;
                inspection._settledValue = value;
                inspection._bitField = 268435456;
                return dispose(this, inspection).thenReturn(value)
              }
              function disposerFail(reason) {
                var inspection = new PromiseInspection;
                inspection._settledValue = reason;
                inspection._bitField = 134217728;
                return dispose(this, inspection).thenThrow(reason)
              }
              function Disposer(data, promise, context) {
                this._data = data;
                this._promise = promise;
                this._context = context
              }
              Disposer.prototype.data = function () {
                return this._data
              };
              Disposer.prototype.promise = function () {
                return this._promise
              };
              Disposer.prototype.resource = function () {
                if (this.promise().isFulfilled()) {
                  return this.promise().value()
                }
                return null
              };
              Disposer.prototype.tryDispose = function (inspection) {
                var resource = this.resource();
                var context = this._context;
                if (context !== undefined)
                  context._pushContext();
                var ret = resource !== null ? this.doDispose(resource, inspection) : null;
                if (context !== undefined)
                  context._popContext();
                this._promise._unsetDisposable();
                this._data = null;
                return ret
              };
              Disposer.isDisposer = function (d) {
                return d != null && typeof d.resource === 'function' && typeof d.tryDispose === 'function'
              };
              function FunctionDisposer(fn, promise, context) {
                this.constructor$(fn, promise, context)
              }
              inherits(FunctionDisposer, Disposer);
              FunctionDisposer.prototype.doDispose = function (resource, inspection) {
                var fn = this.data();
                return fn.call(resource, resource, inspection)
              };
              function maybeUnwrapDisposer(value) {
                if (Disposer.isDisposer(value)) {
                  this.resources[this.index]._setDisposable(value);
                  return value.promise()
                }
                return value
              }
              Promise.using = function () {
                var len = arguments.length;
                if (len < 2)
                  return apiRejection('you must pass at least 2 arguments to Promise.using');
                var fn = arguments[len - 1];
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                len--;
                var resources = new Array(len);
                for (var i = 0; i < len; ++i) {
                  var resource = arguments[i];
                  if (Disposer.isDisposer(resource)) {
                    var disposer = resource;
                    resource = resource.promise();
                    resource._setDisposable(disposer)
                  } else {
                    var maybePromise = tryConvertToPromise(resource);
                    if (maybePromise instanceof Promise) {
                      resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
                        resources: resources,
                        index: i
                      }, undefined)
                    }
                  }
                  resources[i] = resource
                }
                var promise = Promise.settle(resources).then(inspectionMapper).then(function (vals) {
                  promise._pushContext();
                  var ret;
                  try {
                    ret = fn.apply(undefined, vals)
                  } finally {
                    promise._popContext()
                  }
                  return ret
                })._then(disposerSuccess, disposerFail, undefined, resources, undefined);
                resources.promise = promise;
                return promise
              };
              Promise.prototype._setDisposable = function (disposer) {
                this._bitField = this._bitField | 262144;
                this._disposer = disposer
              };
              Promise.prototype._isDisposable = function () {
                return (this._bitField & 262144) > 0
              };
              Promise.prototype._getDisposer = function () {
                return this._disposer
              };
              Promise.prototype._unsetDisposable = function () {
                this._bitField = this._bitField & ~262144;
                this._disposer = undefined
              };
              Promise.prototype.disposer = function (fn) {
                if (typeof fn === 'function') {
                  return new FunctionDisposer(fn, this, createContext())
                }
                throw new TypeError
              }
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        38: [
          function (_dereq_, module, exports) {
            'use strict';
            var es5 = _dereq_('./es5.js');
            var canEvaluate = typeof navigator == 'undefined';
            var haveGetters = function () {
              try {
                var o = {};
                es5.defineProperty(o, 'f', {
                  get: function () {
                    return 3
                  }
                });
                return o.f === 3
              } catch (e) {
                return false
              }
            }();
            var errorObj = { e: {} };
            var tryCatchTarget;
            function tryCatcher() {
              try {
                var target = tryCatchTarget;
                tryCatchTarget = null;
                return target.apply(this, arguments)
              } catch (e) {
                errorObj.e = e;
                return errorObj
              }
            }
            function tryCatch(fn) {
              tryCatchTarget = fn;
              return tryCatcher
            }
            var inherits = function (Child, Parent) {
              var hasProp = {}.hasOwnProperty;
              function T() {
                this.constructor = Child;
                this.constructor$ = Parent;
                for (var propertyName in Parent.prototype) {
                  if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== '$') {
                    this[propertyName + '$'] = Parent.prototype[propertyName]
                  }
                }
              }
              T.prototype = Parent.prototype;
              Child.prototype = new T;
              return Child.prototype
            };
            function isPrimitive(val) {
              return val == null || val === true || val === false || typeof val === 'string' || typeof val === 'number'
            }
            function isObject(value) {
              return !isPrimitive(value)
            }
            function maybeWrapAsError(maybeError) {
              if (!isPrimitive(maybeError))
                return maybeError;
              return new Error(safeToString(maybeError))
            }
            function withAppended(target, appendee) {
              var len = target.length;
              var ret = new Array(len + 1);
              var i;
              for (i = 0; i < len; ++i) {
                ret[i] = target[i]
              }
              ret[i] = appendee;
              return ret
            }
            function getDataPropertyOrDefault(obj, key, defaultValue) {
              if (es5.isES5) {
                var desc = Object.getOwnPropertyDescriptor(obj, key);
                if (desc != null) {
                  return desc.get == null && desc.set == null ? desc.value : defaultValue
                }
              } else {
                return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined
              }
            }
            function notEnumerableProp(obj, name, value) {
              if (isPrimitive(obj))
                return obj;
              var descriptor = {
                value: value,
                configurable: true,
                enumerable: false,
                writable: true
              };
              es5.defineProperty(obj, name, descriptor);
              return obj
            }
            function thrower(r) {
              throw r
            }
            var inheritedDataKeys = function () {
              var excludedPrototypes = [
                Array.prototype,
                Object.prototype,
                Function.prototype
              ];
              var isExcludedProto = function (val) {
                for (var i = 0; i < excludedPrototypes.length; ++i) {
                  if (excludedPrototypes[i] === val) {
                    return true
                  }
                }
                return false
              };
              if (es5.isES5) {
                var getKeys = Object.getOwnPropertyNames;
                return function (obj) {
                  var ret = [];
                  var visitedKeys = Object.create(null);
                  while (obj != null && !isExcludedProto(obj)) {
                    var keys;
                    try {
                      keys = getKeys(obj)
                    } catch (e) {
                      return ret
                    }
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key])
                        continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key)
                      }
                    }
                    obj = es5.getPrototypeOf(obj)
                  }
                  return ret
                }
              } else {
                var hasProp = {}.hasOwnProperty;
                return function (obj) {
                  if (isExcludedProto(obj))
                    return [];
                  var ret = [];
                  /*jshint forin:false */
                  enumeration:
                    for (var key in obj) {
                      if (hasProp.call(obj, key)) {
                        ret.push(key)
                      } else {
                        for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration
                          }
                        }
                        ret.push(key)
                      }
                    }
                  return ret
                }
              }
            }();
            var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
            function isClass(fn) {
              try {
                if (typeof fn === 'function') {
                  var keys = es5.names(fn.prototype);
                  var hasMethods = es5.isES5 && keys.length > 1;
                  var hasMethodsOtherThanConstructor = keys.length > 0 && !(keys.length === 1 && keys[0] === 'constructor');
                  var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + '') && es5.names(fn).length > 0;
                  if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) {
                    return true
                  }
                }
                return false
              } catch (e) {
                return false
              }
            }
            function toFastProperties(obj) {
              /*jshint -W027,-W055,-W031*/
              function f() {
              }
              f.prototype = obj;
              var l = 8;
              while (l--)
                new f;
              return obj;
              eval(obj)
            }
            var rident = /^[a-z$_][a-z$_0-9]*$/i;
            function isIdentifier(str) {
              return rident.test(str)
            }
            function filledRange(count, prefix, suffix) {
              var ret = new Array(count);
              for (var i = 0; i < count; ++i) {
                ret[i] = prefix + i + suffix
              }
              return ret
            }
            function safeToString(obj) {
              try {
                return obj + ''
              } catch (e) {
                return '[no string representation]'
              }
            }
            function markAsOriginatingFromRejection(e) {
              try {
                notEnumerableProp(e, 'isOperational', true)
              } catch (ignore) {
              }
            }
            function originatesFromRejection(e) {
              if (e == null)
                return false;
              return e instanceof Error['__BluebirdErrorTypes__'].OperationalError || e['isOperational'] === true
            }
            function canAttachTrace(obj) {
              return obj instanceof Error && es5.propertyIsWritable(obj, 'stack')
            }
            var ensureErrorObject = function () {
              if (!('stack' in new Error)) {
                return function (value) {
                  if (canAttachTrace(value))
                    return value;
                  try {
                    throw new Error(safeToString(value))
                  } catch (err) {
                    return err
                  }
                }
              } else {
                return function (value) {
                  if (canAttachTrace(value))
                    return value;
                  return new Error(safeToString(value))
                }
              }
            }();
            function classString(obj) {
              return {}.toString.call(obj)
            }
            function copyDescriptors(from, to, filter) {
              var keys = es5.names(from);
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (filter(key)) {
                  try {
                    es5.defineProperty(to, key, es5.getDescriptor(from, key))
                  } catch (ignore) {
                  }
                }
              }
            }
            var ret = {
              isClass: isClass,
              isIdentifier: isIdentifier,
              inheritedDataKeys: inheritedDataKeys,
              getDataPropertyOrDefault: getDataPropertyOrDefault,
              thrower: thrower,
              isArray: es5.isArray,
              haveGetters: haveGetters,
              notEnumerableProp: notEnumerableProp,
              isPrimitive: isPrimitive,
              isObject: isObject,
              canEvaluate: canEvaluate,
              errorObj: errorObj,
              tryCatch: tryCatch,
              inherits: inherits,
              withAppended: withAppended,
              maybeWrapAsError: maybeWrapAsError,
              toFastProperties: toFastProperties,
              filledRange: filledRange,
              toString: safeToString,
              canAttachTrace: canAttachTrace,
              ensureErrorObject: ensureErrorObject,
              originatesFromRejection: originatesFromRejection,
              markAsOriginatingFromRejection: markAsOriginatingFromRejection,
              classString: classString,
              copyDescriptors: copyDescriptors,
              hasDevTools: typeof chrome !== 'undefined' && chrome && typeof chrome.loadTimes === 'function',
              isNode: typeof process !== 'undefined' && classString(process).toLowerCase() === '[object process]'
            };
            ret.isRecentNode = ret.isNode && function () {
              var version = process.versions.node.split('.').map(Number);
              return version[0] === 0 && version[1] > 10 || version[0] > 0
            }();
            if (ret.isNode)
              ret.toFastProperties(process);
            try {
              throw new Error
            } catch (e) {
              ret.lastLineError = e
            }
            module.exports = ret
          },
          { './es5.js': 14 }
        ]
      }, {}, [4])(4)
    });
    ;
    if (typeof window !== 'undefined' && window !== null) {
      window.P = window.Promise
    } else if (typeof self !== 'undefined' && self !== null) {
      self.P = self.Promise
    }
  });
  // source: node_modules/crowdcontrol/node_modules/xhr-promise/node_modules/extend/index.js
  require.define('crowdcontrol/node_modules/xhr-promise/node_modules/extend', function (module, exports, __dirname, __filename) {
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var undefined;
    var isArray = function isArray(arr) {
      if (typeof Array.isArray === 'function') {
        return Array.isArray(arr)
      }
      return toStr.call(arr) === '[object Array]'
    };
    var isPlainObject = function isPlainObject(obj) {
      'use strict';
      if (!obj || toStr.call(obj) !== '[object Object]') {
        return false
      }
      var has_own_constructor = hasOwn.call(obj, 'constructor');
      var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
      // Not own constructor property must be Object
      if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
        return false
      }
      // Own properties are enumerated firstly, so to speed up,
      // if last one is own, then all properties are own.
      var key;
      for (key in obj) {
      }
      return key === undefined || hasOwn.call(obj, key)
    };
    module.exports = function extend() {
      'use strict';
      var options, name, src, copy, copyIsArray, clone, target = arguments[0], i = 1, length = arguments.length, deep = false;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      } else if (typeof target !== 'object' && typeof target !== 'function' || target == null) {
        target = {}
      }
      for (; i < length; ++i) {
        options = arguments[i];
        // Only deal with non-null/undefined values
        if (options != null) {
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && isArray(src) ? src : []
              } else {
                clone = src && isPlainObject(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (copy !== undefined) {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    }
  });
  // source: node_modules/crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/parse-headers.js
  require.define('crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/parse-headers', function (module, exports, __dirname, __filename) {
    var trim = require('crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/trim'), forEach = require('crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each'), isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]'
      };
    module.exports = function (headers) {
      if (!headers)
        return {};
      var result = {};
      forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [
            result[key],
            value
          ]
        }
      });
      return result
    }
  });
  // source: node_modules/crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/trim/index.js
  require.define('crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/trim', function (module, exports, __dirname, __filename) {
    exports = module.exports = trim;
    function trim(str) {
      return str.replace(/^\s*|\s*$/g, '')
    }
    exports.left = function (str) {
      return str.replace(/^\s*/, '')
    };
    exports.right = function (str) {
      return str.replace(/\s*$/, '')
    }
  });
  // source: node_modules/crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/index.js
  require.define('crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each', function (module, exports, __dirname, __filename) {
    var isFunction = require('crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/node_modules/is-function');
    module.exports = forEach;
    var toString = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function forEach(list, iterator, context) {
      if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
      }
      if (arguments.length < 3) {
        context = this
      }
      if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context);
      else if (typeof list === 'string')
        forEachString(list, iterator, context);
      else
        forEachObject(list, iterator, context)
    }
    function forEachArray(array, iterator, context) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          iterator.call(context, array[i], i, array)
        }
      }
    }
    function forEachString(string, iterator, context) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
      }
    }
    function forEachObject(object, iterator, context) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          iterator.call(context, object[k], k, object)
        }
      }
    }
  });
  // source: node_modules/crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/node_modules/is-function/index.js
  require.define('crowdcontrol/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/node_modules/is-function', function (module, exports, __dirname, __filename) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      var string = toString.call(fn);
      return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
    }
    ;
  });
  // source: node_modules/crowdcontrol/node_modules/raf/index.js
  require.define('crowdcontrol/node_modules/raf', function (module, exports, __dirname, __filename) {
    var now = require('crowdcontrol/node_modules/raf/node_modules/performance-now/lib/performance-now'), global = typeof window === 'undefined' ? {} : window, vendors = [
        'moz',
        'webkit'
      ], suffix = 'AnimationFrame', raf = global['request' + suffix], caf = global['cancel' + suffix] || global['cancelRequest' + suffix];
    for (var i = 0; i < vendors.length && !raf; i++) {
      raf = global[vendors[i] + 'Request' + suffix];
      caf = global[vendors[i] + 'Cancel' + suffix] || global[vendors[i] + 'CancelRequest' + suffix]
    }
    // Some versions of FF have rAF but not cAF
    if (!raf || !caf) {
      var last = 0, id = 0, queue = [], frameDuration = 1000 / 60;
      raf = function (callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function () {
            var cp = queue.slice(0);
            // Clear queue here to prevent
            // callbacks from appending listeners
            // to the current frame's queue
            queue.length = 0;
            for (var i = 0; i < cp.length; i++) {
              if (!cp[i].cancelled) {
                try {
                  cp[i].callback(last)
                } catch (e) {
                  setTimeout(function () {
                    throw e
                  }, 0)
                }
              }
            }
          }, Math.round(next))
        }
        queue.push({
          handle: ++id,
          callback: callback,
          cancelled: false
        });
        return id
      };
      caf = function (handle) {
        for (var i = 0; i < queue.length; i++) {
          if (queue[i].handle === handle) {
            queue[i].cancelled = true
          }
        }
      }
    }
    module.exports = function (fn) {
      // Wrap in a new function to prevent
      // `cancel` potentially being assigned
      // to the native rAF function
      return raf.call(global, fn)
    };
    module.exports.cancel = function () {
      caf.apply(global, arguments)
    }
  });
  // source: node_modules/crowdcontrol/node_modules/raf/node_modules/performance-now/lib/performance-now.js
  require.define('crowdcontrol/node_modules/raf/node_modules/performance-now/lib/performance-now', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.7.1
    (function () {
      var getNanoSeconds, hrtime, loadTime;
      if (typeof performance !== 'undefined' && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now()
        }
      } else if (typeof process !== 'undefined' && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - loadTime) / 1000000
        };
        hrtime = process.hrtime;
        getNanoSeconds = function () {
          var hr;
          hr = hrtime();
          return hr[0] * 1000000000 + hr[1]
        };
        loadTime = getNanoSeconds()
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime
        };
        loadTime = Date.now()
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime
        };
        loadTime = new Date().getTime()
      }
    }.call(this))
  });
  // source: node_modules/crowdcontrol/lib/utils/log.js
  require.define('crowdcontrol/lib/utils/log', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    var log;
    log = function () {
      if (log.DEBUG) {
        return console.log.apply(console, arguments)
      }
    };
    log.DEBUG = false;
    log.debug = log;
    log.info = function () {
      return console.log.apply(console, arguments)
    };
    log.warn = function () {
      console.log('WARN:');
      return console.log.apply(console, arguments)
    };
    log.error = function () {
      console.log('ERROR:');
      console.log.apply(console, arguments);
      throw new arguments[0]
    };
    module.exports = log  //# sourceMappingURL=log.js.map
  });
  // source: node_modules/crowdcontrol/lib/utils/mediator.js
  require.define('crowdcontrol/lib/utils/mediator', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    var mediator, riot;
    riot = require('crowdcontrol/lib/utils/shim').riot;
    mediator = {};
    riot.observable(mediator);
    module.exports = mediator  //# sourceMappingURL=mediator.js.map
  });
  // source: node_modules/crowdcontrol/lib/data/source.js
  require.define('crowdcontrol/lib/data/source', function (module, exports, __dirname, __filename) {
  });
  // source: node_modules/crowdcontrol/lib/view/index.js
  require.define('crowdcontrol/lib/view', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    module.exports = {
      form: require('crowdcontrol/lib/view/form'),
      View: require('crowdcontrol/lib/view/view')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/view/form.js
  require.define('crowdcontrol/lib/view/form', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    var Events, FormView, Input, InputCondition, InputConfig, InputView, ValidatorCondition, View, _, helpers, log, promise, riot, tokenize, traverse, utils, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    _ = require('crowdcontrol/node_modules/underscore/underscore');
    Events = require('crowdcontrol/lib/events');
    utils = require('crowdcontrol/lib/utils');
    log = utils.log;
    riot = utils.shim.riot;
    promise = utils.shim.promise;
    View = require('crowdcontrol/lib/view/view');
    tokenize = function (str) {
      var dict, j, k, len, ref, token, tokens, v;
      tokens = str.split(' ');
      dict = {};
      for (j = 0, len = tokens.length; j < len; j++) {
        token = tokens[j];
        if (token.indexOf(':') >= 0) {
          ref = token.split(':'), k = ref[0], v = ref[1];
          dict[k] = v
        } else {
          dict[token] = true
        }
      }
      return dict
    };
    InputConfig = function () {
      InputConfig.prototype.name = '';
      InputConfig.prototype['default'] = '';
      InputConfig.prototype.placeholder = '';
      InputConfig.prototype.hints = null;
      function InputConfig(name1, _default, placeholder, hints) {
        this.name = name1;
        this['default'] = _default != null ? _default : '';
        this.placeholder = placeholder != null ? placeholder : '';
        if (hints == null) {
          hints = ''
        }
        this.hints = tokenize(hints)
      }
      return InputConfig
    }();
    Input = function () {
      Input.prototype.tag = '';
      Input.prototype.model = {};
      Input.prototype.validator = function () {
      };
      Input.prototype.obs = null;
      function Input(tag1, model1, validator1) {
        this.tag = tag1;
        this.model = model1;
        this.validator = validator1
      }
      return Input
    }();
    ValidatorCondition = function () {
      function ValidatorCondition(predicate1, validatorFn1) {
        this.predicate = predicate1;
        this.validatorFn = validatorFn1
      }
      return ValidatorCondition
    }();
    InputCondition = function () {
      function InputCondition(predicate1, tagName1) {
        this.predicate = predicate1;
        this.tagName = tagName1
      }
      return InputCondition
    }();
    helpers = {
      tagLookup: [],
      validatorLookup: [],
      defaultTagName: 'form-input',
      errorTag: 'form-error',
      registerValidator: function (predicate, validatorFn) {
        if (_.isFunction(validatorFn)) {
          return this.validatorLookup.push(new ValidatorCondition(predicate, validatorFn))
        }
      },
      registerTag: function (predicate, tagName) {
        return this.tagLookup.push(new InputCondition(predicate, tagName))
      },
      deleteTag: function (tagName) {
        var i, j, len, lookup, ref, results1;
        ref = this.tagLookup;
        results1 = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          lookup = ref[i];
          if (lookup.tagName === tagName) {
            results1.push(this.tagLookup[i] = null)
          } else {
            results1.push(void 0)
          }
        }
        return results1
      },
      deleteValidator: function (predicate, validatorFn) {
        var i, j, len, lookup, ref, results1;
        ref = this.validatorLookup;
        results1 = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          lookup = ref[i];
          if (lookup.validatorFn === validatorFn) {
            results1.push(this.validatorLookup[i] = null)
          } else {
            results1.push(void 0)
          }
        }
        return results1
      },
      render: function (inputCfgs) {
        var fn1, i, inputCfg, inputs, j, len, validators;
        inputs = {};
        fn1 = function (_this) {
          return function (validators, inputCfg) {
            var found, l, len1, len2, lookup, m, model, ref, ref1, tag, validator, validatorFn;
            ref = _this.validatorLookup;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              lookup = ref[l];
              if (lookup.predicate(inputCfg)) {
                validatorFn = lookup.validatorFn;
                (function (validatorFn) {
                  return validators.push(function (pair) {
                    var model, name, p;
                    model = pair[0], name = pair[1];
                    p = promise['new'](function (resolve, reject) {
                      return resolve(pair)
                    });
                    return p.then(function (pair) {
                      return validatorFn.call(inputCfg, pair[0], pair[1])
                    }).then(function (v) {
                      model[name] = v;
                      return promise['new'](function (resolve, reject) {
                        return resolve(pair)
                      })
                    })
                  })
                }(validatorFn))
              }
            }
            validators.push(function (pair) {
              var model, name;
              model = pair[0], name = pair[1];
              return promise['new'](function (resolve, reject) {
                return resolve(model[name])
              })
            });
            validator = function (model, name) {
              var len2, m, p;
              p = promise['new'](function (resolve, reject) {
                return resolve([
                  model,
                  name
                ])
              });
              for (m = 0, len2 = validators.length; m < len2; m++) {
                validatorFn = validators[m];
                p = p.then(validatorFn)
              }
              return p
            };
            found = false;
            ref1 = _this.tagLookup;
            for (m = 0, len2 = ref1.length; m < len2; m++) {
              lookup = ref1[m];
              if (lookup == null) {
                continue
              }
              if (lookup.predicate(inputCfg)) {
                tag = lookup.tagName;
                found = true;
                break
              }
            }
            if (!found) {
              tag = _this.defaultTagName
            }
            model = {
              name: inputCfg.name,
              value: inputCfg['default'],
              placeholder: inputCfg.placeholder,
              cfg: inputCfg
            };
            return inputs[inputCfg.name] = new Input(tag, model, validator)
          }
        }(this);
        for (i = j = 0, len = inputCfgs.length; j < len; i = ++j) {
          inputCfg = inputCfgs[i];
          if (inputCfg == null) {
            continue
          }
          validators = [];
          fn1(validators, inputCfg)
        }
        return inputs
      }
    };
    Events.Input = {
      Result: 'input-result',
      Get: 'input-get',
      Set: 'input-set',
      Change: 'input-change',
      Error: 'input-error',
      ClearError: 'input-clear-error'
    };
    InputView = function (superClass) {
      var obj1;
      extend(InputView, superClass);
      function InputView() {
        return InputView.__super__.constructor.apply(this, arguments)
      }
      InputView.prototype.getValue = function (el) {
        return el.value
      };
      InputView.prototype.errorHtml = '<div class="error-container" if="{ hasError() }">\n  <div class="error-message">{ error }</div>\n</div>';
      InputView.prototype.init = function () {
        return this.html += this.errorHtml
      };
      InputView.prototype.events = (obj1 = {}, obj1['' + Events.Input.Set] = function () {
        return this._set.apply(this, arguments)
      }, obj1['' + Events.Input.Error] = function () {
        return this._error.apply(this, arguments)
      }, obj1['' + Events.Input.ClearError] = function () {
        return this._clearError.apply(this, arguments)
      }, obj1);
      InputView.prototype._clearError = function (name) {
        if (name === this.model.name) {
          this.clearError();
          return this.update()
        }
      };
      InputView.prototype._error = function (name, message) {
        if (name === this.model.name) {
          this.setError(message);
          return this.update()
        }
      };
      InputView.prototype._set = function (name, value) {
        if (name === this.model.name) {
          this.clearError();
          this.model.value = value;
          return this.update()
        }
      };
      InputView.prototype.change = function (event) {
        var value;
        value = this.getValue(event.target);
        if (value === '' || value !== this.model.value) {
          this.obs.trigger(Events.Input.Change, this.model.name, value)
        }
        return this.model.value = value
      };
      InputView.prototype.hasError = function () {
        var error;
        error = this.error;
        return error != null && error.length != null && error.length > 0
      };
      InputView.prototype.setError = function (message) {
        return this.error = message
      };
      InputView.prototype.clearError = function () {
        return this.setError(null)
      };
      InputView.prototype.js = function (opts) {
        return this.model = opts.input.model
      };
      return InputView
    }(View);
    riot.tag('control', '', function (opts) {
      var input;
      input = opts.input;
      if (input != null) {
        opts.obs = input.obs;
        return riot.mount(this.root, input.tag, opts)
      }
    });
    Events.Form = {
      SubmitSuccess: 'form-submit-success',
      SubmitFailed: 'form-submit-failed'
    };
    FormView = function (superClass) {
      var obj1;
      extend(FormView, superClass);
      function FormView() {
        return FormView.__super__.constructor.apply(this, arguments)
      }
      FormView.prototype.inputConfigs = null;
      FormView.prototype.events = (obj1 = {}, obj1['' + Events.Input.Get] = function () {
        return this._result.apply(this, arguments)
      }, obj1['' + Events.Input.Change] = function () {
        return this._change.apply(this, arguments)
      }, obj1);
      FormView.prototype._change = function (name, newValue) {
        var input, lastName, model, ref;
        this.fullyValidated = false;
        ref = this._set(this.model, name, newValue), model = ref[0], lastName = ref[1];
        input = this.inputs[name];
        if (input != null) {
          return input.validator(model, lastName).then(function (_this) {
            return function (value) {
              return _this.obs.trigger(Events.Input.Set, name, value)
            }
          }(this))['catch'](function (_this) {
            return function (err) {
              log('Validation error has occured', err.stack);
              return _this.obs.trigger(Events.Input.Error, name, err.message)
            }
          }(this))
        }
      };
      FormView.prototype._result = function (name) {
        return this.obs.trigger(Events.Input.Result, this._get(this.model, name))
      };
      FormView.prototype._submit = function (event) {
      };
      FormView.prototype.submit = function (event) {
        var input, lastName, model, name, names, promises, ref, ref1;
        if (event != null) {
          event.preventDefault()
        }
        if (this.fullyValidated) {
          this._submit(event);
          return
        }
        names = [];
        promises = [];
        ref = this.inputs;
        for (name in ref) {
          input = ref[name];
          names.push(name);
          ref1 = this._find(this.model, name), model = ref1[0], lastName = ref1[1];
          promises.push(input.validator(model, lastName))
        }
        return promise.settle(promises).done(function (_this) {
          return function (results) {
            var i, j, len, rejected, result;
            rejected = false;
            for (i = j = 0, len = results.length; j < len; i = ++j) {
              result = results[i];
              if (result.isRejected()) {
                rejected = true;
                _this.obs.trigger(Events.Input.Error, names[i], result.reason().message)
              }
            }
            if (rejected) {
              _this.obs.trigger(Events.Form.SubmitFailed, _this.model);
              return
            }
            _this.fullyValidated = true;
            _this.obs.trigger(Events.Form.SubmitSuccess, _this.model);
            return _this._submit(event)
          }
        }(this))
      };
      FormView.prototype._get = function (model, path) {
        var currentObject, j, len, name, names;
        names = path.split('.');
        if (names.length === 1) {
          return model[path]
        }
        currentObject = model;
        for (j = 0, len = names.length; j < len; j++) {
          name = names[j];
          if (currentObject[name] == null) {
            return void 0
          }
          currentObject = currentObject[name]
        }
        return currentObject[lastName]
      };
      FormView.prototype._set = function (model, path, value) {
        var currentObject, lastName, ref;
        ref = this._find(model, path), currentObject = ref[0], lastName = ref[1];
        currentObject[lastName] = value;
        return [
          currentObject,
          lastName
        ]
      };
      FormView.prototype._find = function (model, path) {
        var currentObject, j, lastName, len, name, names;
        names = path.split('.');
        if (names.length === 1) {
          return [
            model,
            path
          ]
        }
        lastName = names.pop();
        currentObject = model;
        for (j = 0, len = names.length; j < len; j++) {
          name = names[j];
          if (currentObject[name] != null) {
            currentObject = currentObject[name];
            continue
          }
          if (_.isNumber(name)) {
            currentObject[name] = []
          } else {
            currentObject[name] = {}
          }
          currentObject = currentObject[name]
        }
        return [
          currentObject,
          lastName
        ]
      };
      FormView.prototype.js = function () {
        return this.initFormGroup()
      };
      FormView.prototype.initFormGroup = function () {
        var input, inputs, key;
        if (this.inputConfigs != null) {
          if (this.inputs == null) {
            this.inputs = inputs = helpers.render(this.inputConfigs)
          } else {
            inputs = this.inputs
          }
          for (key in inputs) {
            input = inputs[key];
            input.obs = this.obs
          }
          this.fullyValidated = false;
          return traverse(this.model, function (key, value) {
            if (inputs[key] != null) {
              return inputs[key].model.value = value
            }
          })
        }
      };
      return FormView
    }(View);
    traverse = function (obj, fn, key) {
      var k, results1, v;
      if (key == null) {
        key = ''
      }
      if (_.isArray(obj) || _.isObject(obj)) {
        results1 = [];
        for (k in obj) {
          v = obj[k];
          results1.push(traverse(v, fn, key === '' ? k : key + '.' + k))
        }
        return results1
      } else {
        return fn(key, obj)
      }
    };
    module.exports = {
      helpers: helpers,
      FormView: FormView,
      InputView: InputView,
      Input: Input,
      InputConfig: InputConfig,
      tokenize: tokenize
    }  //# sourceMappingURL=form.js.map
  });
  // source: node_modules/crowdcontrol/lib/events.js
  require.define('crowdcontrol/lib/events', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    module.exports = {}  //# sourceMappingURL=events.js.map
  });
  // source: node_modules/crowdcontrol/lib/view/view.js
  require.define('crowdcontrol/lib/view/view', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    var View, _, riot, utils;
    _ = require('crowdcontrol/node_modules/underscore/underscore');
    utils = require('crowdcontrol/lib/utils');
    riot = utils.shim.riot;
    View = function () {
      View.register = function () {
        return new this
      };
      View.prototype.tag = '';
      View.prototype.html = '';
      View.prototype.css = '';
      View.prototype.attrs = '';
      View.prototype.events = null;
      View.prototype.mixins = null;
      View.prototype.model = null;
      View.prototype.js = function () {
      };
      function View() {
        var parentProto, proto, temp, view;
        proto = Object.getPrototypeOf(this);
        parentProto = proto;
        temp = {};
        while (parentProto !== View.prototype) {
          parentProto = Object.getPrototypeOf(parentProto);
          proto.events = _.extend({}, parentProto.events || {}, proto.events);
          _.extend(temp, parentProto || {}, proto)
        }
        _.extend(proto, temp);
        view = this;
        this.init();
        riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
          var fn, handler, k, name, obs, optsP, ref, ref1, v;
          optsP = Object.getPrototypeOf(opts);
          for (k in opts) {
            v = opts[k];
            if (optsP[k] != null && v == null) {
              opts[k] = optsP[k]
            }
          }
          if (view != null) {
            ref = Object.getPrototypeOf(view);
            for (k in ref) {
              v = ref[k];
              if (_.isFunction(v)) {
                (function (_this) {
                  return function (v) {
                    var oldFn;
                    if (_this[k] != null) {
                      oldFn = _this[k];
                      return _this[k] = function () {
                        oldFn.apply(_this, arguments);
                        return v.apply(_this, arguments)
                      }
                    } else {
                      return _this[k] = function () {
                        return v.apply(_this, arguments)
                      }
                    }
                  }
                }(this)(v))
              } else {
                this[k] = v
              }
            }
          }
          this.model = opts.model || this.model;
          if (this.model == null) {
            this.model = {}
          }
          obs = this.obs = opts.obs;
          if (this.obs == null) {
            obs = this.obs = {};
            utils.shim.observable(obs)
          }
          if (view.events != null) {
            ref1 = view.events;
            fn = function (_this) {
              return function (name, handler) {
                return obs.on(name, function () {
                  return handler.apply(_this, arguments)
                })
              }
            }(this);
            for (name in ref1) {
              handler = ref1[name];
              fn(name, handler)
            }
          }
          if (this.js) {
            return this.js(opts)
          }
        })
      }
      View.prototype.init = function () {
      };
      return View
    }();
    module.exports = View  //# sourceMappingURL=view.js.map
  });
  // source: node_modules/crowdcontrol/lib/config.js
  require.define('crowdcontrol/lib/config', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.9.3
    module.exports = {}  //# sourceMappingURL=config.js.map
  });
  // source: node_modules/crowdstart.js/lib/index.js
  require.define('crowdstart/lib/index.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Client;
    Client = require('crowdstart/lib/crowdstart.js');
    if (typeof window !== 'undefined') {
      if (window.Crowdstart != null) {
        window.Crowdstart.Client = Client
      } else {
        window.Crowdstart = { Client: Client }
      }
    }
    if (typeof module !== 'undefined' && module !== null) {
      module.exports = Client
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdstart.js/lib/crowdstart.js
  require.define('crowdstart/lib/crowdstart.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Client, bindCbs, cachedToken, cookies, sessionTokenName, shim;
    shim = require('crowdstart/lib/shim.js');
    cookies = require('crowdstart/node_modules/cookies-js/dist/cookies.js');
    sessionTokenName = 'crowdstart-session';
    cachedToken = '';
    bindCbs = function (p, predicate, success, fail) {
      p = p.then(predicate);
      if (success != null) {
        p = p.then(success)
      }
      if (fail != null) {
        p = p['catch'](fail)
      }
      return p
    };
    Client = function () {
      Client.prototype.debug = false;
      Client.prototype.endpoint = 'https://api.crowdstart.com';
      Client.prototype.lastResponse = null;
      function Client(key1) {
        var fn, name, payment, ref, ref1, ref2, user, util;
        this.key = key1;
        user = {};
        ref = this.user;
        for (name in ref) {
          fn = ref[name];
          user[name] = fn.bind(this)
        }
        this.user = user;
        payment = {};
        ref1 = this.payment;
        for (name in ref1) {
          fn = ref1[name];
          payment[name] = fn.bind(this)
        }
        this.payment = payment;
        util = {};
        ref2 = this.util;
        for (name in ref2) {
          fn = ref2[name];
          util[name] = fn.bind(this)
        }
        this.util = util
      }
      Client.prototype.setToken = function (token) {
        if (window.location.protocol === 'file:') {
          cachedToken = token;
          return
        }
        return cookies.set(sessionTokenName, token, { expires: 604800 })
      };
      Client.prototype.getToken = function () {
        var ref;
        if (window.location.protocol === 'file:') {
          return cachedToken
        }
        return (ref = cookies.get(sessionTokenName)) != null ? ref : ''
      };
      Client.prototype.setKey = function (key) {
        return this.key = key
      };
      Client.prototype.setStore = function (id) {
        return this.storeId = id
      };
      Client.prototype.req = function (uri, data, method, token) {
        var opts, p;
        if (method == null) {
          method = 'POST'
        }
        if (token == null) {
          token = this.key
        }
        opts = {
          url: this.endpoint.replace(/\/$/, '') + uri,
          method: method,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': token
          },
          data: JSON.stringify(data)
        };
        if (this.debug) {
          console.log('REQUEST HEADER:', opts)
        }
        p = shim.xhr(opts);
        p.then(function (_this) {
          return function (res) {
            return _this.lastResponse = res
          }
        }(this));
        return p
      };
      Client.prototype.user = {
        exists: function (data, success, fail) {
          var uri;
          uri = '/account/exists/' + data.email;
          return bindCbs(this.req(uri, {}), function (res) {
            return res.status === 200
          }, success, fail)
        },
        create: function (data, success, fail) {
          var uri;
          uri = '/account/create';
          return bindCbs(this.req(uri, data), function (res) {
            if (res.status !== 200) {
              throw new Error('User Create Failed')
            }
            return res
          }, success, fail)
        },
        createConfirm: function (data, success, fail) {
          var uri;
          uri = '/account/create/confirm/' + data.tokenId;
          return bindCbs(this.req(uri, {}), function (res) {
            if (res.status !== 200) {
              throw new Error('User Create Confirmation Failed')
            }
            return res
          }, success, fail)
        },
        login: function (data, success, fail) {
          var uri;
          uri = '/account/login';
          return bindCbs(this.req(uri, data), function (_this) {
            return function (res) {
              if (res.status !== 200) {
                throw new Error('User Login Failed')
              }
              data = res.responseText;
              _this.setToken(data.token);
              return res
            }
          }(this), success, fail)
        },
        logout: function () {
          return this.setToken('')
        },
        reset: function (data, success, fail) {
          var uri;
          uri = '/account/reset?email=' + data.email;
          return bindCbs(this.req(uri, data, 'GET'), function (res) {
            if (res.status !== 200) {
              throw new Error('Password Reset Failed')
            }
            return res
          }, success, fail)
        },
        resetConfirm: function (data, success, fail) {
          var uri;
          uri = '/account/reset/confirm/' + data.tokenId;
          return bindCbs(this.req(uri, data), function (res) {
            if (res.status !== 200) {
              throw new Error('Password Reset Confirmation Failed')
            }
            return res
          }, success, fail)
        },
        account: function (success, fail) {
          var uri;
          uri = '/account';
          return bindCbs(this.req(uri, {}, 'GET', this.getToken()), function (res) {
            if (res.status !== 200) {
              throw new Error('Account Retrieval Failed')
            }
            return res
          }, success, fail)
        },
        updateAccount: function (data, success, fail) {
          var uri;
          uri = '/account';
          return bindCbs(this.req(uri, data, 'PATCH', this.getToken()), function (res) {
            if (res.status !== 200) {
              throw new Error('Account Update Failed')
            }
            return res
          }, success, fail)
        },
        newReferrer: function (data, success, fail) {
          var uri;
          uri = '/referrer';
          return bindCbs(this.req(uri, data, 'GET', this.getToken()), function (res) {
            if (res.status !== 201) {
              throw new Error('Referrer Creation Failed')
            }
            return res
          }, success, fail)
        }
      };
      Client.prototype.payment = {
        authorize: function (data, success, fail) {
          var uri;
          uri = '/authorize';
          if (this.storeId != null) {
            uri = '/store/' + this.storeId + uri
          }
          return bindCbs(this.req(uri, data), function (res) {
            if (res.status !== 200) {
              throw new Error('Payment Authorization Failed')
            }
            return res
          }, success, fail)
        },
        capture: function (data, success, fail) {
          var uri;
          uri = '/capture/' + data.orderId;
          if (this.storeId != null) {
            uri = '/store/' + this.storeId + uri
          }
          return bindCbs(this.req(uri, {}), function (res) {
            if (res.status !== 200) {
              throw new Error('Payment Capture Failed')
            }
            return res
          }, success, fail)
        },
        charge: function (data, success, fail) {
          var uri;
          uri = '/charge';
          if (this.storeId != null) {
            uri = '/store/' + this.storeId + uri
          }
          return bindCbs(this.req(uri, data), function (res) {
            if (res.status !== 200) {
              throw new Error('Payment Charge Failed')
            }
            return res
          }, success, fail)
        },
        paypal: function (data, success, fail) {
          var uri;
          uri = '/paypal/pay';
          if (this.storeId != null) {
            uri = '/store/' + this.storeId + uri
          }
          return bindCbs(this.req(uri, data), function (res) {
            if (res.status !== 200) {
              throw new Error('Get Paypal PayKey Failed')
            }
            return res
          }, success, fail)
        }
      };
      Client.prototype.util = {
        product: function (productId, success, fail) {
          var uri;
          uri = '/product/' + productId;
          if (this.storeId != null) {
            uri = '/store/' + this.storeId + uri
          }
          return bindCbs(this.req(uri, {}, 'GET'), function (res) {
            if (res.status !== 200) {
              throw new Error('Get Product Failed')
            }
            return res
          }, success, fail)
        },
        coupon: function (code, success, fail) {
          var uri;
          uri = '/coupon/' + code;
          if (this.storeId != null) {
            uri = '/store/' + this.storeId + uri
          }
          return bindCbs(this.req(uri, {}, 'GET'), function (res) {
            if (res.status !== 200) {
              throw new Error('Get Coupon Failed')
            }
            return res
          }, success, fail)
        }
      };
      return Client
    }();
    module.exports = Client  //# sourceMappingURL=crowdstart.js.map
  });
  // source: node_modules/crowdstart.js/lib/shim.js
  require.define('crowdstart/lib/shim.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var promise, xhr;
    promise = require('crowdstart/node_modules/bluebird/js/browser/bluebird.js');
    xhr = require('crowdstart/node_modules/xhr-promise/index.js');
    promise['new'] = function (fn) {
      return new promise(fn)
    };
    module.exports = {
      xhr: function (data) {
        var x;
        x = new xhr;
        return x.send.apply(x, arguments)
      },
      promise: promise
    }  //# sourceMappingURL=shim.js.map
  });
  // source: node_modules/crowdstart.js/node_modules/bluebird/js/browser/bluebird.js
  require.define('crowdstart/node_modules/bluebird/js/browser/bluebird.js', function (module, exports, __dirname, __filename) {
    /* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2013-2015 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
    /**
 * bluebird build version 2.10.2
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, cancel, using, filter, any, each, timers
*/
    !function (e) {
      if ('object' == typeof exports && 'undefined' != typeof module)
        module.exports = e();
      else if ('function' == typeof define && define.amd)
        define([], e);
      else {
        var f;
        'undefined' != typeof window ? f = window : 'undefined' != typeof global ? f = global : 'undefined' != typeof self && (f = self), f.Promise = e()
      }
    }(function () {
      var define, module, exports;
      return function e(t, n, r) {
        function s(o, u) {
          if (!n[o]) {
            if (!t[o]) {
              var a = typeof _dereq_ == 'function' && _dereq_;
              if (!u && a)
                return a(o, !0);
              if (i)
                return i(o, !0);
              var f = new Error("Cannot find module '" + o + "'");
              throw f.code = 'MODULE_NOT_FOUND', f
            }
            var l = n[o] = { exports: {} };
            t[o][0].call(l.exports, function (e) {
              var n = t[o][1][e];
              return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
          }
          return n[o].exports
        }
        var i = typeof _dereq_ == 'function' && _dereq_;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s
      }({
        1: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var SomePromiseArray = Promise._SomePromiseArray;
              function any(promises) {
                var ret = new SomePromiseArray(promises);
                var promise = ret.promise();
                ret.setHowMany(1);
                ret.setUnwrap();
                ret.init();
                return promise
              }
              Promise.any = function (promises) {
                return any(promises)
              };
              Promise.prototype.any = function () {
                return any(this)
              }
            }
          },
          {}
        ],
        2: [
          function (_dereq_, module, exports) {
            'use strict';
            var firstLineError;
            try {
              throw new Error
            } catch (e) {
              firstLineError = e
            }
            var schedule = _dereq_('./schedule.js');
            var Queue = _dereq_('./queue.js');
            var util = _dereq_('./util.js');
            function Async() {
              this._isTickUsed = false;
              this._lateQueue = new Queue(16);
              this._normalQueue = new Queue(16);
              this._trampolineEnabled = true;
              var self = this;
              this.drainQueues = function () {
                self._drainQueues()
              };
              this._schedule = schedule.isStatic ? schedule(this.drainQueues) : schedule
            }
            Async.prototype.disableTrampolineIfNecessary = function () {
              if (util.hasDevTools) {
                this._trampolineEnabled = false
              }
            };
            Async.prototype.enableTrampoline = function () {
              if (!this._trampolineEnabled) {
                this._trampolineEnabled = true;
                this._schedule = function (fn) {
                  setTimeout(fn, 0)
                }
              }
            };
            Async.prototype.haveItemsQueued = function () {
              return this._normalQueue.length() > 0
            };
            Async.prototype.throwLater = function (fn, arg) {
              if (arguments.length === 1) {
                arg = fn;
                fn = function () {
                  throw arg
                }
              }
              if (typeof setTimeout !== 'undefined') {
                setTimeout(function () {
                  fn(arg)
                }, 0)
              } else
                try {
                  this._schedule(function () {
                    fn(arg)
                  })
                } catch (e) {
                  throw new Error('No async scheduler available\n\n    See http://goo.gl/m3OTXk\n')
                }
            };
            function AsyncInvokeLater(fn, receiver, arg) {
              this._lateQueue.push(fn, receiver, arg);
              this._queueTick()
            }
            function AsyncInvoke(fn, receiver, arg) {
              this._normalQueue.push(fn, receiver, arg);
              this._queueTick()
            }
            function AsyncSettlePromises(promise) {
              this._normalQueue._pushOne(promise);
              this._queueTick()
            }
            if (!util.hasDevTools) {
              Async.prototype.invokeLater = AsyncInvokeLater;
              Async.prototype.invoke = AsyncInvoke;
              Async.prototype.settlePromises = AsyncSettlePromises
            } else {
              if (schedule.isStatic) {
                schedule = function (fn) {
                  setTimeout(fn, 0)
                }
              }
              Async.prototype.invokeLater = function (fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvokeLater.call(this, fn, receiver, arg)
                } else {
                  this._schedule(function () {
                    setTimeout(function () {
                      fn.call(receiver, arg)
                    }, 100)
                  })
                }
              };
              Async.prototype.invoke = function (fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvoke.call(this, fn, receiver, arg)
                } else {
                  this._schedule(function () {
                    fn.call(receiver, arg)
                  })
                }
              };
              Async.prototype.settlePromises = function (promise) {
                if (this._trampolineEnabled) {
                  AsyncSettlePromises.call(this, promise)
                } else {
                  this._schedule(function () {
                    promise._settlePromises()
                  })
                }
              }
            }
            Async.prototype.invokeFirst = function (fn, receiver, arg) {
              this._normalQueue.unshift(fn, receiver, arg);
              this._queueTick()
            };
            Async.prototype._drainQueue = function (queue) {
              while (queue.length() > 0) {
                var fn = queue.shift();
                if (typeof fn !== 'function') {
                  fn._settlePromises();
                  continue
                }
                var receiver = queue.shift();
                var arg = queue.shift();
                fn.call(receiver, arg)
              }
            };
            Async.prototype._drainQueues = function () {
              this._drainQueue(this._normalQueue);
              this._reset();
              this._drainQueue(this._lateQueue)
            };
            Async.prototype._queueTick = function () {
              if (!this._isTickUsed) {
                this._isTickUsed = true;
                this._schedule(this.drainQueues)
              }
            };
            Async.prototype._reset = function () {
              this._isTickUsed = false
            };
            module.exports = new Async;
            module.exports.firstLineError = firstLineError
          },
          {
            './queue.js': 28,
            './schedule.js': 31,
            './util.js': 38
          }
        ],
        3: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise) {
              var rejectThis = function (_, e) {
                this._reject(e)
              };
              var targetRejected = function (e, context) {
                context.promiseRejectionQueued = true;
                context.bindingPromise._then(rejectThis, rejectThis, null, this, e)
              };
              var bindingResolved = function (thisArg, context) {
                if (this._isPending()) {
                  this._resolveCallback(context.target)
                }
              };
              var bindingRejected = function (e, context) {
                if (!context.promiseRejectionQueued)
                  this._reject(e)
              };
              Promise.prototype.bind = function (thisArg) {
                var maybePromise = tryConvertToPromise(thisArg);
                var ret = new Promise(INTERNAL);
                ret._propagateFrom(this, 1);
                var target = this._target();
                ret._setBoundTo(maybePromise);
                if (maybePromise instanceof Promise) {
                  var context = {
                    promiseRejectionQueued: false,
                    promise: ret,
                    target: target,
                    bindingPromise: maybePromise
                  };
                  target._then(INTERNAL, targetRejected, ret._progress, ret, context);
                  maybePromise._then(bindingResolved, bindingRejected, ret._progress, ret, context)
                } else {
                  ret._resolveCallback(target)
                }
                return ret
              };
              Promise.prototype._setBoundTo = function (obj) {
                if (obj !== undefined) {
                  this._bitField = this._bitField | 131072;
                  this._boundTo = obj
                } else {
                  this._bitField = this._bitField & ~131072
                }
              };
              Promise.prototype._isBound = function () {
                return (this._bitField & 131072) === 131072
              };
              Promise.bind = function (thisArg, value) {
                var maybePromise = tryConvertToPromise(thisArg);
                var ret = new Promise(INTERNAL);
                ret._setBoundTo(maybePromise);
                if (maybePromise instanceof Promise) {
                  maybePromise._then(function () {
                    ret._resolveCallback(value)
                  }, ret._reject, ret._progress, ret, null)
                } else {
                  ret._resolveCallback(value)
                }
                return ret
              }
            }
          },
          {}
        ],
        4: [
          function (_dereq_, module, exports) {
            'use strict';
            var old;
            if (typeof Promise !== 'undefined')
              old = Promise;
            function noConflict() {
              try {
                if (Promise === bluebird)
                  Promise = old
              } catch (e) {
              }
              return bluebird
            }
            var bluebird = _dereq_('./promise.js')();
            bluebird.noConflict = noConflict;
            module.exports = bluebird
          },
          { './promise.js': 23 }
        ],
        5: [
          function (_dereq_, module, exports) {
            'use strict';
            var cr = Object.create;
            if (cr) {
              var callerCache = cr(null);
              var getterCache = cr(null);
              callerCache[' size'] = getterCache[' size'] = 0
            }
            module.exports = function (Promise) {
              var util = _dereq_('./util.js');
              var canEvaluate = util.canEvaluate;
              var isIdentifier = util.isIdentifier;
              var getMethodCaller;
              var getGetter;
              if (!true) {
                var makeMethodCaller = function (methodName) {
                  return new Function('ensureMethod', "                                    \n        return function(obj) {                                               \n            'use strict'                                                     \n            var len = this.length;                                           \n            ensureMethod(obj, 'methodName');                                 \n            switch(len) {                                                    \n                case 1: return obj.methodName(this[0]);                      \n                case 2: return obj.methodName(this[0], this[1]);             \n                case 3: return obj.methodName(this[0], this[1], this[2]);    \n                case 0: return obj.methodName();                             \n                default:                                                     \n                    return obj.methodName.apply(obj, this);                  \n            }                                                                \n        };                                                                   \n        ".replace(/methodName/g, methodName))(ensureMethod)
                };
                var makeGetter = function (propertyName) {
                  return new Function('obj', "                                             \n        'use strict';                                                        \n        return obj.propertyName;                                             \n        ".replace('propertyName', propertyName))
                };
                var getCompiled = function (name, compiler, cache) {
                  var ret = cache[name];
                  if (typeof ret !== 'function') {
                    if (!isIdentifier(name)) {
                      return null
                    }
                    ret = compiler(name);
                    cache[name] = ret;
                    cache[' size']++;
                    if (cache[' size'] > 512) {
                      var keys = Object.keys(cache);
                      for (var i = 0; i < 256; ++i)
                        delete cache[keys[i]];
                      cache[' size'] = keys.length - 256
                    }
                  }
                  return ret
                };
                getMethodCaller = function (name) {
                  return getCompiled(name, makeMethodCaller, callerCache)
                };
                getGetter = function (name) {
                  return getCompiled(name, makeGetter, getterCache)
                }
              }
              function ensureMethod(obj, methodName) {
                var fn;
                if (obj != null)
                  fn = obj[methodName];
                if (typeof fn !== 'function') {
                  var message = 'Object ' + util.classString(obj) + " has no method '" + util.toString(methodName) + "'";
                  throw new Promise.TypeError(message)
                }
                return fn
              }
              function caller(obj) {
                var methodName = this.pop();
                var fn = ensureMethod(obj, methodName);
                return fn.apply(obj, this)
              }
              Promise.prototype.call = function (methodName) {
                var $_len = arguments.length;
                var args = new Array($_len - 1);
                for (var $_i = 1; $_i < $_len; ++$_i) {
                  args[$_i - 1] = arguments[$_i]
                }
                if (!true) {
                  if (canEvaluate) {
                    var maybeCaller = getMethodCaller(methodName);
                    if (maybeCaller !== null) {
                      return this._then(maybeCaller, undefined, undefined, args, undefined)
                    }
                  }
                }
                args.push(methodName);
                return this._then(caller, undefined, undefined, args, undefined)
              };
              function namedGetter(obj) {
                return obj[this]
              }
              function indexedGetter(obj) {
                var index = +this;
                if (index < 0)
                  index = Math.max(0, index + obj.length);
                return obj[index]
              }
              Promise.prototype.get = function (propertyName) {
                var isIndex = typeof propertyName === 'number';
                var getter;
                if (!isIndex) {
                  if (canEvaluate) {
                    var maybeGetter = getGetter(propertyName);
                    getter = maybeGetter !== null ? maybeGetter : namedGetter
                  } else {
                    getter = namedGetter
                  }
                } else {
                  getter = indexedGetter
                }
                return this._then(getter, undefined, undefined, propertyName, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        6: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var errors = _dereq_('./errors.js');
              var async = _dereq_('./async.js');
              var CancellationError = errors.CancellationError;
              Promise.prototype._cancel = function (reason) {
                if (!this.isCancellable())
                  return this;
                var parent;
                var promiseToReject = this;
                while ((parent = promiseToReject._cancellationParent) !== undefined && parent.isCancellable()) {
                  promiseToReject = parent
                }
                this._unsetCancellable();
                promiseToReject._target()._rejectCallback(reason, false, true)
              };
              Promise.prototype.cancel = function (reason) {
                if (!this.isCancellable())
                  return this;
                if (reason === undefined)
                  reason = new CancellationError;
                async.invokeLater(this._cancel, this, reason);
                return this
              };
              Promise.prototype.cancellable = function () {
                if (this._cancellable())
                  return this;
                async.enableTrampoline();
                this._setCancellable();
                this._cancellationParent = undefined;
                return this
              };
              Promise.prototype.uncancellable = function () {
                var ret = this.then();
                ret._unsetCancellable();
                return ret
              };
              Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
                var ret = this._then(didFulfill, didReject, didProgress, undefined, undefined);
                ret._setCancellable();
                ret._cancellationParent = undefined;
                return ret
              }
            }
          },
          {
            './async.js': 2,
            './errors.js': 13
          }
        ],
        7: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function () {
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
              var stackFramePattern = null;
              var formatStack = null;
              var indentStackFrames = false;
              var warn;
              function CapturedTrace(parent) {
                this._parent = parent;
                var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
                captureStackTrace(this, CapturedTrace);
                if (length > 32)
                  this.uncycle()
              }
              util.inherits(CapturedTrace, Error);
              CapturedTrace.prototype.uncycle = function () {
                var length = this._length;
                if (length < 2)
                  return;
                var nodes = [];
                var stackToIndex = {};
                for (var i = 0, node = this; node !== undefined; ++i) {
                  nodes.push(node);
                  node = node._parent
                }
                length = this._length = i;
                for (var i = length - 1; i >= 0; --i) {
                  var stack = nodes[i].stack;
                  if (stackToIndex[stack] === undefined) {
                    stackToIndex[stack] = i
                  }
                }
                for (var i = 0; i < length; ++i) {
                  var currentStack = nodes[i].stack;
                  var index = stackToIndex[currentStack];
                  if (index !== undefined && index !== i) {
                    if (index > 0) {
                      nodes[index - 1]._parent = undefined;
                      nodes[index - 1]._length = 1
                    }
                    nodes[i]._parent = undefined;
                    nodes[i]._length = 1;
                    var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
                    if (index < length - 1) {
                      cycleEdgeNode._parent = nodes[index + 1];
                      cycleEdgeNode._parent.uncycle();
                      cycleEdgeNode._length = cycleEdgeNode._parent._length + 1
                    } else {
                      cycleEdgeNode._parent = undefined;
                      cycleEdgeNode._length = 1
                    }
                    var currentChildLength = cycleEdgeNode._length + 1;
                    for (var j = i - 2; j >= 0; --j) {
                      nodes[j]._length = currentChildLength;
                      currentChildLength++
                    }
                    return
                  }
                }
              };
              CapturedTrace.prototype.parent = function () {
                return this._parent
              };
              CapturedTrace.prototype.hasParent = function () {
                return this._parent !== undefined
              };
              CapturedTrace.prototype.attachExtraTrace = function (error) {
                if (error.__stackCleaned__)
                  return;
                this.uncycle();
                var parsed = CapturedTrace.parseStackAndMessage(error);
                var message = parsed.message;
                var stacks = [parsed.stack];
                var trace = this;
                while (trace !== undefined) {
                  stacks.push(cleanStack(trace.stack.split('\n')));
                  trace = trace._parent
                }
                removeCommonRoots(stacks);
                removeDuplicateOrEmptyJumps(stacks);
                util.notEnumerableProp(error, 'stack', reconstructStack(message, stacks));
                util.notEnumerableProp(error, '__stackCleaned__', true)
              };
              function reconstructStack(message, stacks) {
                for (var i = 0; i < stacks.length - 1; ++i) {
                  stacks[i].push('From previous event:');
                  stacks[i] = stacks[i].join('\n')
                }
                if (i < stacks.length) {
                  stacks[i] = stacks[i].join('\n')
                }
                return message + '\n' + stacks.join('\n')
              }
              function removeDuplicateOrEmptyJumps(stacks) {
                for (var i = 0; i < stacks.length; ++i) {
                  if (stacks[i].length === 0 || i + 1 < stacks.length && stacks[i][0] === stacks[i + 1][0]) {
                    stacks.splice(i, 1);
                    i--
                  }
                }
              }
              function removeCommonRoots(stacks) {
                var current = stacks[0];
                for (var i = 1; i < stacks.length; ++i) {
                  var prev = stacks[i];
                  var currentLastIndex = current.length - 1;
                  var currentLastLine = current[currentLastIndex];
                  var commonRootMeetPoint = -1;
                  for (var j = prev.length - 1; j >= 0; --j) {
                    if (prev[j] === currentLastLine) {
                      commonRootMeetPoint = j;
                      break
                    }
                  }
                  for (var j = commonRootMeetPoint; j >= 0; --j) {
                    var line = prev[j];
                    if (current[currentLastIndex] === line) {
                      current.pop();
                      currentLastIndex--
                    } else {
                      break
                    }
                  }
                  current = prev
                }
              }
              function cleanStack(stack) {
                var ret = [];
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  var isTraceLine = stackFramePattern.test(line) || '    (No stack trace)' === line;
                  var isInternalFrame = isTraceLine && shouldIgnore(line);
                  if (isTraceLine && !isInternalFrame) {
                    if (indentStackFrames && line.charAt(0) !== ' ') {
                      line = '    ' + line
                    }
                    ret.push(line)
                  }
                }
                return ret
              }
              function stackFramesAsArray(error) {
                var stack = error.stack.replace(/\s+$/g, '').split('\n');
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  if ('    (No stack trace)' === line || stackFramePattern.test(line)) {
                    break
                  }
                }
                if (i > 0) {
                  stack = stack.slice(i)
                }
                return stack
              }
              CapturedTrace.parseStackAndMessage = function (error) {
                var stack = error.stack;
                var message = error.toString();
                stack = typeof stack === 'string' && stack.length > 0 ? stackFramesAsArray(error) : ['    (No stack trace)'];
                return {
                  message: message,
                  stack: cleanStack(stack)
                }
              };
              CapturedTrace.formatAndLogError = function (error, title) {
                if (typeof console !== 'undefined') {
                  var message;
                  if (typeof error === 'object' || typeof error === 'function') {
                    var stack = error.stack;
                    message = title + formatStack(stack, error)
                  } else {
                    message = title + String(error)
                  }
                  if (typeof warn === 'function') {
                    warn(message)
                  } else if (typeof console.log === 'function' || typeof console.log === 'object') {
                    console.log(message)
                  }
                }
              };
              CapturedTrace.unhandledRejection = function (reason) {
                CapturedTrace.formatAndLogError(reason, '^--- With additional stack trace: ')
              };
              CapturedTrace.isSupported = function () {
                return typeof captureStackTrace === 'function'
              };
              CapturedTrace.fireRejectionEvent = function (name, localHandler, reason, promise) {
                var localEventFired = false;
                try {
                  if (typeof localHandler === 'function') {
                    localEventFired = true;
                    if (name === 'rejectionHandled') {
                      localHandler(promise)
                    } else {
                      localHandler(reason, promise)
                    }
                  }
                } catch (e) {
                  async.throwLater(e)
                }
                var globalEventFired = false;
                try {
                  globalEventFired = fireGlobalEvent(name, reason, promise)
                } catch (e) {
                  globalEventFired = true;
                  async.throwLater(e)
                }
                var domEventFired = false;
                if (fireDomEvent) {
                  try {
                    domEventFired = fireDomEvent(name.toLowerCase(), {
                      reason: reason,
                      promise: promise
                    })
                  } catch (e) {
                    domEventFired = true;
                    async.throwLater(e)
                  }
                }
                if (!globalEventFired && !localEventFired && !domEventFired && name === 'unhandledRejection') {
                  CapturedTrace.formatAndLogError(reason, 'Unhandled rejection ')
                }
              };
              function formatNonError(obj) {
                var str;
                if (typeof obj === 'function') {
                  str = '[function ' + (obj.name || 'anonymous') + ']'
                } else {
                  str = obj.toString();
                  var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                  if (ruselessToString.test(str)) {
                    try {
                      var newStr = JSON.stringify(obj);
                      str = newStr
                    } catch (e) {
                    }
                  }
                  if (str.length === 0) {
                    str = '(empty array)'
                  }
                }
                return '(<' + snip(str) + '>, no stack trace)'
              }
              function snip(str) {
                var maxChars = 41;
                if (str.length < maxChars) {
                  return str
                }
                return str.substr(0, maxChars - 3) + '...'
              }
              var shouldIgnore = function () {
                return false
              };
              var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
              function parseLineInfo(line) {
                var matches = line.match(parseLineInfoRegex);
                if (matches) {
                  return {
                    fileName: matches[1],
                    line: parseInt(matches[2], 10)
                  }
                }
              }
              CapturedTrace.setBounds = function (firstLineError, lastLineError) {
                if (!CapturedTrace.isSupported())
                  return;
                var firstStackLines = firstLineError.stack.split('\n');
                var lastStackLines = lastLineError.stack.split('\n');
                var firstIndex = -1;
                var lastIndex = -1;
                var firstFileName;
                var lastFileName;
                for (var i = 0; i < firstStackLines.length; ++i) {
                  var result = parseLineInfo(firstStackLines[i]);
                  if (result) {
                    firstFileName = result.fileName;
                    firstIndex = result.line;
                    break
                  }
                }
                for (var i = 0; i < lastStackLines.length; ++i) {
                  var result = parseLineInfo(lastStackLines[i]);
                  if (result) {
                    lastFileName = result.fileName;
                    lastIndex = result.line;
                    break
                  }
                }
                if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
                  return
                }
                shouldIgnore = function (line) {
                  if (bluebirdFramePattern.test(line))
                    return true;
                  var info = parseLineInfo(line);
                  if (info) {
                    if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
                      return true
                    }
                  }
                  return false
                }
              };
              var captureStackTrace = function stackDetection() {
                var v8stackFramePattern = /^\s*at\s*/;
                var v8stackFormatter = function (stack, error) {
                  if (typeof stack === 'string')
                    return stack;
                  if (error.name !== undefined && error.message !== undefined) {
                    return error.toString()
                  }
                  return formatNonError(error)
                };
                if (typeof Error.stackTraceLimit === 'number' && typeof Error.captureStackTrace === 'function') {
                  Error.stackTraceLimit = Error.stackTraceLimit + 6;
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  var captureStackTrace = Error.captureStackTrace;
                  shouldIgnore = function (line) {
                    return bluebirdFramePattern.test(line)
                  };
                  return function (receiver, ignoreUntil) {
                    Error.stackTraceLimit = Error.stackTraceLimit + 6;
                    captureStackTrace(receiver, ignoreUntil);
                    Error.stackTraceLimit = Error.stackTraceLimit - 6
                  }
                }
                var err = new Error;
                if (typeof err.stack === 'string' && err.stack.split('\n')[0].indexOf('stackDetection@') >= 0) {
                  stackFramePattern = /@/;
                  formatStack = v8stackFormatter;
                  indentStackFrames = true;
                  return function captureStackTrace(o) {
                    o.stack = new Error().stack
                  }
                }
                var hasStackAfterThrow;
                try {
                  throw new Error
                } catch (e) {
                  hasStackAfterThrow = 'stack' in e
                }
                if (!('stack' in err) && hasStackAfterThrow && typeof Error.stackTraceLimit === 'number') {
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  return function captureStackTrace(o) {
                    Error.stackTraceLimit = Error.stackTraceLimit + 6;
                    try {
                      throw new Error
                    } catch (e) {
                      o.stack = e.stack
                    }
                    Error.stackTraceLimit = Error.stackTraceLimit - 6
                  }
                }
                formatStack = function (stack, error) {
                  if (typeof stack === 'string')
                    return stack;
                  if ((typeof error === 'object' || typeof error === 'function') && error.name !== undefined && error.message !== undefined) {
                    return error.toString()
                  }
                  return formatNonError(error)
                };
                return null
              }([]);
              var fireDomEvent;
              var fireGlobalEvent = function () {
                if (util.isNode) {
                  return function (name, reason, promise) {
                    if (name === 'rejectionHandled') {
                      return process.emit(name, promise)
                    } else {
                      return process.emit(name, reason, promise)
                    }
                  }
                } else {
                  var customEventWorks = false;
                  var anyEventWorks = true;
                  try {
                    var ev = new self.CustomEvent('test');
                    customEventWorks = ev instanceof CustomEvent
                  } catch (e) {
                  }
                  if (!customEventWorks) {
                    try {
                      var event = document.createEvent('CustomEvent');
                      event.initCustomEvent('testingtheevent', false, true, {});
                      self.dispatchEvent(event)
                    } catch (e) {
                      anyEventWorks = false
                    }
                  }
                  if (anyEventWorks) {
                    fireDomEvent = function (type, detail) {
                      var event;
                      if (customEventWorks) {
                        event = new self.CustomEvent(type, {
                          detail: detail,
                          bubbles: false,
                          cancelable: true
                        })
                      } else if (self.dispatchEvent) {
                        event = document.createEvent('CustomEvent');
                        event.initCustomEvent(type, false, true, detail)
                      }
                      return event ? !self.dispatchEvent(event) : false
                    }
                  }
                  var toWindowMethodNameMap = {};
                  toWindowMethodNameMap['unhandledRejection'] = ('on' + 'unhandledRejection').toLowerCase();
                  toWindowMethodNameMap['rejectionHandled'] = ('on' + 'rejectionHandled').toLowerCase();
                  return function (name, reason, promise) {
                    var methodName = toWindowMethodNameMap[name];
                    var method = self[methodName];
                    if (!method)
                      return false;
                    if (name === 'rejectionHandled') {
                      method.call(self, promise)
                    } else {
                      method.call(self, reason, promise)
                    }
                    return true
                  }
                }
              }();
              if (typeof console !== 'undefined' && typeof console.warn !== 'undefined') {
                warn = function (message) {
                  console.warn(message)
                };
                if (util.isNode && process.stderr.isTTY) {
                  warn = function (message) {
                    process.stderr.write('[31m' + message + '[39m\n')
                  }
                } else if (!util.isNode && typeof new Error().stack === 'string') {
                  warn = function (message) {
                    console.warn('%c' + message, 'color: red')
                  }
                }
              }
              return CapturedTrace
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        8: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (NEXT_FILTER) {
              var util = _dereq_('./util.js');
              var errors = _dereq_('./errors.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var keys = _dereq_('./es5.js').keys;
              var TypeError = errors.TypeError;
              function CatchFilter(instances, callback, promise) {
                this._instances = instances;
                this._callback = callback;
                this._promise = promise
              }
              function safePredicate(predicate, e) {
                var safeObject = {};
                var retfilter = tryCatch(predicate).call(safeObject, e);
                if (retfilter === errorObj)
                  return retfilter;
                var safeKeys = keys(safeObject);
                if (safeKeys.length) {
                  errorObj.e = new TypeError('Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n');
                  return errorObj
                }
                return retfilter
              }
              CatchFilter.prototype.doFilter = function (e) {
                var cb = this._callback;
                var promise = this._promise;
                var boundTo = promise._boundValue();
                for (var i = 0, len = this._instances.length; i < len; ++i) {
                  var item = this._instances[i];
                  var itemIsErrorType = item === Error || item != null && item.prototype instanceof Error;
                  if (itemIsErrorType && e instanceof item) {
                    var ret = tryCatch(cb).call(boundTo, e);
                    if (ret === errorObj) {
                      NEXT_FILTER.e = ret.e;
                      return NEXT_FILTER
                    }
                    return ret
                  } else if (typeof item === 'function' && !itemIsErrorType) {
                    var shouldHandle = safePredicate(item, e);
                    if (shouldHandle === errorObj) {
                      e = errorObj.e;
                      break
                    } else if (shouldHandle) {
                      var ret = tryCatch(cb).call(boundTo, e);
                      if (ret === errorObj) {
                        NEXT_FILTER.e = ret.e;
                        return NEXT_FILTER
                      }
                      return ret
                    }
                  }
                }
                NEXT_FILTER.e = e;
                return NEXT_FILTER
              };
              return CatchFilter
            }
          },
          {
            './errors.js': 13,
            './es5.js': 14,
            './util.js': 38
          }
        ],
        9: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, CapturedTrace, isDebugging) {
              var contextStack = [];
              function Context() {
                this._trace = new CapturedTrace(peekContext())
              }
              Context.prototype._pushContext = function () {
                if (!isDebugging())
                  return;
                if (this._trace !== undefined) {
                  contextStack.push(this._trace)
                }
              };
              Context.prototype._popContext = function () {
                if (!isDebugging())
                  return;
                if (this._trace !== undefined) {
                  contextStack.pop()
                }
              };
              function createContext() {
                if (isDebugging())
                  return new Context
              }
              function peekContext() {
                var lastIndex = contextStack.length - 1;
                if (lastIndex >= 0) {
                  return contextStack[lastIndex]
                }
                return undefined
              }
              Promise.prototype._peekContext = peekContext;
              Promise.prototype._pushContext = Context.prototype._pushContext;
              Promise.prototype._popContext = Context.prototype._popContext;
              return createContext
            }
          },
          {}
        ],
        10: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, CapturedTrace) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var Warning = _dereq_('./errors.js').Warning;
              var util = _dereq_('./util.js');
              var canAttachTrace = util.canAttachTrace;
              var unhandledRejectionHandled;
              var possiblyUnhandledRejection;
              var debugging = false || util.isNode && (!!process.env['BLUEBIRD_DEBUG'] || process.env['NODE_ENV'] === 'development');
              if (util.isNode && process.env['BLUEBIRD_DEBUG'] == 0)
                debugging = false;
              if (debugging) {
                async.disableTrampolineIfNecessary()
              }
              Promise.prototype._ignoreRejections = function () {
                this._unsetRejectionIsUnhandled();
                this._bitField = this._bitField | 16777216
              };
              Promise.prototype._ensurePossibleRejectionHandled = function () {
                if ((this._bitField & 16777216) !== 0)
                  return;
                this._setRejectionIsUnhandled();
                async.invokeLater(this._notifyUnhandledRejection, this, undefined)
              };
              Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
                CapturedTrace.fireRejectionEvent('rejectionHandled', unhandledRejectionHandled, undefined, this)
              };
              Promise.prototype._notifyUnhandledRejection = function () {
                if (this._isRejectionUnhandled()) {
                  var reason = this._getCarriedStackTrace() || this._settledValue;
                  this._setUnhandledRejectionIsNotified();
                  CapturedTrace.fireRejectionEvent('unhandledRejection', possiblyUnhandledRejection, reason, this)
                }
              };
              Promise.prototype._setUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField | 524288
              };
              Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField & ~524288
              };
              Promise.prototype._isUnhandledRejectionNotified = function () {
                return (this._bitField & 524288) > 0
              };
              Promise.prototype._setRejectionIsUnhandled = function () {
                this._bitField = this._bitField | 2097152
              };
              Promise.prototype._unsetRejectionIsUnhandled = function () {
                this._bitField = this._bitField & ~2097152;
                if (this._isUnhandledRejectionNotified()) {
                  this._unsetUnhandledRejectionIsNotified();
                  this._notifyUnhandledRejectionIsHandled()
                }
              };
              Promise.prototype._isRejectionUnhandled = function () {
                return (this._bitField & 2097152) > 0
              };
              Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
                this._bitField = this._bitField | 1048576;
                this._fulfillmentHandler0 = capturedTrace
              };
              Promise.prototype._isCarryingStackTrace = function () {
                return (this._bitField & 1048576) > 0
              };
              Promise.prototype._getCarriedStackTrace = function () {
                return this._isCarryingStackTrace() ? this._fulfillmentHandler0 : undefined
              };
              Promise.prototype._captureStackTrace = function () {
                if (debugging) {
                  this._trace = new CapturedTrace(this._peekContext())
                }
                return this
              };
              Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
                if (debugging && canAttachTrace(error)) {
                  var trace = this._trace;
                  if (trace !== undefined) {
                    if (ignoreSelf)
                      trace = trace._parent
                  }
                  if (trace !== undefined) {
                    trace.attachExtraTrace(error)
                  } else if (!error.__stackCleaned__) {
                    var parsed = CapturedTrace.parseStackAndMessage(error);
                    util.notEnumerableProp(error, 'stack', parsed.message + '\n' + parsed.stack.join('\n'));
                    util.notEnumerableProp(error, '__stackCleaned__', true)
                  }
                }
              };
              Promise.prototype._warn = function (message) {
                var warning = new Warning(message);
                var ctx = this._peekContext();
                if (ctx) {
                  ctx.attachExtraTrace(warning)
                } else {
                  var parsed = CapturedTrace.parseStackAndMessage(warning);
                  warning.stack = parsed.message + '\n' + parsed.stack.join('\n')
                }
                CapturedTrace.formatAndLogError(warning, '')
              };
              Promise.onPossiblyUnhandledRejection = function (fn) {
                var domain = getDomain();
                possiblyUnhandledRejection = typeof fn === 'function' ? domain === null ? fn : domain.bind(fn) : undefined
              };
              Promise.onUnhandledRejectionHandled = function (fn) {
                var domain = getDomain();
                unhandledRejectionHandled = typeof fn === 'function' ? domain === null ? fn : domain.bind(fn) : undefined
              };
              Promise.longStackTraces = function () {
                if (async.haveItemsQueued() && debugging === false) {
                  throw new Error('cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/DT1qyG\n')
                }
                debugging = CapturedTrace.isSupported();
                if (debugging) {
                  async.disableTrampolineIfNecessary()
                }
              };
              Promise.hasLongStackTraces = function () {
                return debugging && CapturedTrace.isSupported()
              };
              if (!CapturedTrace.isSupported()) {
                Promise.longStackTraces = function () {
                };
                debugging = false
              }
              return function () {
                return debugging
              }
            }
          },
          {
            './async.js': 2,
            './errors.js': 13,
            './util.js': 38
          }
        ],
        11: [
          function (_dereq_, module, exports) {
            'use strict';
            var util = _dereq_('./util.js');
            var isPrimitive = util.isPrimitive;
            module.exports = function (Promise) {
              var returner = function () {
                return this
              };
              var thrower = function () {
                throw this
              };
              var returnUndefined = function () {
              };
              var throwUndefined = function () {
                throw undefined
              };
              var wrapper = function (value, action) {
                if (action === 1) {
                  return function () {
                    throw value
                  }
                } else if (action === 2) {
                  return function () {
                    return value
                  }
                }
              };
              Promise.prototype['return'] = Promise.prototype.thenReturn = function (value) {
                if (value === undefined)
                  return this.then(returnUndefined);
                if (isPrimitive(value)) {
                  return this._then(wrapper(value, 2), undefined, undefined, undefined, undefined)
                } else if (value instanceof Promise) {
                  value._ignoreRejections()
                }
                return this._then(returner, undefined, undefined, value, undefined)
              };
              Promise.prototype['throw'] = Promise.prototype.thenThrow = function (reason) {
                if (reason === undefined)
                  return this.then(throwUndefined);
                if (isPrimitive(reason)) {
                  return this._then(wrapper(reason, 1), undefined, undefined, undefined, undefined)
                }
                return this._then(thrower, undefined, undefined, reason, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        12: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var PromiseReduce = Promise.reduce;
              Promise.prototype.each = function (fn) {
                return PromiseReduce(this, fn, null, INTERNAL)
              };
              Promise.each = function (promises, fn) {
                return PromiseReduce(promises, fn, null, INTERNAL)
              }
            }
          },
          {}
        ],
        13: [
          function (_dereq_, module, exports) {
            'use strict';
            var es5 = _dereq_('./es5.js');
            var Objectfreeze = es5.freeze;
            var util = _dereq_('./util.js');
            var inherits = util.inherits;
            var notEnumerableProp = util.notEnumerableProp;
            function subError(nameProperty, defaultMessage) {
              function SubError(message) {
                if (!(this instanceof SubError))
                  return new SubError(message);
                notEnumerableProp(this, 'message', typeof message === 'string' ? message : defaultMessage);
                notEnumerableProp(this, 'name', nameProperty);
                if (Error.captureStackTrace) {
                  Error.captureStackTrace(this, this.constructor)
                } else {
                  Error.call(this)
                }
              }
              inherits(SubError, Error);
              return SubError
            }
            var _TypeError, _RangeError;
            var Warning = subError('Warning', 'warning');
            var CancellationError = subError('CancellationError', 'cancellation error');
            var TimeoutError = subError('TimeoutError', 'timeout error');
            var AggregateError = subError('AggregateError', 'aggregate error');
            try {
              _TypeError = TypeError;
              _RangeError = RangeError
            } catch (e) {
              _TypeError = subError('TypeError', 'type error');
              _RangeError = subError('RangeError', 'range error')
            }
            var methods = ('join pop push shift unshift slice filter forEach some ' + 'every map indexOf lastIndexOf reduce reduceRight sort reverse').split(' ');
            for (var i = 0; i < methods.length; ++i) {
              if (typeof Array.prototype[methods[i]] === 'function') {
                AggregateError.prototype[methods[i]] = Array.prototype[methods[i]]
              }
            }
            es5.defineProperty(AggregateError.prototype, 'length', {
              value: 0,
              configurable: false,
              writable: true,
              enumerable: true
            });
            AggregateError.prototype['isOperational'] = true;
            var level = 0;
            AggregateError.prototype.toString = function () {
              var indent = Array(level * 4 + 1).join(' ');
              var ret = '\n' + indent + 'AggregateError of:' + '\n';
              level++;
              indent = Array(level * 4 + 1).join(' ');
              for (var i = 0; i < this.length; ++i) {
                var str = this[i] === this ? '[Circular AggregateError]' : this[i] + '';
                var lines = str.split('\n');
                for (var j = 0; j < lines.length; ++j) {
                  lines[j] = indent + lines[j]
                }
                str = lines.join('\n');
                ret += str + '\n'
              }
              level--;
              return ret
            };
            function OperationalError(message) {
              if (!(this instanceof OperationalError))
                return new OperationalError(message);
              notEnumerableProp(this, 'name', 'OperationalError');
              notEnumerableProp(this, 'message', message);
              this.cause = message;
              this['isOperational'] = true;
              if (message instanceof Error) {
                notEnumerableProp(this, 'message', message.message);
                notEnumerableProp(this, 'stack', message.stack)
              } else if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor)
              }
            }
            inherits(OperationalError, Error);
            var errorTypes = Error['__BluebirdErrorTypes__'];
            if (!errorTypes) {
              errorTypes = Objectfreeze({
                CancellationError: CancellationError,
                TimeoutError: TimeoutError,
                OperationalError: OperationalError,
                RejectionError: OperationalError,
                AggregateError: AggregateError
              });
              notEnumerableProp(Error, '__BluebirdErrorTypes__', errorTypes)
            }
            module.exports = {
              Error: Error,
              TypeError: _TypeError,
              RangeError: _RangeError,
              CancellationError: errorTypes.CancellationError,
              OperationalError: errorTypes.OperationalError,
              TimeoutError: errorTypes.TimeoutError,
              AggregateError: errorTypes.AggregateError,
              Warning: Warning
            }
          },
          {
            './es5.js': 14,
            './util.js': 38
          }
        ],
        14: [
          function (_dereq_, module, exports) {
            var isES5 = function () {
              'use strict';
              return this === undefined
            }();
            if (isES5) {
              module.exports = {
                freeze: Object.freeze,
                defineProperty: Object.defineProperty,
                getDescriptor: Object.getOwnPropertyDescriptor,
                keys: Object.keys,
                names: Object.getOwnPropertyNames,
                getPrototypeOf: Object.getPrototypeOf,
                isArray: Array.isArray,
                isES5: isES5,
                propertyIsWritable: function (obj, prop) {
                  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                  return !!(!descriptor || descriptor.writable || descriptor.set)
                }
              }
            } else {
              var has = {}.hasOwnProperty;
              var str = {}.toString;
              var proto = {}.constructor.prototype;
              var ObjectKeys = function (o) {
                var ret = [];
                for (var key in o) {
                  if (has.call(o, key)) {
                    ret.push(key)
                  }
                }
                return ret
              };
              var ObjectGetDescriptor = function (o, key) {
                return { value: o[key] }
              };
              var ObjectDefineProperty = function (o, key, desc) {
                o[key] = desc.value;
                return o
              };
              var ObjectFreeze = function (obj) {
                return obj
              };
              var ObjectGetPrototypeOf = function (obj) {
                try {
                  return Object(obj).constructor.prototype
                } catch (e) {
                  return proto
                }
              };
              var ArrayIsArray = function (obj) {
                try {
                  return str.call(obj) === '[object Array]'
                } catch (e) {
                  return false
                }
              };
              module.exports = {
                isArray: ArrayIsArray,
                keys: ObjectKeys,
                names: ObjectKeys,
                defineProperty: ObjectDefineProperty,
                getDescriptor: ObjectGetDescriptor,
                freeze: ObjectFreeze,
                getPrototypeOf: ObjectGetPrototypeOf,
                isES5: isES5,
                propertyIsWritable: function () {
                  return true
                }
              }
            }
          },
          {}
        ],
        15: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var PromiseMap = Promise.map;
              Promise.prototype.filter = function (fn, options) {
                return PromiseMap(this, fn, options, INTERNAL)
              };
              Promise.filter = function (promises, fn, options) {
                return PromiseMap(promises, fn, options, INTERNAL)
              }
            }
          },
          {}
        ],
        16: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, NEXT_FILTER, tryConvertToPromise) {
              var util = _dereq_('./util.js');
              var isPrimitive = util.isPrimitive;
              var thrower = util.thrower;
              function returnThis() {
                return this
              }
              function throwThis() {
                throw this
              }
              function return$(r) {
                return function () {
                  return r
                }
              }
              function throw$(r) {
                return function () {
                  throw r
                }
              }
              function promisedFinally(ret, reasonOrValue, isFulfilled) {
                var then;
                if (isPrimitive(reasonOrValue)) {
                  then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue)
                } else {
                  then = isFulfilled ? returnThis : throwThis
                }
                return ret._then(then, thrower, undefined, reasonOrValue, undefined)
              }
              function finallyHandler(reasonOrValue) {
                var promise = this.promise;
                var handler = this.handler;
                var ret = promise._isBound() ? handler.call(promise._boundValue()) : handler();
                if (ret !== undefined) {
                  var maybePromise = tryConvertToPromise(ret, promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    return promisedFinally(maybePromise, reasonOrValue, promise.isFulfilled())
                  }
                }
                if (promise.isRejected()) {
                  NEXT_FILTER.e = reasonOrValue;
                  return NEXT_FILTER
                } else {
                  return reasonOrValue
                }
              }
              function tapHandler(value) {
                var promise = this.promise;
                var handler = this.handler;
                var ret = promise._isBound() ? handler.call(promise._boundValue(), value) : handler(value);
                if (ret !== undefined) {
                  var maybePromise = tryConvertToPromise(ret, promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    return promisedFinally(maybePromise, value, true)
                  }
                }
                return value
              }
              Promise.prototype._passThroughHandler = function (handler, isFinally) {
                if (typeof handler !== 'function')
                  return this.then();
                var promiseAndHandler = {
                  promise: this,
                  handler: handler
                };
                return this._then(isFinally ? finallyHandler : tapHandler, isFinally ? finallyHandler : undefined, undefined, promiseAndHandler, undefined)
              };
              Promise.prototype.lastly = Promise.prototype['finally'] = function (handler) {
                return this._passThroughHandler(handler, true)
              };
              Promise.prototype.tap = function (handler) {
                return this._passThroughHandler(handler, false)
              }
            }
          },
          { './util.js': 38 }
        ],
        17: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, apiRejection, INTERNAL, tryConvertToPromise) {
              var errors = _dereq_('./errors.js');
              var TypeError = errors.TypeError;
              var util = _dereq_('./util.js');
              var errorObj = util.errorObj;
              var tryCatch = util.tryCatch;
              var yieldHandlers = [];
              function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
                for (var i = 0; i < yieldHandlers.length; ++i) {
                  traceParent._pushContext();
                  var result = tryCatch(yieldHandlers[i])(value);
                  traceParent._popContext();
                  if (result === errorObj) {
                    traceParent._pushContext();
                    var ret = Promise.reject(errorObj.e);
                    traceParent._popContext();
                    return ret
                  }
                  var maybePromise = tryConvertToPromise(result, traceParent);
                  if (maybePromise instanceof Promise)
                    return maybePromise
                }
                return null
              }
              function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
                var promise = this._promise = new Promise(INTERNAL);
                promise._captureStackTrace();
                this._stack = stack;
                this._generatorFunction = generatorFunction;
                this._receiver = receiver;
                this._generator = undefined;
                this._yieldHandlers = typeof yieldHandler === 'function' ? [yieldHandler].concat(yieldHandlers) : yieldHandlers
              }
              PromiseSpawn.prototype.promise = function () {
                return this._promise
              };
              PromiseSpawn.prototype._run = function () {
                this._generator = this._generatorFunction.call(this._receiver);
                this._receiver = this._generatorFunction = undefined;
                this._next(undefined)
              };
              PromiseSpawn.prototype._continue = function (result) {
                if (result === errorObj) {
                  return this._promise._rejectCallback(result.e, false, true)
                }
                var value = result.value;
                if (result.done === true) {
                  this._promise._resolveCallback(value)
                } else {
                  var maybePromise = tryConvertToPromise(value, this._promise);
                  if (!(maybePromise instanceof Promise)) {
                    maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
                    if (maybePromise === null) {
                      this._throw(new TypeError('A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/4Y4pDk\n\n'.replace('%s', value) + 'From coroutine:\n' + this._stack.split('\n').slice(1, -7).join('\n')));
                      return
                    }
                  }
                  maybePromise._then(this._next, this._throw, undefined, this, null)
                }
              };
              PromiseSpawn.prototype._throw = function (reason) {
                this._promise._attachExtraTrace(reason);
                this._promise._pushContext();
                var result = tryCatch(this._generator['throw']).call(this._generator, reason);
                this._promise._popContext();
                this._continue(result)
              };
              PromiseSpawn.prototype._next = function (value) {
                this._promise._pushContext();
                var result = tryCatch(this._generator.next).call(this._generator, value);
                this._promise._popContext();
                this._continue(result)
              };
              Promise.coroutine = function (generatorFunction, options) {
                if (typeof generatorFunction !== 'function') {
                  throw new TypeError('generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n')
                }
                var yieldHandler = Object(options).yieldHandler;
                var PromiseSpawn$ = PromiseSpawn;
                var stack = new Error().stack;
                return function () {
                  var generator = generatorFunction.apply(this, arguments);
                  var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler, stack);
                  spawn._generator = generator;
                  spawn._next(undefined);
                  return spawn.promise()
                }
              };
              Promise.coroutine.addYieldHandler = function (fn) {
                if (typeof fn !== 'function')
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                yieldHandlers.push(fn)
              };
              Promise.spawn = function (generatorFunction) {
                if (typeof generatorFunction !== 'function') {
                  return apiRejection('generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n')
                }
                var spawn = new PromiseSpawn(generatorFunction, this);
                var ret = spawn.promise();
                spawn._run(Promise.spawn);
                return ret
              }
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        18: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
              var util = _dereq_('./util.js');
              var canEvaluate = util.canEvaluate;
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var reject;
              if (!true) {
                if (canEvaluate) {
                  var thenCallback = function (i) {
                    return new Function('value', 'holder', "                             \n            'use strict';                                                    \n            holder.pIndex = value;                                           \n            holder.checkFulfillment(this);                                   \n            ".replace(/Index/g, i))
                  };
                  var caller = function (count) {
                    var values = [];
                    for (var i = 1; i <= count; ++i)
                      values.push('holder.p' + i);
                    return new Function('holder', "                                      \n            'use strict';                                                    \n            var callback = holder.fn;                                        \n            return callback(values);                                         \n            ".replace(/values/g, values.join(', ')))
                  };
                  var thenCallbacks = [];
                  var callers = [undefined];
                  for (var i = 1; i <= 5; ++i) {
                    thenCallbacks.push(thenCallback(i));
                    callers.push(caller(i))
                  }
                  var Holder = function (total, fn) {
                    this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
                    this.fn = fn;
                    this.total = total;
                    this.now = 0
                  };
                  Holder.prototype.callers = callers;
                  Holder.prototype.checkFulfillment = function (promise) {
                    var now = this.now;
                    now++;
                    var total = this.total;
                    if (now >= total) {
                      var handler = this.callers[total];
                      promise._pushContext();
                      var ret = tryCatch(handler)(this);
                      promise._popContext();
                      if (ret === errorObj) {
                        promise._rejectCallback(ret.e, false, true)
                      } else {
                        promise._resolveCallback(ret)
                      }
                    } else {
                      this.now = now
                    }
                  };
                  var reject = function (reason) {
                    this._reject(reason)
                  }
                }
              }
              Promise.join = function () {
                var last = arguments.length - 1;
                var fn;
                if (last > 0 && typeof arguments[last] === 'function') {
                  fn = arguments[last];
                  if (!true) {
                    if (last < 6 && canEvaluate) {
                      var ret = new Promise(INTERNAL);
                      ret._captureStackTrace();
                      var holder = new Holder(last, fn);
                      var callbacks = thenCallbacks;
                      for (var i = 0; i < last; ++i) {
                        var maybePromise = tryConvertToPromise(arguments[i], ret);
                        if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          if (maybePromise._isPending()) {
                            maybePromise._then(callbacks[i], reject, undefined, ret, holder)
                          } else if (maybePromise._isFulfilled()) {
                            callbacks[i].call(ret, maybePromise._value(), holder)
                          } else {
                            ret._reject(maybePromise._reason())
                          }
                        } else {
                          callbacks[i].call(ret, maybePromise, holder)
                        }
                      }
                      return ret
                    }
                  }
                }
                var $_len = arguments.length;
                var args = new Array($_len);
                for (var $_i = 0; $_i < $_len; ++$_i) {
                  args[$_i] = arguments[$_i]
                }
                if (fn)
                  args.pop();
                var ret = new PromiseArray(args).promise();
                return fn !== undefined ? ret.spread(fn) : ret
              }
            }
          },
          { './util.js': 38 }
        ],
        19: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var PENDING = {};
              var EMPTY_ARRAY = [];
              function MappingPromiseArray(promises, fn, limit, _filter) {
                this.constructor$(promises);
                this._promise._captureStackTrace();
                var domain = getDomain();
                this._callback = domain === null ? fn : domain.bind(fn);
                this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
                this._limit = limit;
                this._inFlight = 0;
                this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
                async.invoke(init, this, undefined)
              }
              util.inherits(MappingPromiseArray, PromiseArray);
              function init() {
                this._init$(undefined, -2)
              }
              MappingPromiseArray.prototype._init = function () {
              };
              MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var values = this._values;
                var length = this.length();
                var preservedValues = this._preservedValues;
                var limit = this._limit;
                if (values[index] === PENDING) {
                  values[index] = value;
                  if (limit >= 1) {
                    this._inFlight--;
                    this._drainQueue();
                    if (this._isResolved())
                      return
                  }
                } else {
                  if (limit >= 1 && this._inFlight >= limit) {
                    values[index] = value;
                    this._queue.push(index);
                    return
                  }
                  if (preservedValues !== null)
                    preservedValues[index] = value;
                  var callback = this._callback;
                  var receiver = this._promise._boundValue();
                  this._promise._pushContext();
                  var ret = tryCatch(callback).call(receiver, value, index, length);
                  this._promise._popContext();
                  if (ret === errorObj)
                    return this._reject(ret.e);
                  var maybePromise = tryConvertToPromise(ret, this._promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (maybePromise._isPending()) {
                      if (limit >= 1)
                        this._inFlight++;
                      values[index] = PENDING;
                      return maybePromise._proxyPromiseArray(this, index)
                    } else if (maybePromise._isFulfilled()) {
                      ret = maybePromise._value()
                    } else {
                      return this._reject(maybePromise._reason())
                    }
                  }
                  values[index] = ret
                }
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= length) {
                  if (preservedValues !== null) {
                    this._filter(values, preservedValues)
                  } else {
                    this._resolve(values)
                  }
                }
              };
              MappingPromiseArray.prototype._drainQueue = function () {
                var queue = this._queue;
                var limit = this._limit;
                var values = this._values;
                while (queue.length > 0 && this._inFlight < limit) {
                  if (this._isResolved())
                    return;
                  var index = queue.pop();
                  this._promiseFulfilled(values[index], index)
                }
              };
              MappingPromiseArray.prototype._filter = function (booleans, values) {
                var len = values.length;
                var ret = new Array(len);
                var j = 0;
                for (var i = 0; i < len; ++i) {
                  if (booleans[i])
                    ret[j++] = values[i]
                }
                ret.length = j;
                this._resolve(ret)
              };
              MappingPromiseArray.prototype.preservedValues = function () {
                return this._preservedValues
              };
              function map(promises, fn, options, _filter) {
                var limit = typeof options === 'object' && options !== null ? options.concurrency : 0;
                limit = typeof limit === 'number' && isFinite(limit) && limit >= 1 ? limit : 0;
                return new MappingPromiseArray(promises, fn, limit, _filter)
              }
              Promise.prototype.map = function (fn, options) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                return map(this, fn, options, null).promise()
              };
              Promise.map = function (promises, fn, options, _filter) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                return map(promises, fn, options, _filter).promise()
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        20: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              Promise.method = function (fn) {
                if (typeof fn !== 'function') {
                  throw new Promise.TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                return function () {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  ret._pushContext();
                  var value = tryCatch(fn).apply(this, arguments);
                  ret._popContext();
                  ret._resolveFromSyncValue(value);
                  return ret
                }
              };
              Promise.attempt = Promise['try'] = function (fn, args, ctx) {
                if (typeof fn !== 'function') {
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._pushContext();
                var value = util.isArray(args) ? tryCatch(fn).apply(ctx, args) : tryCatch(fn).call(ctx, args);
                ret._popContext();
                ret._resolveFromSyncValue(value);
                return ret
              };
              Promise.prototype._resolveFromSyncValue = function (value) {
                if (value === util.errorObj) {
                  this._rejectCallback(value.e, false, true)
                } else {
                  this._resolveCallback(value, true)
                }
              }
            }
          },
          { './util.js': 38 }
        ],
        21: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var util = _dereq_('./util.js');
              var async = _dereq_('./async.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              function spreadAdapter(val, nodeback) {
                var promise = this;
                if (!util.isArray(val))
                  return successAdapter.call(promise, val, nodeback);
                var ret = tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              function successAdapter(val, nodeback) {
                var promise = this;
                var receiver = promise._boundValue();
                var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              function errorAdapter(reason, nodeback) {
                var promise = this;
                if (!reason) {
                  var target = promise._target();
                  var newReason = target._getCarriedStackTrace();
                  newReason.cause = reason;
                  reason = newReason
                }
                var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback, options) {
                if (typeof nodeback == 'function') {
                  var adapter = successAdapter;
                  if (options !== undefined && Object(options).spread) {
                    adapter = spreadAdapter
                  }
                  this._then(adapter, errorAdapter, undefined, this, nodeback)
                }
                return this
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        22: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray) {
              var util = _dereq_('./util.js');
              var async = _dereq_('./async.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              Promise.prototype.progressed = function (handler) {
                return this._then(undefined, undefined, handler, undefined, undefined)
              };
              Promise.prototype._progress = function (progressValue) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._target()._progressUnchecked(progressValue)
              };
              Promise.prototype._progressHandlerAt = function (index) {
                return index === 0 ? this._progressHandler0 : this[(index << 2) + index - 5 + 2]
              };
              Promise.prototype._doProgressWith = function (progression) {
                var progressValue = progression.value;
                var handler = progression.handler;
                var promise = progression.promise;
                var receiver = progression.receiver;
                var ret = tryCatch(handler).call(receiver, progressValue);
                if (ret === errorObj) {
                  if (ret.e != null && ret.e.name !== 'StopProgressPropagation') {
                    var trace = util.canAttachTrace(ret.e) ? ret.e : new Error(util.toString(ret.e));
                    promise._attachExtraTrace(trace);
                    promise._progress(ret.e)
                  }
                } else if (ret instanceof Promise) {
                  ret._then(promise._progress, null, null, promise, undefined)
                } else {
                  promise._progress(ret)
                }
              };
              Promise.prototype._progressUnchecked = function (progressValue) {
                var len = this._length();
                var progress = this._progress;
                for (var i = 0; i < len; i++) {
                  var handler = this._progressHandlerAt(i);
                  var promise = this._promiseAt(i);
                  if (!(promise instanceof Promise)) {
                    var receiver = this._receiverAt(i);
                    if (typeof handler === 'function') {
                      handler.call(receiver, progressValue, promise)
                    } else if (receiver instanceof PromiseArray && !receiver._isResolved()) {
                      receiver._promiseProgressed(progressValue, promise)
                    }
                    continue
                  }
                  if (typeof handler === 'function') {
                    async.invoke(this._doProgressWith, this, {
                      handler: handler,
                      promise: promise,
                      receiver: this._receiverAt(i),
                      value: progressValue
                    })
                  } else {
                    async.invoke(progress, promise, progressValue)
                  }
                }
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        23: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function () {
              var makeSelfResolutionError = function () {
                return new TypeError('circular promise resolution chain\n\n    See http://goo.gl/LhFpo0\n')
              };
              var reflect = function () {
                return new Promise.PromiseInspection(this._target())
              };
              var apiRejection = function (msg) {
                return Promise.reject(new TypeError(msg))
              };
              var util = _dereq_('./util.js');
              var getDomain;
              if (util.isNode) {
                getDomain = function () {
                  var ret = process.domain;
                  if (ret === undefined)
                    ret = null;
                  return ret
                }
              } else {
                getDomain = function () {
                  return null
                }
              }
              util.notEnumerableProp(Promise, '_getDomain', getDomain);
              var UNDEFINED_BINDING = {};
              var async = _dereq_('./async.js');
              var errors = _dereq_('./errors.js');
              var TypeError = Promise.TypeError = errors.TypeError;
              Promise.RangeError = errors.RangeError;
              Promise.CancellationError = errors.CancellationError;
              Promise.TimeoutError = errors.TimeoutError;
              Promise.OperationalError = errors.OperationalError;
              Promise.RejectionError = errors.OperationalError;
              Promise.AggregateError = errors.AggregateError;
              var INTERNAL = function () {
              };
              var APPLY = {};
              var NEXT_FILTER = { e: null };
              var tryConvertToPromise = _dereq_('./thenables.js')(Promise, INTERNAL);
              var PromiseArray = _dereq_('./promise_array.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              var CapturedTrace = _dereq_('./captured_trace.js')();
              var isDebugging = _dereq_('./debuggability.js')(Promise, CapturedTrace);
              /*jshint unused:false*/
              var createContext = _dereq_('./context.js')(Promise, CapturedTrace, isDebugging);
              var CatchFilter = _dereq_('./catch_filter.js')(NEXT_FILTER);
              var PromiseResolver = _dereq_('./promise_resolver.js');
              var nodebackForPromise = PromiseResolver._nodebackForPromise;
              var errorObj = util.errorObj;
              var tryCatch = util.tryCatch;
              function Promise(resolver) {
                if (typeof resolver !== 'function') {
                  throw new TypeError('the promise constructor requires a resolver function\n\n    See http://goo.gl/EC22Yn\n')
                }
                if (this.constructor !== Promise) {
                  throw new TypeError('the promise constructor cannot be invoked directly\n\n    See http://goo.gl/KsIlge\n')
                }
                this._bitField = 0;
                this._fulfillmentHandler0 = undefined;
                this._rejectionHandler0 = undefined;
                this._progressHandler0 = undefined;
                this._promise0 = undefined;
                this._receiver0 = undefined;
                this._settledValue = undefined;
                if (resolver !== INTERNAL)
                  this._resolveFromResolver(resolver)
              }
              Promise.prototype.toString = function () {
                return '[object Promise]'
              };
              Promise.prototype.caught = Promise.prototype['catch'] = function (fn) {
                var len = arguments.length;
                if (len > 1) {
                  var catchInstances = new Array(len - 1), j = 0, i;
                  for (i = 0; i < len - 1; ++i) {
                    var item = arguments[i];
                    if (typeof item === 'function') {
                      catchInstances[j++] = item
                    } else {
                      return Promise.reject(new TypeError('Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n'))
                    }
                  }
                  catchInstances.length = j;
                  fn = arguments[i];
                  var catchFilter = new CatchFilter(catchInstances, fn, this);
                  return this._then(undefined, catchFilter.doFilter, undefined, catchFilter, undefined)
                }
                return this._then(undefined, fn, undefined, undefined, undefined)
              };
              Promise.prototype.reflect = function () {
                return this._then(reflect, reflect, undefined, this, undefined)
              };
              Promise.prototype.then = function (didFulfill, didReject, didProgress) {
                if (isDebugging() && arguments.length > 0 && typeof didFulfill !== 'function' && typeof didReject !== 'function') {
                  var msg = '.then() only accepts functions but was passed: ' + util.classString(didFulfill);
                  if (arguments.length > 1) {
                    msg += ', ' + util.classString(didReject)
                  }
                  this._warn(msg)
                }
                return this._then(didFulfill, didReject, didProgress, undefined, undefined)
              };
              Promise.prototype.done = function (didFulfill, didReject, didProgress) {
                var promise = this._then(didFulfill, didReject, didProgress, undefined, undefined);
                promise._setIsFinal()
              };
              Promise.prototype.spread = function (didFulfill, didReject) {
                return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined)
              };
              Promise.prototype.isCancellable = function () {
                return !this.isResolved() && this._cancellable()
              };
              Promise.prototype.toJSON = function () {
                var ret = {
                  isFulfilled: false,
                  isRejected: false,
                  fulfillmentValue: undefined,
                  rejectionReason: undefined
                };
                if (this.isFulfilled()) {
                  ret.fulfillmentValue = this.value();
                  ret.isFulfilled = true
                } else if (this.isRejected()) {
                  ret.rejectionReason = this.reason();
                  ret.isRejected = true
                }
                return ret
              };
              Promise.prototype.all = function () {
                return new PromiseArray(this).promise()
              };
              Promise.prototype.error = function (fn) {
                return this.caught(util.originatesFromRejection, fn)
              };
              Promise.is = function (val) {
                return val instanceof Promise
              };
              Promise.fromNode = function (fn) {
                var ret = new Promise(INTERNAL);
                var result = tryCatch(fn)(nodebackForPromise(ret));
                if (result === errorObj) {
                  ret._rejectCallback(result.e, true, true)
                }
                return ret
              };
              Promise.all = function (promises) {
                return new PromiseArray(promises).promise()
              };
              Promise.defer = Promise.pending = function () {
                var promise = new Promise(INTERNAL);
                return new PromiseResolver(promise)
              };
              Promise.cast = function (obj) {
                var ret = tryConvertToPromise(obj);
                if (!(ret instanceof Promise)) {
                  var val = ret;
                  ret = new Promise(INTERNAL);
                  ret._fulfillUnchecked(val)
                }
                return ret
              };
              Promise.resolve = Promise.fulfilled = Promise.cast;
              Promise.reject = Promise.rejected = function (reason) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._rejectCallback(reason, true);
                return ret
              };
              Promise.setScheduler = function (fn) {
                if (typeof fn !== 'function')
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var prev = async._schedule;
                async._schedule = fn;
                return prev
              };
              Promise.prototype._then = function (didFulfill, didReject, didProgress, receiver, internalData) {
                var haveInternalData = internalData !== undefined;
                var ret = haveInternalData ? internalData : new Promise(INTERNAL);
                if (!haveInternalData) {
                  ret._propagateFrom(this, 4 | 1);
                  ret._captureStackTrace()
                }
                var target = this._target();
                if (target !== this) {
                  if (receiver === undefined)
                    receiver = this._boundTo;
                  if (!haveInternalData)
                    ret._setIsMigrated()
                }
                var callbackIndex = target._addCallbacks(didFulfill, didReject, didProgress, ret, receiver, getDomain());
                if (target._isResolved() && !target._isSettlePromisesQueued()) {
                  async.invoke(target._settlePromiseAtPostResolution, target, callbackIndex)
                }
                return ret
              };
              Promise.prototype._settlePromiseAtPostResolution = function (index) {
                if (this._isRejectionUnhandled())
                  this._unsetRejectionIsUnhandled();
                this._settlePromiseAt(index)
              };
              Promise.prototype._length = function () {
                return this._bitField & 131071
              };
              Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
                return (this._bitField & 939524096) > 0
              };
              Promise.prototype._isFollowing = function () {
                return (this._bitField & 536870912) === 536870912
              };
              Promise.prototype._setLength = function (len) {
                this._bitField = this._bitField & -131072 | len & 131071
              };
              Promise.prototype._setFulfilled = function () {
                this._bitField = this._bitField | 268435456
              };
              Promise.prototype._setRejected = function () {
                this._bitField = this._bitField | 134217728
              };
              Promise.prototype._setFollowing = function () {
                this._bitField = this._bitField | 536870912
              };
              Promise.prototype._setIsFinal = function () {
                this._bitField = this._bitField | 33554432
              };
              Promise.prototype._isFinal = function () {
                return (this._bitField & 33554432) > 0
              };
              Promise.prototype._cancellable = function () {
                return (this._bitField & 67108864) > 0
              };
              Promise.prototype._setCancellable = function () {
                this._bitField = this._bitField | 67108864
              };
              Promise.prototype._unsetCancellable = function () {
                this._bitField = this._bitField & ~67108864
              };
              Promise.prototype._setIsMigrated = function () {
                this._bitField = this._bitField | 4194304
              };
              Promise.prototype._unsetIsMigrated = function () {
                this._bitField = this._bitField & ~4194304
              };
              Promise.prototype._isMigrated = function () {
                return (this._bitField & 4194304) > 0
              };
              Promise.prototype._receiverAt = function (index) {
                var ret = index === 0 ? this._receiver0 : this[index * 5 - 5 + 4];
                if (ret === UNDEFINED_BINDING) {
                  return undefined
                } else if (ret === undefined && this._isBound()) {
                  return this._boundValue()
                }
                return ret
              };
              Promise.prototype._promiseAt = function (index) {
                return index === 0 ? this._promise0 : this[index * 5 - 5 + 3]
              };
              Promise.prototype._fulfillmentHandlerAt = function (index) {
                return index === 0 ? this._fulfillmentHandler0 : this[index * 5 - 5 + 0]
              };
              Promise.prototype._rejectionHandlerAt = function (index) {
                return index === 0 ? this._rejectionHandler0 : this[index * 5 - 5 + 1]
              };
              Promise.prototype._boundValue = function () {
                var ret = this._boundTo;
                if (ret !== undefined) {
                  if (ret instanceof Promise) {
                    if (ret.isFulfilled()) {
                      return ret.value()
                    } else {
                      return undefined
                    }
                  }
                }
                return ret
              };
              Promise.prototype._migrateCallbacks = function (follower, index) {
                var fulfill = follower._fulfillmentHandlerAt(index);
                var reject = follower._rejectionHandlerAt(index);
                var progress = follower._progressHandlerAt(index);
                var promise = follower._promiseAt(index);
                var receiver = follower._receiverAt(index);
                if (promise instanceof Promise)
                  promise._setIsMigrated();
                if (receiver === undefined)
                  receiver = UNDEFINED_BINDING;
                this._addCallbacks(fulfill, reject, progress, promise, receiver, null)
              };
              Promise.prototype._addCallbacks = function (fulfill, reject, progress, promise, receiver, domain) {
                var index = this._length();
                if (index >= 131071 - 5) {
                  index = 0;
                  this._setLength(0)
                }
                if (index === 0) {
                  this._promise0 = promise;
                  if (receiver !== undefined)
                    this._receiver0 = receiver;
                  if (typeof fulfill === 'function' && !this._isCarryingStackTrace()) {
                    this._fulfillmentHandler0 = domain === null ? fulfill : domain.bind(fulfill)
                  }
                  if (typeof reject === 'function') {
                    this._rejectionHandler0 = domain === null ? reject : domain.bind(reject)
                  }
                  if (typeof progress === 'function') {
                    this._progressHandler0 = domain === null ? progress : domain.bind(progress)
                  }
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = promise;
                  this[base + 4] = receiver;
                  if (typeof fulfill === 'function') {
                    this[base + 0] = domain === null ? fulfill : domain.bind(fulfill)
                  }
                  if (typeof reject === 'function') {
                    this[base + 1] = domain === null ? reject : domain.bind(reject)
                  }
                  if (typeof progress === 'function') {
                    this[base + 2] = domain === null ? progress : domain.bind(progress)
                  }
                }
                this._setLength(index + 1);
                return index
              };
              Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
                var index = this._length();
                if (index >= 131071 - 5) {
                  index = 0;
                  this._setLength(0)
                }
                if (index === 0) {
                  this._promise0 = promiseSlotValue;
                  this._receiver0 = receiver
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = promiseSlotValue;
                  this[base + 4] = receiver
                }
                this._setLength(index + 1)
              };
              Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
                this._setProxyHandlers(promiseArray, index)
              };
              Promise.prototype._resolveCallback = function (value, shouldBind) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                if (value === this)
                  return this._rejectCallback(makeSelfResolutionError(), false, true);
                var maybePromise = tryConvertToPromise(value, this);
                if (!(maybePromise instanceof Promise))
                  return this._fulfill(value);
                var propagationFlags = 1 | (shouldBind ? 4 : 0);
                this._propagateFrom(maybePromise, propagationFlags);
                var promise = maybePromise._target();
                if (promise._isPending()) {
                  var len = this._length();
                  for (var i = 0; i < len; ++i) {
                    promise._migrateCallbacks(this, i)
                  }
                  this._setFollowing();
                  this._setLength(0);
                  this._setFollowee(promise)
                } else if (promise._isFulfilled()) {
                  this._fulfillUnchecked(promise._value())
                } else {
                  this._rejectUnchecked(promise._reason(), promise._getCarriedStackTrace())
                }
              };
              Promise.prototype._rejectCallback = function (reason, synchronous, shouldNotMarkOriginatingFromRejection) {
                if (!shouldNotMarkOriginatingFromRejection) {
                  util.markAsOriginatingFromRejection(reason)
                }
                var trace = util.ensureErrorObject(reason);
                var hasStack = trace === reason;
                this._attachExtraTrace(trace, synchronous ? hasStack : false);
                this._reject(reason, hasStack ? undefined : trace)
              };
              Promise.prototype._resolveFromResolver = function (resolver) {
                var promise = this;
                this._captureStackTrace();
                this._pushContext();
                var synchronous = true;
                var r = tryCatch(resolver)(function (value) {
                  if (promise === null)
                    return;
                  promise._resolveCallback(value);
                  promise = null
                }, function (reason) {
                  if (promise === null)
                    return;
                  promise._rejectCallback(reason, synchronous);
                  promise = null
                });
                synchronous = false;
                this._popContext();
                if (r !== undefined && r === errorObj && promise !== null) {
                  promise._rejectCallback(r.e, true, true);
                  promise = null
                }
              };
              Promise.prototype._settlePromiseFromHandler = function (handler, receiver, value, promise) {
                if (promise._isRejected())
                  return;
                promise._pushContext();
                var x;
                if (receiver === APPLY && !this._isRejected()) {
                  x = tryCatch(handler).apply(this._boundValue(), value)
                } else {
                  x = tryCatch(handler).call(receiver, value)
                }
                promise._popContext();
                if (x === errorObj || x === promise || x === NEXT_FILTER) {
                  var err = x === promise ? makeSelfResolutionError() : x.e;
                  promise._rejectCallback(err, false, true)
                } else {
                  promise._resolveCallback(x)
                }
              };
              Promise.prototype._target = function () {
                var ret = this;
                while (ret._isFollowing())
                  ret = ret._followee();
                return ret
              };
              Promise.prototype._followee = function () {
                return this._rejectionHandler0
              };
              Promise.prototype._setFollowee = function (promise) {
                this._rejectionHandler0 = promise
              };
              Promise.prototype._cleanValues = function () {
                if (this._cancellable()) {
                  this._cancellationParent = undefined
                }
              };
              Promise.prototype._propagateFrom = function (parent, flags) {
                if ((flags & 1) > 0 && parent._cancellable()) {
                  this._setCancellable();
                  this._cancellationParent = parent
                }
                if ((flags & 4) > 0 && parent._isBound()) {
                  this._setBoundTo(parent._boundTo)
                }
              };
              Promise.prototype._fulfill = function (value) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._fulfillUnchecked(value)
              };
              Promise.prototype._reject = function (reason, carriedStackTrace) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._rejectUnchecked(reason, carriedStackTrace)
              };
              Promise.prototype._settlePromiseAt = function (index) {
                var promise = this._promiseAt(index);
                var isPromise = promise instanceof Promise;
                if (isPromise && promise._isMigrated()) {
                  promise._unsetIsMigrated();
                  return async.invoke(this._settlePromiseAt, this, index)
                }
                var handler = this._isFulfilled() ? this._fulfillmentHandlerAt(index) : this._rejectionHandlerAt(index);
                var carriedStackTrace = this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
                var value = this._settledValue;
                var receiver = this._receiverAt(index);
                this._clearCallbackDataAtIndex(index);
                if (typeof handler === 'function') {
                  if (!isPromise) {
                    handler.call(receiver, value, promise)
                  } else {
                    this._settlePromiseFromHandler(handler, receiver, value, promise)
                  }
                } else if (receiver instanceof PromiseArray) {
                  if (!receiver._isResolved()) {
                    if (this._isFulfilled()) {
                      receiver._promiseFulfilled(value, promise)
                    } else {
                      receiver._promiseRejected(value, promise)
                    }
                  }
                } else if (isPromise) {
                  if (this._isFulfilled()) {
                    promise._fulfill(value)
                  } else {
                    promise._reject(value, carriedStackTrace)
                  }
                }
                if (index >= 4 && (index & 31) === 4)
                  async.invokeLater(this._setLength, this, 0)
              };
              Promise.prototype._clearCallbackDataAtIndex = function (index) {
                if (index === 0) {
                  if (!this._isCarryingStackTrace()) {
                    this._fulfillmentHandler0 = undefined
                  }
                  this._rejectionHandler0 = this._progressHandler0 = this._receiver0 = this._promise0 = undefined
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = this[base + 4] = this[base + 0] = this[base + 1] = this[base + 2] = undefined
                }
              };
              Promise.prototype._isSettlePromisesQueued = function () {
                return (this._bitField & -1073741824) === -1073741824
              };
              Promise.prototype._setSettlePromisesQueued = function () {
                this._bitField = this._bitField | -1073741824
              };
              Promise.prototype._unsetSettlePromisesQueued = function () {
                this._bitField = this._bitField & ~-1073741824
              };
              Promise.prototype._queueSettlePromises = function () {
                async.settlePromises(this);
                this._setSettlePromisesQueued()
              };
              Promise.prototype._fulfillUnchecked = function (value) {
                if (value === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._rejectUnchecked(err, undefined)
                }
                this._setFulfilled();
                this._settledValue = value;
                this._cleanValues();
                if (this._length() > 0) {
                  this._queueSettlePromises()
                }
              };
              Promise.prototype._rejectUncheckedCheckError = function (reason) {
                var trace = util.ensureErrorObject(reason);
                this._rejectUnchecked(reason, trace === reason ? undefined : trace)
              };
              Promise.prototype._rejectUnchecked = function (reason, trace) {
                if (reason === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._rejectUnchecked(err)
                }
                this._setRejected();
                this._settledValue = reason;
                this._cleanValues();
                if (this._isFinal()) {
                  async.throwLater(function (e) {
                    if ('stack' in e) {
                      async.invokeFirst(CapturedTrace.unhandledRejection, undefined, e)
                    }
                    throw e
                  }, trace === undefined ? reason : trace);
                  return
                }
                if (trace !== undefined && trace !== reason) {
                  this._setCarriedStackTrace(trace)
                }
                if (this._length() > 0) {
                  this._queueSettlePromises()
                } else {
                  this._ensurePossibleRejectionHandled()
                }
              };
              Promise.prototype._settlePromises = function () {
                this._unsetSettlePromisesQueued();
                var len = this._length();
                for (var i = 0; i < len; i++) {
                  this._settlePromiseAt(i)
                }
              };
              util.notEnumerableProp(Promise, '_makeSelfResolutionError', makeSelfResolutionError);
              _dereq_('./progress.js')(Promise, PromiseArray);
              _dereq_('./method.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              _dereq_('./bind.js')(Promise, INTERNAL, tryConvertToPromise);
              _dereq_('./finally.js')(Promise, NEXT_FILTER, tryConvertToPromise);
              _dereq_('./direct_resolve.js')(Promise);
              _dereq_('./synchronous_inspection.js')(Promise);
              _dereq_('./join.js')(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
              Promise.Promise = Promise;
              _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
              _dereq_('./cancel.js')(Promise);
              _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
              _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
              _dereq_('./nodeify.js')(Promise);
              _dereq_('./call_get.js')(Promise);
              _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
              _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
              _dereq_('./settle.js')(Promise, PromiseArray);
              _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
              _dereq_('./promisify.js')(Promise, INTERNAL);
              _dereq_('./any.js')(Promise);
              _dereq_('./each.js')(Promise, INTERNAL);
              _dereq_('./timers.js')(Promise, INTERNAL);
              _dereq_('./filter.js')(Promise, INTERNAL);
              util.toFastProperties(Promise);
              util.toFastProperties(Promise.prototype);
              function fillTypes(value) {
                var p = new Promise(INTERNAL);
                p._fulfillmentHandler0 = value;
                p._rejectionHandler0 = value;
                p._progressHandler0 = value;
                p._promise0 = value;
                p._receiver0 = value;
                p._settledValue = value
              }
              // Complete slack tracking, opt out of field-type tracking and           
              // stabilize map                                                         
              fillTypes({ a: 1 });
              fillTypes({ b: 2 });
              fillTypes({ c: 3 });
              fillTypes(1);
              fillTypes(function () {
              });
              fillTypes(undefined);
              fillTypes(false);
              fillTypes(new Promise(INTERNAL));
              CapturedTrace.setBounds(async.firstLineError, util.lastLineError);
              return Promise
            }
          },
          {
            './any.js': 1,
            './async.js': 2,
            './bind.js': 3,
            './call_get.js': 5,
            './cancel.js': 6,
            './captured_trace.js': 7,
            './catch_filter.js': 8,
            './context.js': 9,
            './debuggability.js': 10,
            './direct_resolve.js': 11,
            './each.js': 12,
            './errors.js': 13,
            './filter.js': 15,
            './finally.js': 16,
            './generators.js': 17,
            './join.js': 18,
            './map.js': 19,
            './method.js': 20,
            './nodeify.js': 21,
            './progress.js': 22,
            './promise_array.js': 24,
            './promise_resolver.js': 25,
            './promisify.js': 26,
            './props.js': 27,
            './race.js': 29,
            './reduce.js': 30,
            './settle.js': 32,
            './some.js': 33,
            './synchronous_inspection.js': 34,
            './thenables.js': 35,
            './timers.js': 36,
            './using.js': 37,
            './util.js': 38
          }
        ],
        24: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var isArray = util.isArray;
              function toResolutionValue(val) {
                switch (val) {
                case -2:
                  return [];
                case -3:
                  return {}
                }
              }
              function PromiseArray(values) {
                var promise = this._promise = new Promise(INTERNAL);
                var parent;
                if (values instanceof Promise) {
                  parent = values;
                  promise._propagateFrom(parent, 1 | 4)
                }
                this._values = values;
                this._length = 0;
                this._totalResolved = 0;
                this._init(undefined, -2)
              }
              PromiseArray.prototype.length = function () {
                return this._length
              };
              PromiseArray.prototype.promise = function () {
                return this._promise
              };
              PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
                var values = tryConvertToPromise(this._values, this._promise);
                if (values instanceof Promise) {
                  values = values._target();
                  this._values = values;
                  if (values._isFulfilled()) {
                    values = values._value();
                    if (!isArray(values)) {
                      var err = new Promise.TypeError('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n');
                      this.__hardReject__(err);
                      return
                    }
                  } else if (values._isPending()) {
                    values._then(init, this._reject, undefined, this, resolveValueIfEmpty);
                    return
                  } else {
                    this._reject(values._reason());
                    return
                  }
                } else if (!isArray(values)) {
                  this._promise._reject(apiRejection('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n')._reason());
                  return
                }
                if (values.length === 0) {
                  if (resolveValueIfEmpty === -5) {
                    this._resolveEmptyArray()
                  } else {
                    this._resolve(toResolutionValue(resolveValueIfEmpty))
                  }
                  return
                }
                var len = this.getActualLength(values.length);
                this._length = len;
                this._values = this.shouldCopyValues() ? new Array(len) : this._values;
                var promise = this._promise;
                for (var i = 0; i < len; ++i) {
                  var isResolved = this._isResolved();
                  var maybePromise = tryConvertToPromise(values[i], promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (isResolved) {
                      maybePromise._ignoreRejections()
                    } else if (maybePromise._isPending()) {
                      maybePromise._proxyPromiseArray(this, i)
                    } else if (maybePromise._isFulfilled()) {
                      this._promiseFulfilled(maybePromise._value(), i)
                    } else {
                      this._promiseRejected(maybePromise._reason(), i)
                    }
                  } else if (!isResolved) {
                    this._promiseFulfilled(maybePromise, i)
                  }
                }
              };
              PromiseArray.prototype._isResolved = function () {
                return this._values === null
              };
              PromiseArray.prototype._resolve = function (value) {
                this._values = null;
                this._promise._fulfill(value)
              };
              PromiseArray.prototype.__hardReject__ = PromiseArray.prototype._reject = function (reason) {
                this._values = null;
                this._promise._rejectCallback(reason, false, true)
              };
              PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
                this._promise._progress({
                  index: index,
                  value: progressValue
                })
              };
              PromiseArray.prototype._promiseFulfilled = function (value, index) {
                this._values[index] = value;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  this._resolve(this._values)
                }
              };
              PromiseArray.prototype._promiseRejected = function (reason, index) {
                this._totalResolved++;
                this._reject(reason)
              };
              PromiseArray.prototype.shouldCopyValues = function () {
                return true
              };
              PromiseArray.prototype.getActualLength = function (len) {
                return len
              };
              return PromiseArray
            }
          },
          { './util.js': 38 }
        ],
        25: [
          function (_dereq_, module, exports) {
            'use strict';
            var util = _dereq_('./util.js');
            var maybeWrapAsError = util.maybeWrapAsError;
            var errors = _dereq_('./errors.js');
            var TimeoutError = errors.TimeoutError;
            var OperationalError = errors.OperationalError;
            var haveGetters = util.haveGetters;
            var es5 = _dereq_('./es5.js');
            function isUntypedError(obj) {
              return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype
            }
            var rErrorKey = /^(?:name|message|stack|cause)$/;
            function wrapAsOperationalError(obj) {
              var ret;
              if (isUntypedError(obj)) {
                ret = new OperationalError(obj);
                ret.name = obj.name;
                ret.message = obj.message;
                ret.stack = obj.stack;
                var keys = es5.keys(obj);
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  if (!rErrorKey.test(key)) {
                    ret[key] = obj[key]
                  }
                }
                return ret
              }
              util.markAsOriginatingFromRejection(obj);
              return obj
            }
            function nodebackForPromise(promise) {
              return function (err, value) {
                if (promise === null)
                  return;
                if (err) {
                  var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
                  promise._attachExtraTrace(wrapped);
                  promise._reject(wrapped)
                } else if (arguments.length > 2) {
                  var $_len = arguments.length;
                  var args = new Array($_len - 1);
                  for (var $_i = 1; $_i < $_len; ++$_i) {
                    args[$_i - 1] = arguments[$_i]
                  }
                  promise._fulfill(args)
                } else {
                  promise._fulfill(value)
                }
                promise = null
              }
            }
            var PromiseResolver;
            if (!haveGetters) {
              PromiseResolver = function (promise) {
                this.promise = promise;
                this.asCallback = nodebackForPromise(promise);
                this.callback = this.asCallback
              }
            } else {
              PromiseResolver = function (promise) {
                this.promise = promise
              }
            }
            if (haveGetters) {
              var prop = {
                get: function () {
                  return nodebackForPromise(this.promise)
                }
              };
              es5.defineProperty(PromiseResolver.prototype, 'asCallback', prop);
              es5.defineProperty(PromiseResolver.prototype, 'callback', prop)
            }
            PromiseResolver._nodebackForPromise = nodebackForPromise;
            PromiseResolver.prototype.toString = function () {
              return '[object PromiseResolver]'
            };
            PromiseResolver.prototype.resolve = PromiseResolver.prototype.fulfill = function (value) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._resolveCallback(value)
            };
            PromiseResolver.prototype.reject = function (reason) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._rejectCallback(reason)
            };
            PromiseResolver.prototype.progress = function (value) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._progress(value)
            };
            PromiseResolver.prototype.cancel = function (err) {
              this.promise.cancel(err)
            };
            PromiseResolver.prototype.timeout = function () {
              this.reject(new TimeoutError('timeout'))
            };
            PromiseResolver.prototype.isResolved = function () {
              return this.promise.isResolved()
            };
            PromiseResolver.prototype.toJSON = function () {
              return this.promise.toJSON()
            };
            module.exports = PromiseResolver
          },
          {
            './errors.js': 13,
            './es5.js': 14,
            './util.js': 38
          }
        ],
        26: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var THIS = {};
              var util = _dereq_('./util.js');
              var nodebackForPromise = _dereq_('./promise_resolver.js')._nodebackForPromise;
              var withAppended = util.withAppended;
              var maybeWrapAsError = util.maybeWrapAsError;
              var canEvaluate = util.canEvaluate;
              var TypeError = _dereq_('./errors').TypeError;
              var defaultSuffix = 'Async';
              var defaultPromisified = { __isPromisified__: true };
              var noCopyProps = [
                'arity',
                'length',
                'name',
                'arguments',
                'caller',
                'callee',
                'prototype',
                '__isPromisified__'
              ];
              var noCopyPropsPattern = new RegExp('^(?:' + noCopyProps.join('|') + ')$');
              var defaultFilter = function (name) {
                return util.isIdentifier(name) && name.charAt(0) !== '_' && name !== 'constructor'
              };
              function propsFilter(key) {
                return !noCopyPropsPattern.test(key)
              }
              function isPromisified(fn) {
                try {
                  return fn.__isPromisified__ === true
                } catch (e) {
                  return false
                }
              }
              function hasPromisified(obj, key, suffix) {
                var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
                return val ? isPromisified(val) : false
              }
              function checkValid(ret, suffix, suffixRegexp) {
                for (var i = 0; i < ret.length; i += 2) {
                  var key = ret[i];
                  if (suffixRegexp.test(key)) {
                    var keyWithoutAsyncSuffix = key.replace(suffixRegexp, '');
                    for (var j = 0; j < ret.length; j += 2) {
                      if (ret[j] === keyWithoutAsyncSuffix) {
                        throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/iWrZbw\n".replace('%s', suffix))
                      }
                    }
                  }
                }
              }
              function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
                var keys = util.inheritedDataKeys(obj);
                var ret = [];
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  var value = obj[key];
                  var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj);
                  if (typeof value === 'function' && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj, passesDefaultFilter)) {
                    ret.push(key, value)
                  }
                }
                checkValid(ret, suffix, suffixRegexp);
                return ret
              }
              var escapeIdentRegex = function (str) {
                return str.replace(/([$])/, '\\$')
              };
              var makeNodePromisifiedEval;
              if (!true) {
                var switchCaseArgumentOrder = function (likelyArgumentCount) {
                  var ret = [likelyArgumentCount];
                  var min = Math.max(0, likelyArgumentCount - 1 - 3);
                  for (var i = likelyArgumentCount - 1; i >= min; --i) {
                    ret.push(i)
                  }
                  for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                    ret.push(i)
                  }
                  return ret
                };
                var argumentSequence = function (argumentCount) {
                  return util.filledRange(argumentCount, '_arg', '')
                };
                var parameterDeclaration = function (parameterCount) {
                  return util.filledRange(Math.max(parameterCount, 3), '_arg', '')
                };
                var parameterCount = function (fn) {
                  if (typeof fn.length === 'number') {
                    return Math.max(Math.min(fn.length, 1023 + 1), 0)
                  }
                  return 0
                };
                makeNodePromisifiedEval = function (callback, receiver, originalName, fn) {
                  var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                  var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                  var shouldProxyThis = typeof callback === 'string' || receiver === THIS;
                  function generateCallForArgumentCount(count) {
                    var args = argumentSequence(count).join(', ');
                    var comma = count > 0 ? ', ' : '';
                    var ret;
                    if (shouldProxyThis) {
                      ret = 'ret = callback.call(this, {{args}}, nodeback); break;\n'
                    } else {
                      ret = receiver === undefined ? 'ret = callback({{args}}, nodeback); break;\n' : 'ret = callback.call(receiver, {{args}}, nodeback); break;\n'
                    }
                    return ret.replace('{{args}}', args).replace(', ', comma)
                  }
                  function generateArgumentSwitchCase() {
                    var ret = '';
                    for (var i = 0; i < argumentOrder.length; ++i) {
                      ret += 'case ' + argumentOrder[i] + ':' + generateCallForArgumentCount(argumentOrder[i])
                    }
                    ret += '                                                             \n        default:                                                             \n            var args = new Array(len + 1);                                   \n            var i = 0;                                                       \n            for (var i = 0; i < len; ++i) {                                  \n               args[i] = arguments[i];                                       \n            }                                                                \n            args[i] = nodeback;                                              \n            [CodeForCall]                                                    \n            break;                                                           \n        '.replace('[CodeForCall]', shouldProxyThis ? 'ret = callback.apply(this, args);\n' : 'ret = callback.apply(receiver, args);\n');
                    return ret
                  }
                  var getFunctionCode = typeof callback === 'string' ? "this != null ? this['" + callback + "'] : fn" : 'fn';
                  return new Function('Promise', 'fn', 'receiver', 'withAppended', 'maybeWrapAsError', 'nodebackForPromise', 'tryCatch', 'errorObj', 'notEnumerableProp', 'INTERNAL', "'use strict';                            \n        var ret = function (Parameters) {                                    \n            'use strict';                                                    \n            var len = arguments.length;                                      \n            var promise = new Promise(INTERNAL);                             \n            promise._captureStackTrace();                                    \n            var nodeback = nodebackForPromise(promise);                      \n            var ret;                                                         \n            var callback = tryCatch([GetFunctionCode]);                      \n            switch(len) {                                                    \n                [CodeForSwitchCase]                                          \n            }                                                                \n            if (ret === errorObj) {                                          \n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n            }                                                                \n            return promise;                                                  \n        };                                                                   \n        notEnumerableProp(ret, '__isPromisified__', true);                   \n        return ret;                                                          \n        ".replace('Parameters', parameterDeclaration(newParameterCount)).replace('[CodeForSwitchCase]', generateArgumentSwitchCase()).replace('[GetFunctionCode]', getFunctionCode))(Promise, fn, receiver, withAppended, maybeWrapAsError, nodebackForPromise, util.tryCatch, util.errorObj, util.notEnumerableProp, INTERNAL)
                }
              }
              function makeNodePromisifiedClosure(callback, receiver, _, fn) {
                var defaultThis = function () {
                  return this
                }();
                var method = callback;
                if (typeof method === 'string') {
                  callback = fn
                }
                function promisified() {
                  var _receiver = receiver;
                  if (receiver === THIS)
                    _receiver = this;
                  var promise = new Promise(INTERNAL);
                  promise._captureStackTrace();
                  var cb = typeof method === 'string' && this !== defaultThis ? this[method] : callback;
                  var fn = nodebackForPromise(promise);
                  try {
                    cb.apply(_receiver, withAppended(arguments, fn))
                  } catch (e) {
                    promise._rejectCallback(maybeWrapAsError(e), true, true)
                  }
                  return promise
                }
                util.notEnumerableProp(promisified, '__isPromisified__', true);
                return promisified
              }
              var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
              function promisifyAll(obj, suffix, filter, promisifier) {
                var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + '$');
                var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
                for (var i = 0, len = methods.length; i < len; i += 2) {
                  var key = methods[i];
                  var fn = methods[i + 1];
                  var promisifiedKey = key + suffix;
                  if (promisifier === makeNodePromisified) {
                    obj[promisifiedKey] = makeNodePromisified(key, THIS, key, fn, suffix)
                  } else {
                    var promisified = promisifier(fn, function () {
                      return makeNodePromisified(key, THIS, key, fn, suffix)
                    });
                    util.notEnumerableProp(promisified, '__isPromisified__', true);
                    obj[promisifiedKey] = promisified
                  }
                }
                util.toFastProperties(obj);
                return obj
              }
              function promisify(callback, receiver) {
                return makeNodePromisified(callback, receiver, undefined, callback)
              }
              Promise.promisify = function (fn, receiver) {
                if (typeof fn !== 'function') {
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                if (isPromisified(fn)) {
                  return fn
                }
                var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
                util.copyDescriptors(fn, ret, propsFilter);
                return ret
              };
              Promise.promisifyAll = function (target, options) {
                if (typeof target !== 'function' && typeof target !== 'object') {
                  throw new TypeError('the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/9ITlV0\n')
                }
                options = Object(options);
                var suffix = options.suffix;
                if (typeof suffix !== 'string')
                  suffix = defaultSuffix;
                var filter = options.filter;
                if (typeof filter !== 'function')
                  filter = defaultFilter;
                var promisifier = options.promisifier;
                if (typeof promisifier !== 'function')
                  promisifier = makeNodePromisified;
                if (!util.isIdentifier(suffix)) {
                  throw new RangeError('suffix must be a valid identifier\n\n    See http://goo.gl/8FZo5V\n')
                }
                var keys = util.inheritedDataKeys(target);
                for (var i = 0; i < keys.length; ++i) {
                  var value = target[keys[i]];
                  if (keys[i] !== 'constructor' && util.isClass(value)) {
                    promisifyAll(value.prototype, suffix, filter, promisifier);
                    promisifyAll(value, suffix, filter, promisifier)
                  }
                }
                return promisifyAll(target, suffix, filter, promisifier)
              }
            }
          },
          {
            './errors': 13,
            './promise_resolver.js': 25,
            './util.js': 38
          }
        ],
        27: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var isObject = util.isObject;
              var es5 = _dereq_('./es5.js');
              function PropertiesPromiseArray(obj) {
                var keys = es5.keys(obj);
                var len = keys.length;
                var values = new Array(len * 2);
                for (var i = 0; i < len; ++i) {
                  var key = keys[i];
                  values[i] = obj[key];
                  values[i + len] = key
                }
                this.constructor$(values)
              }
              util.inherits(PropertiesPromiseArray, PromiseArray);
              PropertiesPromiseArray.prototype._init = function () {
                this._init$(undefined, -3)
              };
              PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
                this._values[index] = value;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  var val = {};
                  var keyOffset = this.length();
                  for (var i = 0, len = this.length(); i < len; ++i) {
                    val[this._values[i + keyOffset]] = this._values[i]
                  }
                  this._resolve(val)
                }
              };
              PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
                this._promise._progress({
                  key: this._values[index + this.length()],
                  value: value
                })
              };
              PropertiesPromiseArray.prototype.shouldCopyValues = function () {
                return false
              };
              PropertiesPromiseArray.prototype.getActualLength = function (len) {
                return len >> 1
              };
              function props(promises) {
                var ret;
                var castValue = tryConvertToPromise(promises);
                if (!isObject(castValue)) {
                  return apiRejection('cannot await properties of a non-object\n\n    See http://goo.gl/OsFKC8\n')
                } else if (castValue instanceof Promise) {
                  ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined)
                } else {
                  ret = new PropertiesPromiseArray(castValue).promise()
                }
                if (castValue instanceof Promise) {
                  ret._propagateFrom(castValue, 4)
                }
                return ret
              }
              Promise.prototype.props = function () {
                return props(this)
              };
              Promise.props = function (promises) {
                return props(promises)
              }
            }
          },
          {
            './es5.js': 14,
            './util.js': 38
          }
        ],
        28: [
          function (_dereq_, module, exports) {
            'use strict';
            function arrayMove(src, srcIndex, dst, dstIndex, len) {
              for (var j = 0; j < len; ++j) {
                dst[j + dstIndex] = src[j + srcIndex];
                src[j + srcIndex] = void 0
              }
            }
            function Queue(capacity) {
              this._capacity = capacity;
              this._length = 0;
              this._front = 0
            }
            Queue.prototype._willBeOverCapacity = function (size) {
              return this._capacity < size
            };
            Queue.prototype._pushOne = function (arg) {
              var length = this.length();
              this._checkCapacity(length + 1);
              var i = this._front + length & this._capacity - 1;
              this[i] = arg;
              this._length = length + 1
            };
            Queue.prototype._unshiftOne = function (value) {
              var capacity = this._capacity;
              this._checkCapacity(this.length() + 1);
              var front = this._front;
              var i = (front - 1 & capacity - 1 ^ capacity) - capacity;
              this[i] = value;
              this._front = i;
              this._length = this.length() + 1
            };
            Queue.prototype.unshift = function (fn, receiver, arg) {
              this._unshiftOne(arg);
              this._unshiftOne(receiver);
              this._unshiftOne(fn)
            };
            Queue.prototype.push = function (fn, receiver, arg) {
              var length = this.length() + 3;
              if (this._willBeOverCapacity(length)) {
                this._pushOne(fn);
                this._pushOne(receiver);
                this._pushOne(arg);
                return
              }
              var j = this._front + length - 3;
              this._checkCapacity(length);
              var wrapMask = this._capacity - 1;
              this[j + 0 & wrapMask] = fn;
              this[j + 1 & wrapMask] = receiver;
              this[j + 2 & wrapMask] = arg;
              this._length = length
            };
            Queue.prototype.shift = function () {
              var front = this._front, ret = this[front];
              this[front] = undefined;
              this._front = front + 1 & this._capacity - 1;
              this._length--;
              return ret
            };
            Queue.prototype.length = function () {
              return this._length
            };
            Queue.prototype._checkCapacity = function (size) {
              if (this._capacity < size) {
                this._resizeTo(this._capacity << 1)
              }
            };
            Queue.prototype._resizeTo = function (capacity) {
              var oldCapacity = this._capacity;
              this._capacity = capacity;
              var front = this._front;
              var length = this._length;
              var moveItemsCount = front + length & oldCapacity - 1;
              arrayMove(this, 0, this, oldCapacity, moveItemsCount)
            };
            module.exports = Queue
          },
          {}
        ],
        29: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var isArray = _dereq_('./util.js').isArray;
              var raceLater = function (promise) {
                return promise.then(function (array) {
                  return race(array, promise)
                })
              };
              function race(promises, parent) {
                var maybePromise = tryConvertToPromise(promises);
                if (maybePromise instanceof Promise) {
                  return raceLater(maybePromise)
                } else if (!isArray(promises)) {
                  return apiRejection('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n')
                }
                var ret = new Promise(INTERNAL);
                if (parent !== undefined) {
                  ret._propagateFrom(parent, 4 | 1)
                }
                var fulfill = ret._fulfill;
                var reject = ret._reject;
                for (var i = 0, len = promises.length; i < len; ++i) {
                  var val = promises[i];
                  if (val === undefined && !(i in promises)) {
                    continue
                  }
                  Promise.cast(val)._then(fulfill, reject, undefined, ret, null)
                }
                return ret
              }
              Promise.race = function (promises) {
                return race(promises, undefined)
              };
              Promise.prototype.race = function () {
                return race(this, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        30: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              function ReductionPromiseArray(promises, fn, accum, _each) {
                this.constructor$(promises);
                this._promise._captureStackTrace();
                this._preservedValues = _each === INTERNAL ? [] : null;
                this._zerothIsAccum = accum === undefined;
                this._gotAccum = false;
                this._reducingIndex = this._zerothIsAccum ? 1 : 0;
                this._valuesPhase = undefined;
                var maybePromise = tryConvertToPromise(accum, this._promise);
                var rejected = false;
                var isPromise = maybePromise instanceof Promise;
                if (isPromise) {
                  maybePromise = maybePromise._target();
                  if (maybePromise._isPending()) {
                    maybePromise._proxyPromiseArray(this, -1)
                  } else if (maybePromise._isFulfilled()) {
                    accum = maybePromise._value();
                    this._gotAccum = true
                  } else {
                    this._reject(maybePromise._reason());
                    rejected = true
                  }
                }
                if (!(isPromise || this._zerothIsAccum))
                  this._gotAccum = true;
                var domain = getDomain();
                this._callback = domain === null ? fn : domain.bind(fn);
                this._accum = accum;
                if (!rejected)
                  async.invoke(init, this, undefined)
              }
              function init() {
                this._init$(undefined, -5)
              }
              util.inherits(ReductionPromiseArray, PromiseArray);
              ReductionPromiseArray.prototype._init = function () {
              };
              ReductionPromiseArray.prototype._resolveEmptyArray = function () {
                if (this._gotAccum || this._zerothIsAccum) {
                  this._resolve(this._preservedValues !== null ? [] : this._accum)
                }
              };
              ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var values = this._values;
                values[index] = value;
                var length = this.length();
                var preservedValues = this._preservedValues;
                var isEach = preservedValues !== null;
                var gotAccum = this._gotAccum;
                var valuesPhase = this._valuesPhase;
                var valuesPhaseIndex;
                if (!valuesPhase) {
                  valuesPhase = this._valuesPhase = new Array(length);
                  for (valuesPhaseIndex = 0; valuesPhaseIndex < length; ++valuesPhaseIndex) {
                    valuesPhase[valuesPhaseIndex] = 0
                  }
                }
                valuesPhaseIndex = valuesPhase[index];
                if (index === 0 && this._zerothIsAccum) {
                  this._accum = value;
                  this._gotAccum = gotAccum = true;
                  valuesPhase[index] = valuesPhaseIndex === 0 ? 1 : 2
                } else if (index === -1) {
                  this._accum = value;
                  this._gotAccum = gotAccum = true
                } else {
                  if (valuesPhaseIndex === 0) {
                    valuesPhase[index] = 1
                  } else {
                    valuesPhase[index] = 2;
                    this._accum = value
                  }
                }
                if (!gotAccum)
                  return;
                var callback = this._callback;
                var receiver = this._promise._boundValue();
                var ret;
                for (var i = this._reducingIndex; i < length; ++i) {
                  valuesPhaseIndex = valuesPhase[i];
                  if (valuesPhaseIndex === 2) {
                    this._reducingIndex = i + 1;
                    continue
                  }
                  if (valuesPhaseIndex !== 1)
                    return;
                  value = values[i];
                  this._promise._pushContext();
                  if (isEach) {
                    preservedValues.push(value);
                    ret = tryCatch(callback).call(receiver, value, i, length)
                  } else {
                    ret = tryCatch(callback).call(receiver, this._accum, value, i, length)
                  }
                  this._promise._popContext();
                  if (ret === errorObj)
                    return this._reject(ret.e);
                  var maybePromise = tryConvertToPromise(ret, this._promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (maybePromise._isPending()) {
                      valuesPhase[i] = 4;
                      return maybePromise._proxyPromiseArray(this, i)
                    } else if (maybePromise._isFulfilled()) {
                      ret = maybePromise._value()
                    } else {
                      return this._reject(maybePromise._reason())
                    }
                  }
                  this._reducingIndex = i + 1;
                  this._accum = ret
                }
                this._resolve(isEach ? preservedValues : this._accum)
              };
              function reduce(promises, fn, initialValue, _each) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
                return array.promise()
              }
              Promise.prototype.reduce = function (fn, initialValue) {
                return reduce(this, fn, initialValue, null)
              };
              Promise.reduce = function (promises, fn, initialValue, _each) {
                return reduce(promises, fn, initialValue, _each)
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        31: [
          function (_dereq_, module, exports) {
            'use strict';
            var schedule;
            var util = _dereq_('./util');
            var noAsyncScheduler = function () {
              throw new Error('No async scheduler available\n\n    See http://goo.gl/m3OTXk\n')
            };
            if (util.isNode && typeof MutationObserver === 'undefined') {
              var GlobalSetImmediate = global.setImmediate;
              var ProcessNextTick = process.nextTick;
              schedule = util.isRecentNode ? function (fn) {
                GlobalSetImmediate.call(global, fn)
              } : function (fn) {
                ProcessNextTick.call(process, fn)
              }
            } else if (typeof MutationObserver !== 'undefined' && !(typeof window !== 'undefined' && window.navigator && window.navigator.standalone)) {
              schedule = function (fn) {
                var div = document.createElement('div');
                var observer = new MutationObserver(fn);
                observer.observe(div, { attributes: true });
                return function () {
                  div.classList.toggle('foo')
                }
              };
              schedule.isStatic = true
            } else if (typeof setImmediate !== 'undefined') {
              schedule = function (fn) {
                setImmediate(fn)
              }
            } else if (typeof setTimeout !== 'undefined') {
              schedule = function (fn) {
                setTimeout(fn, 0)
              }
            } else {
              schedule = noAsyncScheduler
            }
            module.exports = schedule
          },
          { './util': 38 }
        ],
        32: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray) {
              var PromiseInspection = Promise.PromiseInspection;
              var util = _dereq_('./util.js');
              function SettledPromiseArray(values) {
                this.constructor$(values)
              }
              util.inherits(SettledPromiseArray, PromiseArray);
              SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
                this._values[index] = inspection;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  this._resolve(this._values)
                }
              };
              SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var ret = new PromiseInspection;
                ret._bitField = 268435456;
                ret._settledValue = value;
                this._promiseResolved(index, ret)
              };
              SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
                var ret = new PromiseInspection;
                ret._bitField = 134217728;
                ret._settledValue = reason;
                this._promiseResolved(index, ret)
              };
              Promise.settle = function (promises) {
                return new SettledPromiseArray(promises).promise()
              };
              Promise.prototype.settle = function () {
                return new SettledPromiseArray(this).promise()
              }
            }
          },
          { './util.js': 38 }
        ],
        33: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection) {
              var util = _dereq_('./util.js');
              var RangeError = _dereq_('./errors.js').RangeError;
              var AggregateError = _dereq_('./errors.js').AggregateError;
              var isArray = util.isArray;
              function SomePromiseArray(values) {
                this.constructor$(values);
                this._howMany = 0;
                this._unwrap = false;
                this._initialized = false
              }
              util.inherits(SomePromiseArray, PromiseArray);
              SomePromiseArray.prototype._init = function () {
                if (!this._initialized) {
                  return
                }
                if (this._howMany === 0) {
                  this._resolve([]);
                  return
                }
                this._init$(undefined, -5);
                var isArrayResolved = isArray(this._values);
                if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
                  this._reject(this._getRangeError(this.length()))
                }
              };
              SomePromiseArray.prototype.init = function () {
                this._initialized = true;
                this._init()
              };
              SomePromiseArray.prototype.setUnwrap = function () {
                this._unwrap = true
              };
              SomePromiseArray.prototype.howMany = function () {
                return this._howMany
              };
              SomePromiseArray.prototype.setHowMany = function (count) {
                this._howMany = count
              };
              SomePromiseArray.prototype._promiseFulfilled = function (value) {
                this._addFulfilled(value);
                if (this._fulfilled() === this.howMany()) {
                  this._values.length = this.howMany();
                  if (this.howMany() === 1 && this._unwrap) {
                    this._resolve(this._values[0])
                  } else {
                    this._resolve(this._values)
                  }
                }
              };
              SomePromiseArray.prototype._promiseRejected = function (reason) {
                this._addRejected(reason);
                if (this.howMany() > this._canPossiblyFulfill()) {
                  var e = new AggregateError;
                  for (var i = this.length(); i < this._values.length; ++i) {
                    e.push(this._values[i])
                  }
                  this._reject(e)
                }
              };
              SomePromiseArray.prototype._fulfilled = function () {
                return this._totalResolved
              };
              SomePromiseArray.prototype._rejected = function () {
                return this._values.length - this.length()
              };
              SomePromiseArray.prototype._addRejected = function (reason) {
                this._values.push(reason)
              };
              SomePromiseArray.prototype._addFulfilled = function (value) {
                this._values[this._totalResolved++] = value
              };
              SomePromiseArray.prototype._canPossiblyFulfill = function () {
                return this.length() - this._rejected()
              };
              SomePromiseArray.prototype._getRangeError = function (count) {
                var message = 'Input array must contain at least ' + this._howMany + ' items but contains only ' + count + ' items';
                return new RangeError(message)
              };
              SomePromiseArray.prototype._resolveEmptyArray = function () {
                this._reject(this._getRangeError(0))
              };
              function some(promises, howMany) {
                if ((howMany | 0) !== howMany || howMany < 0) {
                  return apiRejection('expecting a positive integer\n\n    See http://goo.gl/1wAmHx\n')
                }
                var ret = new SomePromiseArray(promises);
                var promise = ret.promise();
                ret.setHowMany(howMany);
                ret.init();
                return promise
              }
              Promise.some = function (promises, howMany) {
                return some(promises, howMany)
              };
              Promise.prototype.some = function (howMany) {
                return some(this, howMany)
              };
              Promise._SomePromiseArray = SomePromiseArray
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        34: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              function PromiseInspection(promise) {
                if (promise !== undefined) {
                  promise = promise._target();
                  this._bitField = promise._bitField;
                  this._settledValue = promise._settledValue
                } else {
                  this._bitField = 0;
                  this._settledValue = undefined
                }
              }
              PromiseInspection.prototype.value = function () {
                if (!this.isFulfilled()) {
                  throw new TypeError('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n')
                }
                return this._settledValue
              };
              PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function () {
                if (!this.isRejected()) {
                  throw new TypeError('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n')
                }
                return this._settledValue
              };
              PromiseInspection.prototype.isFulfilled = Promise.prototype._isFulfilled = function () {
                return (this._bitField & 268435456) > 0
              };
              PromiseInspection.prototype.isRejected = Promise.prototype._isRejected = function () {
                return (this._bitField & 134217728) > 0
              };
              PromiseInspection.prototype.isPending = Promise.prototype._isPending = function () {
                return (this._bitField & 402653184) === 0
              };
              PromiseInspection.prototype.isResolved = Promise.prototype._isResolved = function () {
                return (this._bitField & 402653184) > 0
              };
              Promise.prototype.isPending = function () {
                return this._target()._isPending()
              };
              Promise.prototype.isRejected = function () {
                return this._target()._isRejected()
              };
              Promise.prototype.isFulfilled = function () {
                return this._target()._isFulfilled()
              };
              Promise.prototype.isResolved = function () {
                return this._target()._isResolved()
              };
              Promise.prototype._value = function () {
                return this._settledValue
              };
              Promise.prototype._reason = function () {
                this._unsetRejectionIsUnhandled();
                return this._settledValue
              };
              Promise.prototype.value = function () {
                var target = this._target();
                if (!target.isFulfilled()) {
                  throw new TypeError('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n')
                }
                return target._settledValue
              };
              Promise.prototype.reason = function () {
                var target = this._target();
                if (!target.isRejected()) {
                  throw new TypeError('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n')
                }
                target._unsetRejectionIsUnhandled();
                return target._settledValue
              };
              Promise.PromiseInspection = PromiseInspection
            }
          },
          {}
        ],
        35: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var util = _dereq_('./util.js');
              var errorObj = util.errorObj;
              var isObject = util.isObject;
              function tryConvertToPromise(obj, context) {
                if (isObject(obj)) {
                  if (obj instanceof Promise) {
                    return obj
                  } else if (isAnyBluebirdPromise(obj)) {
                    var ret = new Promise(INTERNAL);
                    obj._then(ret._fulfillUnchecked, ret._rejectUncheckedCheckError, ret._progressUnchecked, ret, null);
                    return ret
                  }
                  var then = util.tryCatch(getThen)(obj);
                  if (then === errorObj) {
                    if (context)
                      context._pushContext();
                    var ret = Promise.reject(then.e);
                    if (context)
                      context._popContext();
                    return ret
                  } else if (typeof then === 'function') {
                    return doThenable(obj, then, context)
                  }
                }
                return obj
              }
              function getThen(obj) {
                return obj.then
              }
              var hasProp = {}.hasOwnProperty;
              function isAnyBluebirdPromise(obj) {
                return hasProp.call(obj, '_promise0')
              }
              function doThenable(x, then, context) {
                var promise = new Promise(INTERNAL);
                var ret = promise;
                if (context)
                  context._pushContext();
                promise._captureStackTrace();
                if (context)
                  context._popContext();
                var synchronous = true;
                var result = util.tryCatch(then).call(x, resolveFromThenable, rejectFromThenable, progressFromThenable);
                synchronous = false;
                if (promise && result === errorObj) {
                  promise._rejectCallback(result.e, true, true);
                  promise = null
                }
                function resolveFromThenable(value) {
                  if (!promise)
                    return;
                  promise._resolveCallback(value);
                  promise = null
                }
                function rejectFromThenable(reason) {
                  if (!promise)
                    return;
                  promise._rejectCallback(reason, synchronous, true);
                  promise = null
                }
                function progressFromThenable(value) {
                  if (!promise)
                    return;
                  if (typeof promise._progress === 'function') {
                    promise._progress(value)
                  }
                }
                return ret
              }
              return tryConvertToPromise
            }
          },
          { './util.js': 38 }
        ],
        36: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var util = _dereq_('./util.js');
              var TimeoutError = Promise.TimeoutError;
              var afterTimeout = function (promise, message) {
                if (!promise.isPending())
                  return;
                var err;
                if (!util.isPrimitive(message) && message instanceof Error) {
                  err = message
                } else {
                  if (typeof message !== 'string') {
                    message = 'operation timed out'
                  }
                  err = new TimeoutError(message)
                }
                util.markAsOriginatingFromRejection(err);
                promise._attachExtraTrace(err);
                promise._cancel(err)
              };
              var afterValue = function (value) {
                return delay(+this).thenReturn(value)
              };
              var delay = Promise.delay = function (value, ms) {
                if (ms === undefined) {
                  ms = value;
                  value = undefined;
                  var ret = new Promise(INTERNAL);
                  setTimeout(function () {
                    ret._fulfill()
                  }, ms);
                  return ret
                }
                ms = +ms;
                return Promise.resolve(value)._then(afterValue, null, null, ms, undefined)
              };
              Promise.prototype.delay = function (ms) {
                return delay(this, ms)
              };
              function successClear(value) {
                var handle = this;
                if (handle instanceof Number)
                  handle = +handle;
                clearTimeout(handle);
                return value
              }
              function failureClear(reason) {
                var handle = this;
                if (handle instanceof Number)
                  handle = +handle;
                clearTimeout(handle);
                throw reason
              }
              Promise.prototype.timeout = function (ms, message) {
                ms = +ms;
                var ret = this.then().cancellable();
                ret._cancellationParent = this;
                var handle = setTimeout(function timeoutTimeout() {
                  afterTimeout(ret, message)
                }, ms);
                return ret._then(successClear, failureClear, undefined, handle, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        37: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, apiRejection, tryConvertToPromise, createContext) {
              var TypeError = _dereq_('./errors.js').TypeError;
              var inherits = _dereq_('./util.js').inherits;
              var PromiseInspection = Promise.PromiseInspection;
              function inspectionMapper(inspections) {
                var len = inspections.length;
                for (var i = 0; i < len; ++i) {
                  var inspection = inspections[i];
                  if (inspection.isRejected()) {
                    return Promise.reject(inspection.error())
                  }
                  inspections[i] = inspection._settledValue
                }
                return inspections
              }
              function thrower(e) {
                setTimeout(function () {
                  throw e
                }, 0)
              }
              function castPreservingDisposable(thenable) {
                var maybePromise = tryConvertToPromise(thenable);
                if (maybePromise !== thenable && typeof thenable._isDisposable === 'function' && typeof thenable._getDisposer === 'function' && thenable._isDisposable()) {
                  maybePromise._setDisposable(thenable._getDisposer())
                }
                return maybePromise
              }
              function dispose(resources, inspection) {
                var i = 0;
                var len = resources.length;
                var ret = Promise.defer();
                function iterator() {
                  if (i >= len)
                    return ret.resolve();
                  var maybePromise = castPreservingDisposable(resources[i++]);
                  if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
                    try {
                      maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise)
                    } catch (e) {
                      return thrower(e)
                    }
                    if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower, null, null, null)
                    }
                  }
                  iterator()
                }
                iterator();
                return ret.promise
              }
              function disposerSuccess(value) {
                var inspection = new PromiseInspection;
                inspection._settledValue = value;
                inspection._bitField = 268435456;
                return dispose(this, inspection).thenReturn(value)
              }
              function disposerFail(reason) {
                var inspection = new PromiseInspection;
                inspection._settledValue = reason;
                inspection._bitField = 134217728;
                return dispose(this, inspection).thenThrow(reason)
              }
              function Disposer(data, promise, context) {
                this._data = data;
                this._promise = promise;
                this._context = context
              }
              Disposer.prototype.data = function () {
                return this._data
              };
              Disposer.prototype.promise = function () {
                return this._promise
              };
              Disposer.prototype.resource = function () {
                if (this.promise().isFulfilled()) {
                  return this.promise().value()
                }
                return null
              };
              Disposer.prototype.tryDispose = function (inspection) {
                var resource = this.resource();
                var context = this._context;
                if (context !== undefined)
                  context._pushContext();
                var ret = resource !== null ? this.doDispose(resource, inspection) : null;
                if (context !== undefined)
                  context._popContext();
                this._promise._unsetDisposable();
                this._data = null;
                return ret
              };
              Disposer.isDisposer = function (d) {
                return d != null && typeof d.resource === 'function' && typeof d.tryDispose === 'function'
              };
              function FunctionDisposer(fn, promise, context) {
                this.constructor$(fn, promise, context)
              }
              inherits(FunctionDisposer, Disposer);
              FunctionDisposer.prototype.doDispose = function (resource, inspection) {
                var fn = this.data();
                return fn.call(resource, resource, inspection)
              };
              function maybeUnwrapDisposer(value) {
                if (Disposer.isDisposer(value)) {
                  this.resources[this.index]._setDisposable(value);
                  return value.promise()
                }
                return value
              }
              Promise.using = function () {
                var len = arguments.length;
                if (len < 2)
                  return apiRejection('you must pass at least 2 arguments to Promise.using');
                var fn = arguments[len - 1];
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var input;
                var spreadArgs = true;
                if (len === 2 && Array.isArray(arguments[0])) {
                  input = arguments[0];
                  len = input.length;
                  spreadArgs = false
                } else {
                  input = arguments;
                  len--
                }
                var resources = new Array(len);
                for (var i = 0; i < len; ++i) {
                  var resource = input[i];
                  if (Disposer.isDisposer(resource)) {
                    var disposer = resource;
                    resource = resource.promise();
                    resource._setDisposable(disposer)
                  } else {
                    var maybePromise = tryConvertToPromise(resource);
                    if (maybePromise instanceof Promise) {
                      resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
                        resources: resources,
                        index: i
                      }, undefined)
                    }
                  }
                  resources[i] = resource
                }
                var promise = Promise.settle(resources).then(inspectionMapper).then(function (vals) {
                  promise._pushContext();
                  var ret;
                  try {
                    ret = spreadArgs ? fn.apply(undefined, vals) : fn.call(undefined, vals)
                  } finally {
                    promise._popContext()
                  }
                  return ret
                })._then(disposerSuccess, disposerFail, undefined, resources, undefined);
                resources.promise = promise;
                return promise
              };
              Promise.prototype._setDisposable = function (disposer) {
                this._bitField = this._bitField | 262144;
                this._disposer = disposer
              };
              Promise.prototype._isDisposable = function () {
                return (this._bitField & 262144) > 0
              };
              Promise.prototype._getDisposer = function () {
                return this._disposer
              };
              Promise.prototype._unsetDisposable = function () {
                this._bitField = this._bitField & ~262144;
                this._disposer = undefined
              };
              Promise.prototype.disposer = function (fn) {
                if (typeof fn === 'function') {
                  return new FunctionDisposer(fn, this, createContext())
                }
                throw new TypeError
              }
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        38: [
          function (_dereq_, module, exports) {
            'use strict';
            var es5 = _dereq_('./es5.js');
            var canEvaluate = typeof navigator == 'undefined';
            var haveGetters = function () {
              try {
                var o = {};
                es5.defineProperty(o, 'f', {
                  get: function () {
                    return 3
                  }
                });
                return o.f === 3
              } catch (e) {
                return false
              }
            }();
            var errorObj = { e: {} };
            var tryCatchTarget;
            function tryCatcher() {
              try {
                var target = tryCatchTarget;
                tryCatchTarget = null;
                return target.apply(this, arguments)
              } catch (e) {
                errorObj.e = e;
                return errorObj
              }
            }
            function tryCatch(fn) {
              tryCatchTarget = fn;
              return tryCatcher
            }
            var inherits = function (Child, Parent) {
              var hasProp = {}.hasOwnProperty;
              function T() {
                this.constructor = Child;
                this.constructor$ = Parent;
                for (var propertyName in Parent.prototype) {
                  if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== '$') {
                    this[propertyName + '$'] = Parent.prototype[propertyName]
                  }
                }
              }
              T.prototype = Parent.prototype;
              Child.prototype = new T;
              return Child.prototype
            };
            function isPrimitive(val) {
              return val == null || val === true || val === false || typeof val === 'string' || typeof val === 'number'
            }
            function isObject(value) {
              return !isPrimitive(value)
            }
            function maybeWrapAsError(maybeError) {
              if (!isPrimitive(maybeError))
                return maybeError;
              return new Error(safeToString(maybeError))
            }
            function withAppended(target, appendee) {
              var len = target.length;
              var ret = new Array(len + 1);
              var i;
              for (i = 0; i < len; ++i) {
                ret[i] = target[i]
              }
              ret[i] = appendee;
              return ret
            }
            function getDataPropertyOrDefault(obj, key, defaultValue) {
              if (es5.isES5) {
                var desc = Object.getOwnPropertyDescriptor(obj, key);
                if (desc != null) {
                  return desc.get == null && desc.set == null ? desc.value : defaultValue
                }
              } else {
                return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined
              }
            }
            function notEnumerableProp(obj, name, value) {
              if (isPrimitive(obj))
                return obj;
              var descriptor = {
                value: value,
                configurable: true,
                enumerable: false,
                writable: true
              };
              es5.defineProperty(obj, name, descriptor);
              return obj
            }
            function thrower(r) {
              throw r
            }
            var inheritedDataKeys = function () {
              var excludedPrototypes = [
                Array.prototype,
                Object.prototype,
                Function.prototype
              ];
              var isExcludedProto = function (val) {
                for (var i = 0; i < excludedPrototypes.length; ++i) {
                  if (excludedPrototypes[i] === val) {
                    return true
                  }
                }
                return false
              };
              if (es5.isES5) {
                var getKeys = Object.getOwnPropertyNames;
                return function (obj) {
                  var ret = [];
                  var visitedKeys = Object.create(null);
                  while (obj != null && !isExcludedProto(obj)) {
                    var keys;
                    try {
                      keys = getKeys(obj)
                    } catch (e) {
                      return ret
                    }
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key])
                        continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key)
                      }
                    }
                    obj = es5.getPrototypeOf(obj)
                  }
                  return ret
                }
              } else {
                var hasProp = {}.hasOwnProperty;
                return function (obj) {
                  if (isExcludedProto(obj))
                    return [];
                  var ret = [];
                  /*jshint forin:false */
                  enumeration:
                    for (var key in obj) {
                      if (hasProp.call(obj, key)) {
                        ret.push(key)
                      } else {
                        for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration
                          }
                        }
                        ret.push(key)
                      }
                    }
                  return ret
                }
              }
            }();
            var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
            function isClass(fn) {
              try {
                if (typeof fn === 'function') {
                  var keys = es5.names(fn.prototype);
                  var hasMethods = es5.isES5 && keys.length > 1;
                  var hasMethodsOtherThanConstructor = keys.length > 0 && !(keys.length === 1 && keys[0] === 'constructor');
                  var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + '') && es5.names(fn).length > 0;
                  if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) {
                    return true
                  }
                }
                return false
              } catch (e) {
                return false
              }
            }
            function toFastProperties(obj) {
              /*jshint -W027,-W055,-W031*/
              function f() {
              }
              f.prototype = obj;
              var l = 8;
              while (l--)
                new f;
              return obj;
              eval(obj)
            }
            var rident = /^[a-z$_][a-z$_0-9]*$/i;
            function isIdentifier(str) {
              return rident.test(str)
            }
            function filledRange(count, prefix, suffix) {
              var ret = new Array(count);
              for (var i = 0; i < count; ++i) {
                ret[i] = prefix + i + suffix
              }
              return ret
            }
            function safeToString(obj) {
              try {
                return obj + ''
              } catch (e) {
                return '[no string representation]'
              }
            }
            function markAsOriginatingFromRejection(e) {
              try {
                notEnumerableProp(e, 'isOperational', true)
              } catch (ignore) {
              }
            }
            function originatesFromRejection(e) {
              if (e == null)
                return false;
              return e instanceof Error['__BluebirdErrorTypes__'].OperationalError || e['isOperational'] === true
            }
            function canAttachTrace(obj) {
              return obj instanceof Error && es5.propertyIsWritable(obj, 'stack')
            }
            var ensureErrorObject = function () {
              if (!('stack' in new Error)) {
                return function (value) {
                  if (canAttachTrace(value))
                    return value;
                  try {
                    throw new Error(safeToString(value))
                  } catch (err) {
                    return err
                  }
                }
              } else {
                return function (value) {
                  if (canAttachTrace(value))
                    return value;
                  return new Error(safeToString(value))
                }
              }
            }();
            function classString(obj) {
              return {}.toString.call(obj)
            }
            function copyDescriptors(from, to, filter) {
              var keys = es5.names(from);
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (filter(key)) {
                  try {
                    es5.defineProperty(to, key, es5.getDescriptor(from, key))
                  } catch (ignore) {
                  }
                }
              }
            }
            var ret = {
              isClass: isClass,
              isIdentifier: isIdentifier,
              inheritedDataKeys: inheritedDataKeys,
              getDataPropertyOrDefault: getDataPropertyOrDefault,
              thrower: thrower,
              isArray: es5.isArray,
              haveGetters: haveGetters,
              notEnumerableProp: notEnumerableProp,
              isPrimitive: isPrimitive,
              isObject: isObject,
              canEvaluate: canEvaluate,
              errorObj: errorObj,
              tryCatch: tryCatch,
              inherits: inherits,
              withAppended: withAppended,
              maybeWrapAsError: maybeWrapAsError,
              toFastProperties: toFastProperties,
              filledRange: filledRange,
              toString: safeToString,
              canAttachTrace: canAttachTrace,
              ensureErrorObject: ensureErrorObject,
              originatesFromRejection: originatesFromRejection,
              markAsOriginatingFromRejection: markAsOriginatingFromRejection,
              classString: classString,
              copyDescriptors: copyDescriptors,
              hasDevTools: typeof chrome !== 'undefined' && chrome && typeof chrome.loadTimes === 'function',
              isNode: typeof process !== 'undefined' && classString(process).toLowerCase() === '[object process]'
            };
            ret.isRecentNode = ret.isNode && function () {
              var version = process.versions.node.split('.').map(Number);
              return version[0] === 0 && version[1] > 10 || version[0] > 0
            }();
            if (ret.isNode)
              ret.toFastProperties(process);
            try {
              throw new Error
            } catch (e) {
              ret.lastLineError = e
            }
            module.exports = ret
          },
          { './es5.js': 14 }
        ]
      }, {}, [4])(4)
    });
    ;
    if (typeof window !== 'undefined' && window !== null) {
      window.P = window.Promise
    } else if (typeof self !== 'undefined' && self !== null) {
      self.P = self.Promise
    }
  });
  // source: node_modules/crowdstart.js/node_modules/xhr-promise/index.js
  require.define('crowdstart/node_modules/xhr-promise/index.js', function (module, exports, __dirname, __filename) {
    module.exports = require('crowdstart/node_modules/xhr-promise/lib/xhr-promise.js')
  });
  // source: node_modules/crowdstart.js/node_modules/xhr-promise/lib/xhr-promise.js
  require.define('crowdstart/node_modules/xhr-promise/lib/xhr-promise.js', function (module, exports, __dirname, __filename) {
    /*
 * Copyright 2015 Scott Brady
 * MIT License
 * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
 */
    var ParseHeaders, Promise, XMLHttpRequestPromise, extend;
    Promise = require('crowdstart/node_modules/xhr-promise/node_modules/bluebird/js/browser/bluebird.js');
    extend = require('crowdstart/node_modules/xhr-promise/node_modules/extend/index.js');
    ParseHeaders = require('crowdstart/node_modules/xhr-promise/node_modules/parse-headers/parse-headers.js');
    /*
 * Module to wrap an XMLHttpRequest in a promise.
 */
    module.exports = XMLHttpRequestPromise = function () {
      function XMLHttpRequestPromise() {
      }
      XMLHttpRequestPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';
      /*
   * XMLHttpRequestPromise.send(options) -> Promise
   * - options (Object): URL, method, data, etc.
   *
   * Create the XHR object and wire up event handlers to use a promise.
   */
      XMLHttpRequestPromise.prototype.send = function (options) {
        var defaults;
        if (options == null) {
          options = {}
        }
        defaults = {
          method: 'GET',
          data: null,
          headers: {},
          async: true,
          username: null,
          password: null
        };
        options = extend({}, defaults, options);
        return new Promise(function (_this) {
          return function (resolve, reject) {
            var e, header, ref, value, xhr;
            if (!XMLHttpRequest) {
              _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
              return
            }
            if (typeof options.url !== 'string' || options.url.length === 0) {
              _this._handleError('url', reject, null, 'URL is a required parameter');
              return
            }
            _this._xhr = xhr = new XMLHttpRequest;
            xhr.onload = function () {
              var responseText;
              _this._detachWindowUnload();
              try {
                responseText = _this._getResponseText()
              } catch (_error) {
                _this._handleError('parse', reject, null, 'invalid JSON response');
                return
              }
              return resolve({
                url: _this._getResponseUrl(),
                status: xhr.status,
                statusText: xhr.statusText,
                responseText: responseText,
                headers: _this._getHeaders(),
                xhr: xhr
              })
            };
            xhr.onerror = function () {
              return _this._handleError('error', reject)
            };
            xhr.ontimeout = function () {
              return _this._handleError('timeout', reject)
            };
            xhr.onabort = function () {
              return _this._handleError('abort', reject)
            };
            _this._attachWindowUnload();
            xhr.open(options.method, options.url, options.async, options.username, options.password);
            if (options.data != null && !options.headers['Content-Type']) {
              options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE
            }
            ref = options.headers;
            for (header in ref) {
              value = ref[header];
              xhr.setRequestHeader(header, value)
            }
            try {
              return xhr.send(options.data)
            } catch (_error) {
              e = _error;
              return _this._handleError('send', reject, null, e.toString())
            }
          }
        }(this))
      };
      /*
   * XMLHttpRequestPromise.getXHR() -> XMLHttpRequest
   */
      XMLHttpRequestPromise.prototype.getXHR = function () {
        return this._xhr
      };
      /*
   * XMLHttpRequestPromise._attachWindowUnload()
   *
   * Fix for IE 9 and IE 10
   * Internet Explorer freezes when you close a webpage during an XHR request
   * https://support.microsoft.com/kb/2856746
   *
   */
      XMLHttpRequestPromise.prototype._attachWindowUnload = function () {
        this._unloadHandler = this._handleWindowUnload.bind(this);
        if (window.attachEvent) {
          return window.attachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._detachWindowUnload()
   */
      XMLHttpRequestPromise.prototype._detachWindowUnload = function () {
        if (window.detachEvent) {
          return window.detachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._getHeaders() -> Object
   */
      XMLHttpRequestPromise.prototype._getHeaders = function () {
        return ParseHeaders(this._xhr.getAllResponseHeaders())
      };
      /*
   * XMLHttpRequestPromise._getResponseText() -> Mixed
   *
   * Parses response text JSON if present.
   */
      XMLHttpRequestPromise.prototype._getResponseText = function () {
        var responseText;
        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
        switch (this._xhr.getResponseHeader('Content-Type')) {
        case 'application/json':
        case 'text/javascript':
          responseText = JSON.parse(responseText + '')
        }
        return responseText
      };
      /*
   * XMLHttpRequestPromise._getResponseUrl() -> String
   *
   * Actual response URL after following redirects.
   */
      XMLHttpRequestPromise.prototype._getResponseUrl = function () {
        if (this._xhr.responseURL != null) {
          return this._xhr.responseURL
        }
        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
          return this._xhr.getResponseHeader('X-Request-URL')
        }
        return ''
      };
      /*
   * XMLHttpRequestPromise._handleError(reason, reject, status, statusText)
   * - reason (String)
   * - reject (Function)
   * - status (String)
   * - statusText (String)
   */
      XMLHttpRequestPromise.prototype._handleError = function (reason, reject, status, statusText) {
        this._detachWindowUnload();
        return reject({
          reason: reason,
          status: status || this._xhr.status,
          statusText: statusText || this._xhr.statusText,
          xhr: this._xhr
        })
      };
      /*
   * XMLHttpRequestPromise._handleWindowUnload()
   */
      XMLHttpRequestPromise.prototype._handleWindowUnload = function () {
        return this._xhr.abort()
      };
      return XMLHttpRequestPromise
    }()
  });
  // source: node_modules/crowdstart.js/node_modules/xhr-promise/node_modules/bluebird/js/browser/bluebird.js
  require.define('crowdstart/node_modules/xhr-promise/node_modules/bluebird/js/browser/bluebird.js', function (module, exports, __dirname, __filename) {
    /* @preserve
 * The MIT License (MIT)
 * 
 * Copyright (c) 2014 Petka Antonov
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 * 
 */
    /**
 * bluebird build version 2.9.34
 * Features enabled: core, race, call_get, generators, map, nodeify, promisify, props, reduce, settle, some, cancel, using, filter, any, each, timers
*/
    !function (e) {
      if ('object' == typeof exports && 'undefined' != typeof module)
        module.exports = e();
      else if ('function' == typeof define && define.amd)
        define([], e);
      else {
        var f;
        'undefined' != typeof window ? f = window : 'undefined' != typeof global ? f = global : 'undefined' != typeof self && (f = self), f.Promise = e()
      }
    }(function () {
      var define, module, exports;
      return function e(t, n, r) {
        function s(o, u) {
          if (!n[o]) {
            if (!t[o]) {
              var a = typeof _dereq_ == 'function' && _dereq_;
              if (!u && a)
                return a(o, !0);
              if (i)
                return i(o, !0);
              var f = new Error("Cannot find module '" + o + "'");
              throw f.code = 'MODULE_NOT_FOUND', f
            }
            var l = n[o] = { exports: {} };
            t[o][0].call(l.exports, function (e) {
              var n = t[o][1][e];
              return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
          }
          return n[o].exports
        }
        var i = typeof _dereq_ == 'function' && _dereq_;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s
      }({
        1: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var SomePromiseArray = Promise._SomePromiseArray;
              function any(promises) {
                var ret = new SomePromiseArray(promises);
                var promise = ret.promise();
                ret.setHowMany(1);
                ret.setUnwrap();
                ret.init();
                return promise
              }
              Promise.any = function (promises) {
                return any(promises)
              };
              Promise.prototype.any = function () {
                return any(this)
              }
            }
          },
          {}
        ],
        2: [
          function (_dereq_, module, exports) {
            'use strict';
            var firstLineError;
            try {
              throw new Error
            } catch (e) {
              firstLineError = e
            }
            var schedule = _dereq_('./schedule.js');
            var Queue = _dereq_('./queue.js');
            var util = _dereq_('./util.js');
            function Async() {
              this._isTickUsed = false;
              this._lateQueue = new Queue(16);
              this._normalQueue = new Queue(16);
              this._trampolineEnabled = true;
              var self = this;
              this.drainQueues = function () {
                self._drainQueues()
              };
              this._schedule = schedule.isStatic ? schedule(this.drainQueues) : schedule
            }
            Async.prototype.disableTrampolineIfNecessary = function () {
              if (util.hasDevTools) {
                this._trampolineEnabled = false
              }
            };
            Async.prototype.enableTrampoline = function () {
              if (!this._trampolineEnabled) {
                this._trampolineEnabled = true;
                this._schedule = function (fn) {
                  setTimeout(fn, 0)
                }
              }
            };
            Async.prototype.haveItemsQueued = function () {
              return this._normalQueue.length() > 0
            };
            Async.prototype.throwLater = function (fn, arg) {
              if (arguments.length === 1) {
                arg = fn;
                fn = function () {
                  throw arg
                }
              }
              if (typeof setTimeout !== 'undefined') {
                setTimeout(function () {
                  fn(arg)
                }, 0)
              } else
                try {
                  this._schedule(function () {
                    fn(arg)
                  })
                } catch (e) {
                  throw new Error('No async scheduler available\n\n    See http://goo.gl/m3OTXk\n')
                }
            };
            function AsyncInvokeLater(fn, receiver, arg) {
              this._lateQueue.push(fn, receiver, arg);
              this._queueTick()
            }
            function AsyncInvoke(fn, receiver, arg) {
              this._normalQueue.push(fn, receiver, arg);
              this._queueTick()
            }
            function AsyncSettlePromises(promise) {
              this._normalQueue._pushOne(promise);
              this._queueTick()
            }
            if (!util.hasDevTools) {
              Async.prototype.invokeLater = AsyncInvokeLater;
              Async.prototype.invoke = AsyncInvoke;
              Async.prototype.settlePromises = AsyncSettlePromises
            } else {
              if (schedule.isStatic) {
                schedule = function (fn) {
                  setTimeout(fn, 0)
                }
              }
              Async.prototype.invokeLater = function (fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvokeLater.call(this, fn, receiver, arg)
                } else {
                  this._schedule(function () {
                    setTimeout(function () {
                      fn.call(receiver, arg)
                    }, 100)
                  })
                }
              };
              Async.prototype.invoke = function (fn, receiver, arg) {
                if (this._trampolineEnabled) {
                  AsyncInvoke.call(this, fn, receiver, arg)
                } else {
                  this._schedule(function () {
                    fn.call(receiver, arg)
                  })
                }
              };
              Async.prototype.settlePromises = function (promise) {
                if (this._trampolineEnabled) {
                  AsyncSettlePromises.call(this, promise)
                } else {
                  this._schedule(function () {
                    promise._settlePromises()
                  })
                }
              }
            }
            Async.prototype.invokeFirst = function (fn, receiver, arg) {
              this._normalQueue.unshift(fn, receiver, arg);
              this._queueTick()
            };
            Async.prototype._drainQueue = function (queue) {
              while (queue.length() > 0) {
                var fn = queue.shift();
                if (typeof fn !== 'function') {
                  fn._settlePromises();
                  continue
                }
                var receiver = queue.shift();
                var arg = queue.shift();
                fn.call(receiver, arg)
              }
            };
            Async.prototype._drainQueues = function () {
              this._drainQueue(this._normalQueue);
              this._reset();
              this._drainQueue(this._lateQueue)
            };
            Async.prototype._queueTick = function () {
              if (!this._isTickUsed) {
                this._isTickUsed = true;
                this._schedule(this.drainQueues)
              }
            };
            Async.prototype._reset = function () {
              this._isTickUsed = false
            };
            module.exports = new Async;
            module.exports.firstLineError = firstLineError
          },
          {
            './queue.js': 28,
            './schedule.js': 31,
            './util.js': 38
          }
        ],
        3: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise) {
              var rejectThis = function (_, e) {
                this._reject(e)
              };
              var targetRejected = function (e, context) {
                context.promiseRejectionQueued = true;
                context.bindingPromise._then(rejectThis, rejectThis, null, this, e)
              };
              var bindingResolved = function (thisArg, context) {
                if (this._isPending()) {
                  this._resolveCallback(context.target)
                }
              };
              var bindingRejected = function (e, context) {
                if (!context.promiseRejectionQueued)
                  this._reject(e)
              };
              Promise.prototype.bind = function (thisArg) {
                var maybePromise = tryConvertToPromise(thisArg);
                var ret = new Promise(INTERNAL);
                ret._propagateFrom(this, 1);
                var target = this._target();
                ret._setBoundTo(maybePromise);
                if (maybePromise instanceof Promise) {
                  var context = {
                    promiseRejectionQueued: false,
                    promise: ret,
                    target: target,
                    bindingPromise: maybePromise
                  };
                  target._then(INTERNAL, targetRejected, ret._progress, ret, context);
                  maybePromise._then(bindingResolved, bindingRejected, ret._progress, ret, context)
                } else {
                  ret._resolveCallback(target)
                }
                return ret
              };
              Promise.prototype._setBoundTo = function (obj) {
                if (obj !== undefined) {
                  this._bitField = this._bitField | 131072;
                  this._boundTo = obj
                } else {
                  this._bitField = this._bitField & ~131072
                }
              };
              Promise.prototype._isBound = function () {
                return (this._bitField & 131072) === 131072
              };
              Promise.bind = function (thisArg, value) {
                var maybePromise = tryConvertToPromise(thisArg);
                var ret = new Promise(INTERNAL);
                ret._setBoundTo(maybePromise);
                if (maybePromise instanceof Promise) {
                  maybePromise._then(function () {
                    ret._resolveCallback(value)
                  }, ret._reject, ret._progress, ret, null)
                } else {
                  ret._resolveCallback(value)
                }
                return ret
              }
            }
          },
          {}
        ],
        4: [
          function (_dereq_, module, exports) {
            'use strict';
            var old;
            if (typeof Promise !== 'undefined')
              old = Promise;
            function noConflict() {
              try {
                if (Promise === bluebird)
                  Promise = old
              } catch (e) {
              }
              return bluebird
            }
            var bluebird = _dereq_('./promise.js')();
            bluebird.noConflict = noConflict;
            module.exports = bluebird
          },
          { './promise.js': 23 }
        ],
        5: [
          function (_dereq_, module, exports) {
            'use strict';
            var cr = Object.create;
            if (cr) {
              var callerCache = cr(null);
              var getterCache = cr(null);
              callerCache[' size'] = getterCache[' size'] = 0
            }
            module.exports = function (Promise) {
              var util = _dereq_('./util.js');
              var canEvaluate = util.canEvaluate;
              var isIdentifier = util.isIdentifier;
              var getMethodCaller;
              var getGetter;
              if (!true) {
                var makeMethodCaller = function (methodName) {
                  return new Function('ensureMethod', "                                    \n        return function(obj) {                                               \n            'use strict'                                                     \n            var len = this.length;                                           \n            ensureMethod(obj, 'methodName');                                 \n            switch(len) {                                                    \n                case 1: return obj.methodName(this[0]);                      \n                case 2: return obj.methodName(this[0], this[1]);             \n                case 3: return obj.methodName(this[0], this[1], this[2]);    \n                case 0: return obj.methodName();                             \n                default:                                                     \n                    return obj.methodName.apply(obj, this);                  \n            }                                                                \n        };                                                                   \n        ".replace(/methodName/g, methodName))(ensureMethod)
                };
                var makeGetter = function (propertyName) {
                  return new Function('obj', "                                             \n        'use strict';                                                        \n        return obj.propertyName;                                             \n        ".replace('propertyName', propertyName))
                };
                var getCompiled = function (name, compiler, cache) {
                  var ret = cache[name];
                  if (typeof ret !== 'function') {
                    if (!isIdentifier(name)) {
                      return null
                    }
                    ret = compiler(name);
                    cache[name] = ret;
                    cache[' size']++;
                    if (cache[' size'] > 512) {
                      var keys = Object.keys(cache);
                      for (var i = 0; i < 256; ++i)
                        delete cache[keys[i]];
                      cache[' size'] = keys.length - 256
                    }
                  }
                  return ret
                };
                getMethodCaller = function (name) {
                  return getCompiled(name, makeMethodCaller, callerCache)
                };
                getGetter = function (name) {
                  return getCompiled(name, makeGetter, getterCache)
                }
              }
              function ensureMethod(obj, methodName) {
                var fn;
                if (obj != null)
                  fn = obj[methodName];
                if (typeof fn !== 'function') {
                  var message = 'Object ' + util.classString(obj) + " has no method '" + util.toString(methodName) + "'";
                  throw new Promise.TypeError(message)
                }
                return fn
              }
              function caller(obj) {
                var methodName = this.pop();
                var fn = ensureMethod(obj, methodName);
                return fn.apply(obj, this)
              }
              Promise.prototype.call = function (methodName) {
                var $_len = arguments.length;
                var args = new Array($_len - 1);
                for (var $_i = 1; $_i < $_len; ++$_i) {
                  args[$_i - 1] = arguments[$_i]
                }
                if (!true) {
                  if (canEvaluate) {
                    var maybeCaller = getMethodCaller(methodName);
                    if (maybeCaller !== null) {
                      return this._then(maybeCaller, undefined, undefined, args, undefined)
                    }
                  }
                }
                args.push(methodName);
                return this._then(caller, undefined, undefined, args, undefined)
              };
              function namedGetter(obj) {
                return obj[this]
              }
              function indexedGetter(obj) {
                var index = +this;
                if (index < 0)
                  index = Math.max(0, index + obj.length);
                return obj[index]
              }
              Promise.prototype.get = function (propertyName) {
                var isIndex = typeof propertyName === 'number';
                var getter;
                if (!isIndex) {
                  if (canEvaluate) {
                    var maybeGetter = getGetter(propertyName);
                    getter = maybeGetter !== null ? maybeGetter : namedGetter
                  } else {
                    getter = namedGetter
                  }
                } else {
                  getter = indexedGetter
                }
                return this._then(getter, undefined, undefined, propertyName, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        6: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var errors = _dereq_('./errors.js');
              var async = _dereq_('./async.js');
              var CancellationError = errors.CancellationError;
              Promise.prototype._cancel = function (reason) {
                if (!this.isCancellable())
                  return this;
                var parent;
                var promiseToReject = this;
                while ((parent = promiseToReject._cancellationParent) !== undefined && parent.isCancellable()) {
                  promiseToReject = parent
                }
                this._unsetCancellable();
                promiseToReject._target()._rejectCallback(reason, false, true)
              };
              Promise.prototype.cancel = function (reason) {
                if (!this.isCancellable())
                  return this;
                if (reason === undefined)
                  reason = new CancellationError;
                async.invokeLater(this._cancel, this, reason);
                return this
              };
              Promise.prototype.cancellable = function () {
                if (this._cancellable())
                  return this;
                async.enableTrampoline();
                this._setCancellable();
                this._cancellationParent = undefined;
                return this
              };
              Promise.prototype.uncancellable = function () {
                var ret = this.then();
                ret._unsetCancellable();
                return ret
              };
              Promise.prototype.fork = function (didFulfill, didReject, didProgress) {
                var ret = this._then(didFulfill, didReject, didProgress, undefined, undefined);
                ret._setCancellable();
                ret._cancellationParent = undefined;
                return ret
              }
            }
          },
          {
            './async.js': 2,
            './errors.js': 13
          }
        ],
        7: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function () {
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var bluebirdFramePattern = /[\\\/]bluebird[\\\/]js[\\\/](main|debug|zalgo|instrumented)/;
              var stackFramePattern = null;
              var formatStack = null;
              var indentStackFrames = false;
              var warn;
              function CapturedTrace(parent) {
                this._parent = parent;
                var length = this._length = 1 + (parent === undefined ? 0 : parent._length);
                captureStackTrace(this, CapturedTrace);
                if (length > 32)
                  this.uncycle()
              }
              util.inherits(CapturedTrace, Error);
              CapturedTrace.prototype.uncycle = function () {
                var length = this._length;
                if (length < 2)
                  return;
                var nodes = [];
                var stackToIndex = {};
                for (var i = 0, node = this; node !== undefined; ++i) {
                  nodes.push(node);
                  node = node._parent
                }
                length = this._length = i;
                for (var i = length - 1; i >= 0; --i) {
                  var stack = nodes[i].stack;
                  if (stackToIndex[stack] === undefined) {
                    stackToIndex[stack] = i
                  }
                }
                for (var i = 0; i < length; ++i) {
                  var currentStack = nodes[i].stack;
                  var index = stackToIndex[currentStack];
                  if (index !== undefined && index !== i) {
                    if (index > 0) {
                      nodes[index - 1]._parent = undefined;
                      nodes[index - 1]._length = 1
                    }
                    nodes[i]._parent = undefined;
                    nodes[i]._length = 1;
                    var cycleEdgeNode = i > 0 ? nodes[i - 1] : this;
                    if (index < length - 1) {
                      cycleEdgeNode._parent = nodes[index + 1];
                      cycleEdgeNode._parent.uncycle();
                      cycleEdgeNode._length = cycleEdgeNode._parent._length + 1
                    } else {
                      cycleEdgeNode._parent = undefined;
                      cycleEdgeNode._length = 1
                    }
                    var currentChildLength = cycleEdgeNode._length + 1;
                    for (var j = i - 2; j >= 0; --j) {
                      nodes[j]._length = currentChildLength;
                      currentChildLength++
                    }
                    return
                  }
                }
              };
              CapturedTrace.prototype.parent = function () {
                return this._parent
              };
              CapturedTrace.prototype.hasParent = function () {
                return this._parent !== undefined
              };
              CapturedTrace.prototype.attachExtraTrace = function (error) {
                if (error.__stackCleaned__)
                  return;
                this.uncycle();
                var parsed = CapturedTrace.parseStackAndMessage(error);
                var message = parsed.message;
                var stacks = [parsed.stack];
                var trace = this;
                while (trace !== undefined) {
                  stacks.push(cleanStack(trace.stack.split('\n')));
                  trace = trace._parent
                }
                removeCommonRoots(stacks);
                removeDuplicateOrEmptyJumps(stacks);
                util.notEnumerableProp(error, 'stack', reconstructStack(message, stacks));
                util.notEnumerableProp(error, '__stackCleaned__', true)
              };
              function reconstructStack(message, stacks) {
                for (var i = 0; i < stacks.length - 1; ++i) {
                  stacks[i].push('From previous event:');
                  stacks[i] = stacks[i].join('\n')
                }
                if (i < stacks.length) {
                  stacks[i] = stacks[i].join('\n')
                }
                return message + '\n' + stacks.join('\n')
              }
              function removeDuplicateOrEmptyJumps(stacks) {
                for (var i = 0; i < stacks.length; ++i) {
                  if (stacks[i].length === 0 || i + 1 < stacks.length && stacks[i][0] === stacks[i + 1][0]) {
                    stacks.splice(i, 1);
                    i--
                  }
                }
              }
              function removeCommonRoots(stacks) {
                var current = stacks[0];
                for (var i = 1; i < stacks.length; ++i) {
                  var prev = stacks[i];
                  var currentLastIndex = current.length - 1;
                  var currentLastLine = current[currentLastIndex];
                  var commonRootMeetPoint = -1;
                  for (var j = prev.length - 1; j >= 0; --j) {
                    if (prev[j] === currentLastLine) {
                      commonRootMeetPoint = j;
                      break
                    }
                  }
                  for (var j = commonRootMeetPoint; j >= 0; --j) {
                    var line = prev[j];
                    if (current[currentLastIndex] === line) {
                      current.pop();
                      currentLastIndex--
                    } else {
                      break
                    }
                  }
                  current = prev
                }
              }
              function cleanStack(stack) {
                var ret = [];
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  var isTraceLine = stackFramePattern.test(line) || '    (No stack trace)' === line;
                  var isInternalFrame = isTraceLine && shouldIgnore(line);
                  if (isTraceLine && !isInternalFrame) {
                    if (indentStackFrames && line.charAt(0) !== ' ') {
                      line = '    ' + line
                    }
                    ret.push(line)
                  }
                }
                return ret
              }
              function stackFramesAsArray(error) {
                var stack = error.stack.replace(/\s+$/g, '').split('\n');
                for (var i = 0; i < stack.length; ++i) {
                  var line = stack[i];
                  if ('    (No stack trace)' === line || stackFramePattern.test(line)) {
                    break
                  }
                }
                if (i > 0) {
                  stack = stack.slice(i)
                }
                return stack
              }
              CapturedTrace.parseStackAndMessage = function (error) {
                var stack = error.stack;
                var message = error.toString();
                stack = typeof stack === 'string' && stack.length > 0 ? stackFramesAsArray(error) : ['    (No stack trace)'];
                return {
                  message: message,
                  stack: cleanStack(stack)
                }
              };
              CapturedTrace.formatAndLogError = function (error, title) {
                if (typeof console !== 'undefined') {
                  var message;
                  if (typeof error === 'object' || typeof error === 'function') {
                    var stack = error.stack;
                    message = title + formatStack(stack, error)
                  } else {
                    message = title + String(error)
                  }
                  if (typeof warn === 'function') {
                    warn(message)
                  } else if (typeof console.log === 'function' || typeof console.log === 'object') {
                    console.log(message)
                  }
                }
              };
              CapturedTrace.unhandledRejection = function (reason) {
                CapturedTrace.formatAndLogError(reason, '^--- With additional stack trace: ')
              };
              CapturedTrace.isSupported = function () {
                return typeof captureStackTrace === 'function'
              };
              CapturedTrace.fireRejectionEvent = function (name, localHandler, reason, promise) {
                var localEventFired = false;
                try {
                  if (typeof localHandler === 'function') {
                    localEventFired = true;
                    if (name === 'rejectionHandled') {
                      localHandler(promise)
                    } else {
                      localHandler(reason, promise)
                    }
                  }
                } catch (e) {
                  async.throwLater(e)
                }
                var globalEventFired = false;
                try {
                  globalEventFired = fireGlobalEvent(name, reason, promise)
                } catch (e) {
                  globalEventFired = true;
                  async.throwLater(e)
                }
                var domEventFired = false;
                if (fireDomEvent) {
                  try {
                    domEventFired = fireDomEvent(name.toLowerCase(), {
                      reason: reason,
                      promise: promise
                    })
                  } catch (e) {
                    domEventFired = true;
                    async.throwLater(e)
                  }
                }
                if (!globalEventFired && !localEventFired && !domEventFired && name === 'unhandledRejection') {
                  CapturedTrace.formatAndLogError(reason, 'Unhandled rejection ')
                }
              };
              function formatNonError(obj) {
                var str;
                if (typeof obj === 'function') {
                  str = '[function ' + (obj.name || 'anonymous') + ']'
                } else {
                  str = obj.toString();
                  var ruselessToString = /\[object [a-zA-Z0-9$_]+\]/;
                  if (ruselessToString.test(str)) {
                    try {
                      var newStr = JSON.stringify(obj);
                      str = newStr
                    } catch (e) {
                    }
                  }
                  if (str.length === 0) {
                    str = '(empty array)'
                  }
                }
                return '(<' + snip(str) + '>, no stack trace)'
              }
              function snip(str) {
                var maxChars = 41;
                if (str.length < maxChars) {
                  return str
                }
                return str.substr(0, maxChars - 3) + '...'
              }
              var shouldIgnore = function () {
                return false
              };
              var parseLineInfoRegex = /[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;
              function parseLineInfo(line) {
                var matches = line.match(parseLineInfoRegex);
                if (matches) {
                  return {
                    fileName: matches[1],
                    line: parseInt(matches[2], 10)
                  }
                }
              }
              CapturedTrace.setBounds = function (firstLineError, lastLineError) {
                if (!CapturedTrace.isSupported())
                  return;
                var firstStackLines = firstLineError.stack.split('\n');
                var lastStackLines = lastLineError.stack.split('\n');
                var firstIndex = -1;
                var lastIndex = -1;
                var firstFileName;
                var lastFileName;
                for (var i = 0; i < firstStackLines.length; ++i) {
                  var result = parseLineInfo(firstStackLines[i]);
                  if (result) {
                    firstFileName = result.fileName;
                    firstIndex = result.line;
                    break
                  }
                }
                for (var i = 0; i < lastStackLines.length; ++i) {
                  var result = parseLineInfo(lastStackLines[i]);
                  if (result) {
                    lastFileName = result.fileName;
                    lastIndex = result.line;
                    break
                  }
                }
                if (firstIndex < 0 || lastIndex < 0 || !firstFileName || !lastFileName || firstFileName !== lastFileName || firstIndex >= lastIndex) {
                  return
                }
                shouldIgnore = function (line) {
                  if (bluebirdFramePattern.test(line))
                    return true;
                  var info = parseLineInfo(line);
                  if (info) {
                    if (info.fileName === firstFileName && (firstIndex <= info.line && info.line <= lastIndex)) {
                      return true
                    }
                  }
                  return false
                }
              };
              var captureStackTrace = function stackDetection() {
                var v8stackFramePattern = /^\s*at\s*/;
                var v8stackFormatter = function (stack, error) {
                  if (typeof stack === 'string')
                    return stack;
                  if (error.name !== undefined && error.message !== undefined) {
                    return error.toString()
                  }
                  return formatNonError(error)
                };
                if (typeof Error.stackTraceLimit === 'number' && typeof Error.captureStackTrace === 'function') {
                  Error.stackTraceLimit = Error.stackTraceLimit + 6;
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  var captureStackTrace = Error.captureStackTrace;
                  shouldIgnore = function (line) {
                    return bluebirdFramePattern.test(line)
                  };
                  return function (receiver, ignoreUntil) {
                    Error.stackTraceLimit = Error.stackTraceLimit + 6;
                    captureStackTrace(receiver, ignoreUntil);
                    Error.stackTraceLimit = Error.stackTraceLimit - 6
                  }
                }
                var err = new Error;
                if (typeof err.stack === 'string' && err.stack.split('\n')[0].indexOf('stackDetection@') >= 0) {
                  stackFramePattern = /@/;
                  formatStack = v8stackFormatter;
                  indentStackFrames = true;
                  return function captureStackTrace(o) {
                    o.stack = new Error().stack
                  }
                }
                var hasStackAfterThrow;
                try {
                  throw new Error
                } catch (e) {
                  hasStackAfterThrow = 'stack' in e
                }
                if (!('stack' in err) && hasStackAfterThrow && typeof Error.stackTraceLimit === 'number') {
                  stackFramePattern = v8stackFramePattern;
                  formatStack = v8stackFormatter;
                  return function captureStackTrace(o) {
                    Error.stackTraceLimit = Error.stackTraceLimit + 6;
                    try {
                      throw new Error
                    } catch (e) {
                      o.stack = e.stack
                    }
                    Error.stackTraceLimit = Error.stackTraceLimit - 6
                  }
                }
                formatStack = function (stack, error) {
                  if (typeof stack === 'string')
                    return stack;
                  if ((typeof error === 'object' || typeof error === 'function') && error.name !== undefined && error.message !== undefined) {
                    return error.toString()
                  }
                  return formatNonError(error)
                };
                return null
              }([]);
              var fireDomEvent;
              var fireGlobalEvent = function () {
                if (util.isNode) {
                  return function (name, reason, promise) {
                    if (name === 'rejectionHandled') {
                      return process.emit(name, promise)
                    } else {
                      return process.emit(name, reason, promise)
                    }
                  }
                } else {
                  var customEventWorks = false;
                  var anyEventWorks = true;
                  try {
                    var ev = new self.CustomEvent('test');
                    customEventWorks = ev instanceof CustomEvent
                  } catch (e) {
                  }
                  if (!customEventWorks) {
                    try {
                      var event = document.createEvent('CustomEvent');
                      event.initCustomEvent('testingtheevent', false, true, {});
                      self.dispatchEvent(event)
                    } catch (e) {
                      anyEventWorks = false
                    }
                  }
                  if (anyEventWorks) {
                    fireDomEvent = function (type, detail) {
                      var event;
                      if (customEventWorks) {
                        event = new self.CustomEvent(type, {
                          detail: detail,
                          bubbles: false,
                          cancelable: true
                        })
                      } else if (self.dispatchEvent) {
                        event = document.createEvent('CustomEvent');
                        event.initCustomEvent(type, false, true, detail)
                      }
                      return event ? !self.dispatchEvent(event) : false
                    }
                  }
                  var toWindowMethodNameMap = {};
                  toWindowMethodNameMap['unhandledRejection'] = ('on' + 'unhandledRejection').toLowerCase();
                  toWindowMethodNameMap['rejectionHandled'] = ('on' + 'rejectionHandled').toLowerCase();
                  return function (name, reason, promise) {
                    var methodName = toWindowMethodNameMap[name];
                    var method = self[methodName];
                    if (!method)
                      return false;
                    if (name === 'rejectionHandled') {
                      method.call(self, promise)
                    } else {
                      method.call(self, reason, promise)
                    }
                    return true
                  }
                }
              }();
              if (typeof console !== 'undefined' && typeof console.warn !== 'undefined') {
                warn = function (message) {
                  console.warn(message)
                };
                if (util.isNode && process.stderr.isTTY) {
                  warn = function (message) {
                    process.stderr.write('[31m' + message + '[39m\n')
                  }
                } else if (!util.isNode && typeof new Error().stack === 'string') {
                  warn = function (message) {
                    console.warn('%c' + message, 'color: red')
                  }
                }
              }
              return CapturedTrace
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        8: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (NEXT_FILTER) {
              var util = _dereq_('./util.js');
              var errors = _dereq_('./errors.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var keys = _dereq_('./es5.js').keys;
              var TypeError = errors.TypeError;
              function CatchFilter(instances, callback, promise) {
                this._instances = instances;
                this._callback = callback;
                this._promise = promise
              }
              function safePredicate(predicate, e) {
                var safeObject = {};
                var retfilter = tryCatch(predicate).call(safeObject, e);
                if (retfilter === errorObj)
                  return retfilter;
                var safeKeys = keys(safeObject);
                if (safeKeys.length) {
                  errorObj.e = new TypeError('Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n');
                  return errorObj
                }
                return retfilter
              }
              CatchFilter.prototype.doFilter = function (e) {
                var cb = this._callback;
                var promise = this._promise;
                var boundTo = promise._boundValue();
                for (var i = 0, len = this._instances.length; i < len; ++i) {
                  var item = this._instances[i];
                  var itemIsErrorType = item === Error || item != null && item.prototype instanceof Error;
                  if (itemIsErrorType && e instanceof item) {
                    var ret = tryCatch(cb).call(boundTo, e);
                    if (ret === errorObj) {
                      NEXT_FILTER.e = ret.e;
                      return NEXT_FILTER
                    }
                    return ret
                  } else if (typeof item === 'function' && !itemIsErrorType) {
                    var shouldHandle = safePredicate(item, e);
                    if (shouldHandle === errorObj) {
                      e = errorObj.e;
                      break
                    } else if (shouldHandle) {
                      var ret = tryCatch(cb).call(boundTo, e);
                      if (ret === errorObj) {
                        NEXT_FILTER.e = ret.e;
                        return NEXT_FILTER
                      }
                      return ret
                    }
                  }
                }
                NEXT_FILTER.e = e;
                return NEXT_FILTER
              };
              return CatchFilter
            }
          },
          {
            './errors.js': 13,
            './es5.js': 14,
            './util.js': 38
          }
        ],
        9: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, CapturedTrace, isDebugging) {
              var contextStack = [];
              function Context() {
                this._trace = new CapturedTrace(peekContext())
              }
              Context.prototype._pushContext = function () {
                if (!isDebugging())
                  return;
                if (this._trace !== undefined) {
                  contextStack.push(this._trace)
                }
              };
              Context.prototype._popContext = function () {
                if (!isDebugging())
                  return;
                if (this._trace !== undefined) {
                  contextStack.pop()
                }
              };
              function createContext() {
                if (isDebugging())
                  return new Context
              }
              function peekContext() {
                var lastIndex = contextStack.length - 1;
                if (lastIndex >= 0) {
                  return contextStack[lastIndex]
                }
                return undefined
              }
              Promise.prototype._peekContext = peekContext;
              Promise.prototype._pushContext = Context.prototype._pushContext;
              Promise.prototype._popContext = Context.prototype._popContext;
              return createContext
            }
          },
          {}
        ],
        10: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, CapturedTrace) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var Warning = _dereq_('./errors.js').Warning;
              var util = _dereq_('./util.js');
              var canAttachTrace = util.canAttachTrace;
              var unhandledRejectionHandled;
              var possiblyUnhandledRejection;
              var debugging = false || util.isNode && (!!process.env['BLUEBIRD_DEBUG'] || process.env['NODE_ENV'] === 'development');
              if (debugging) {
                async.disableTrampolineIfNecessary()
              }
              Promise.prototype._ignoreRejections = function () {
                this._unsetRejectionIsUnhandled();
                this._bitField = this._bitField | 16777216
              };
              Promise.prototype._ensurePossibleRejectionHandled = function () {
                if ((this._bitField & 16777216) !== 0)
                  return;
                this._setRejectionIsUnhandled();
                async.invokeLater(this._notifyUnhandledRejection, this, undefined)
              };
              Promise.prototype._notifyUnhandledRejectionIsHandled = function () {
                CapturedTrace.fireRejectionEvent('rejectionHandled', unhandledRejectionHandled, undefined, this)
              };
              Promise.prototype._notifyUnhandledRejection = function () {
                if (this._isRejectionUnhandled()) {
                  var reason = this._getCarriedStackTrace() || this._settledValue;
                  this._setUnhandledRejectionIsNotified();
                  CapturedTrace.fireRejectionEvent('unhandledRejection', possiblyUnhandledRejection, reason, this)
                }
              };
              Promise.prototype._setUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField | 524288
              };
              Promise.prototype._unsetUnhandledRejectionIsNotified = function () {
                this._bitField = this._bitField & ~524288
              };
              Promise.prototype._isUnhandledRejectionNotified = function () {
                return (this._bitField & 524288) > 0
              };
              Promise.prototype._setRejectionIsUnhandled = function () {
                this._bitField = this._bitField | 2097152
              };
              Promise.prototype._unsetRejectionIsUnhandled = function () {
                this._bitField = this._bitField & ~2097152;
                if (this._isUnhandledRejectionNotified()) {
                  this._unsetUnhandledRejectionIsNotified();
                  this._notifyUnhandledRejectionIsHandled()
                }
              };
              Promise.prototype._isRejectionUnhandled = function () {
                return (this._bitField & 2097152) > 0
              };
              Promise.prototype._setCarriedStackTrace = function (capturedTrace) {
                this._bitField = this._bitField | 1048576;
                this._fulfillmentHandler0 = capturedTrace
              };
              Promise.prototype._isCarryingStackTrace = function () {
                return (this._bitField & 1048576) > 0
              };
              Promise.prototype._getCarriedStackTrace = function () {
                return this._isCarryingStackTrace() ? this._fulfillmentHandler0 : undefined
              };
              Promise.prototype._captureStackTrace = function () {
                if (debugging) {
                  this._trace = new CapturedTrace(this._peekContext())
                }
                return this
              };
              Promise.prototype._attachExtraTrace = function (error, ignoreSelf) {
                if (debugging && canAttachTrace(error)) {
                  var trace = this._trace;
                  if (trace !== undefined) {
                    if (ignoreSelf)
                      trace = trace._parent
                  }
                  if (trace !== undefined) {
                    trace.attachExtraTrace(error)
                  } else if (!error.__stackCleaned__) {
                    var parsed = CapturedTrace.parseStackAndMessage(error);
                    util.notEnumerableProp(error, 'stack', parsed.message + '\n' + parsed.stack.join('\n'));
                    util.notEnumerableProp(error, '__stackCleaned__', true)
                  }
                }
              };
              Promise.prototype._warn = function (message) {
                var warning = new Warning(message);
                var ctx = this._peekContext();
                if (ctx) {
                  ctx.attachExtraTrace(warning)
                } else {
                  var parsed = CapturedTrace.parseStackAndMessage(warning);
                  warning.stack = parsed.message + '\n' + parsed.stack.join('\n')
                }
                CapturedTrace.formatAndLogError(warning, '')
              };
              Promise.onPossiblyUnhandledRejection = function (fn) {
                var domain = getDomain();
                possiblyUnhandledRejection = typeof fn === 'function' ? domain === null ? fn : domain.bind(fn) : undefined
              };
              Promise.onUnhandledRejectionHandled = function (fn) {
                var domain = getDomain();
                unhandledRejectionHandled = typeof fn === 'function' ? domain === null ? fn : domain.bind(fn) : undefined
              };
              Promise.longStackTraces = function () {
                if (async.haveItemsQueued() && debugging === false) {
                  throw new Error('cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/DT1qyG\n')
                }
                debugging = CapturedTrace.isSupported();
                if (debugging) {
                  async.disableTrampolineIfNecessary()
                }
              };
              Promise.hasLongStackTraces = function () {
                return debugging && CapturedTrace.isSupported()
              };
              if (!CapturedTrace.isSupported()) {
                Promise.longStackTraces = function () {
                };
                debugging = false
              }
              return function () {
                return debugging
              }
            }
          },
          {
            './async.js': 2,
            './errors.js': 13,
            './util.js': 38
          }
        ],
        11: [
          function (_dereq_, module, exports) {
            'use strict';
            var util = _dereq_('./util.js');
            var isPrimitive = util.isPrimitive;
            module.exports = function (Promise) {
              var returner = function () {
                return this
              };
              var thrower = function () {
                throw this
              };
              var returnUndefined = function () {
              };
              var throwUndefined = function () {
                throw undefined
              };
              var wrapper = function (value, action) {
                if (action === 1) {
                  return function () {
                    throw value
                  }
                } else if (action === 2) {
                  return function () {
                    return value
                  }
                }
              };
              Promise.prototype['return'] = Promise.prototype.thenReturn = function (value) {
                if (value === undefined)
                  return this.then(returnUndefined);
                if (isPrimitive(value)) {
                  return this._then(wrapper(value, 2), undefined, undefined, undefined, undefined)
                }
                return this._then(returner, undefined, undefined, value, undefined)
              };
              Promise.prototype['throw'] = Promise.prototype.thenThrow = function (reason) {
                if (reason === undefined)
                  return this.then(throwUndefined);
                if (isPrimitive(reason)) {
                  return this._then(wrapper(reason, 1), undefined, undefined, undefined, undefined)
                }
                return this._then(thrower, undefined, undefined, reason, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        12: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var PromiseReduce = Promise.reduce;
              Promise.prototype.each = function (fn) {
                return PromiseReduce(this, fn, null, INTERNAL)
              };
              Promise.each = function (promises, fn) {
                return PromiseReduce(promises, fn, null, INTERNAL)
              }
            }
          },
          {}
        ],
        13: [
          function (_dereq_, module, exports) {
            'use strict';
            var es5 = _dereq_('./es5.js');
            var Objectfreeze = es5.freeze;
            var util = _dereq_('./util.js');
            var inherits = util.inherits;
            var notEnumerableProp = util.notEnumerableProp;
            function subError(nameProperty, defaultMessage) {
              function SubError(message) {
                if (!(this instanceof SubError))
                  return new SubError(message);
                notEnumerableProp(this, 'message', typeof message === 'string' ? message : defaultMessage);
                notEnumerableProp(this, 'name', nameProperty);
                if (Error.captureStackTrace) {
                  Error.captureStackTrace(this, this.constructor)
                } else {
                  Error.call(this)
                }
              }
              inherits(SubError, Error);
              return SubError
            }
            var _TypeError, _RangeError;
            var Warning = subError('Warning', 'warning');
            var CancellationError = subError('CancellationError', 'cancellation error');
            var TimeoutError = subError('TimeoutError', 'timeout error');
            var AggregateError = subError('AggregateError', 'aggregate error');
            try {
              _TypeError = TypeError;
              _RangeError = RangeError
            } catch (e) {
              _TypeError = subError('TypeError', 'type error');
              _RangeError = subError('RangeError', 'range error')
            }
            var methods = ('join pop push shift unshift slice filter forEach some ' + 'every map indexOf lastIndexOf reduce reduceRight sort reverse').split(' ');
            for (var i = 0; i < methods.length; ++i) {
              if (typeof Array.prototype[methods[i]] === 'function') {
                AggregateError.prototype[methods[i]] = Array.prototype[methods[i]]
              }
            }
            es5.defineProperty(AggregateError.prototype, 'length', {
              value: 0,
              configurable: false,
              writable: true,
              enumerable: true
            });
            AggregateError.prototype['isOperational'] = true;
            var level = 0;
            AggregateError.prototype.toString = function () {
              var indent = Array(level * 4 + 1).join(' ');
              var ret = '\n' + indent + 'AggregateError of:' + '\n';
              level++;
              indent = Array(level * 4 + 1).join(' ');
              for (var i = 0; i < this.length; ++i) {
                var str = this[i] === this ? '[Circular AggregateError]' : this[i] + '';
                var lines = str.split('\n');
                for (var j = 0; j < lines.length; ++j) {
                  lines[j] = indent + lines[j]
                }
                str = lines.join('\n');
                ret += str + '\n'
              }
              level--;
              return ret
            };
            function OperationalError(message) {
              if (!(this instanceof OperationalError))
                return new OperationalError(message);
              notEnumerableProp(this, 'name', 'OperationalError');
              notEnumerableProp(this, 'message', message);
              this.cause = message;
              this['isOperational'] = true;
              if (message instanceof Error) {
                notEnumerableProp(this, 'message', message.message);
                notEnumerableProp(this, 'stack', message.stack)
              } else if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor)
              }
            }
            inherits(OperationalError, Error);
            var errorTypes = Error['__BluebirdErrorTypes__'];
            if (!errorTypes) {
              errorTypes = Objectfreeze({
                CancellationError: CancellationError,
                TimeoutError: TimeoutError,
                OperationalError: OperationalError,
                RejectionError: OperationalError,
                AggregateError: AggregateError
              });
              notEnumerableProp(Error, '__BluebirdErrorTypes__', errorTypes)
            }
            module.exports = {
              Error: Error,
              TypeError: _TypeError,
              RangeError: _RangeError,
              CancellationError: errorTypes.CancellationError,
              OperationalError: errorTypes.OperationalError,
              TimeoutError: errorTypes.TimeoutError,
              AggregateError: errorTypes.AggregateError,
              Warning: Warning
            }
          },
          {
            './es5.js': 14,
            './util.js': 38
          }
        ],
        14: [
          function (_dereq_, module, exports) {
            var isES5 = function () {
              'use strict';
              return this === undefined
            }();
            if (isES5) {
              module.exports = {
                freeze: Object.freeze,
                defineProperty: Object.defineProperty,
                getDescriptor: Object.getOwnPropertyDescriptor,
                keys: Object.keys,
                names: Object.getOwnPropertyNames,
                getPrototypeOf: Object.getPrototypeOf,
                isArray: Array.isArray,
                isES5: isES5,
                propertyIsWritable: function (obj, prop) {
                  var descriptor = Object.getOwnPropertyDescriptor(obj, prop);
                  return !!(!descriptor || descriptor.writable || descriptor.set)
                }
              }
            } else {
              var has = {}.hasOwnProperty;
              var str = {}.toString;
              var proto = {}.constructor.prototype;
              var ObjectKeys = function (o) {
                var ret = [];
                for (var key in o) {
                  if (has.call(o, key)) {
                    ret.push(key)
                  }
                }
                return ret
              };
              var ObjectGetDescriptor = function (o, key) {
                return { value: o[key] }
              };
              var ObjectDefineProperty = function (o, key, desc) {
                o[key] = desc.value;
                return o
              };
              var ObjectFreeze = function (obj) {
                return obj
              };
              var ObjectGetPrototypeOf = function (obj) {
                try {
                  return Object(obj).constructor.prototype
                } catch (e) {
                  return proto
                }
              };
              var ArrayIsArray = function (obj) {
                try {
                  return str.call(obj) === '[object Array]'
                } catch (e) {
                  return false
                }
              };
              module.exports = {
                isArray: ArrayIsArray,
                keys: ObjectKeys,
                names: ObjectKeys,
                defineProperty: ObjectDefineProperty,
                getDescriptor: ObjectGetDescriptor,
                freeze: ObjectFreeze,
                getPrototypeOf: ObjectGetPrototypeOf,
                isES5: isES5,
                propertyIsWritable: function () {
                  return true
                }
              }
            }
          },
          {}
        ],
        15: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var PromiseMap = Promise.map;
              Promise.prototype.filter = function (fn, options) {
                return PromiseMap(this, fn, options, INTERNAL)
              };
              Promise.filter = function (promises, fn, options) {
                return PromiseMap(promises, fn, options, INTERNAL)
              }
            }
          },
          {}
        ],
        16: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, NEXT_FILTER, tryConvertToPromise) {
              var util = _dereq_('./util.js');
              var isPrimitive = util.isPrimitive;
              var thrower = util.thrower;
              function returnThis() {
                return this
              }
              function throwThis() {
                throw this
              }
              function return$(r) {
                return function () {
                  return r
                }
              }
              function throw$(r) {
                return function () {
                  throw r
                }
              }
              function promisedFinally(ret, reasonOrValue, isFulfilled) {
                var then;
                if (isPrimitive(reasonOrValue)) {
                  then = isFulfilled ? return$(reasonOrValue) : throw$(reasonOrValue)
                } else {
                  then = isFulfilled ? returnThis : throwThis
                }
                return ret._then(then, thrower, undefined, reasonOrValue, undefined)
              }
              function finallyHandler(reasonOrValue) {
                var promise = this.promise;
                var handler = this.handler;
                var ret = promise._isBound() ? handler.call(promise._boundValue()) : handler();
                if (ret !== undefined) {
                  var maybePromise = tryConvertToPromise(ret, promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    return promisedFinally(maybePromise, reasonOrValue, promise.isFulfilled())
                  }
                }
                if (promise.isRejected()) {
                  NEXT_FILTER.e = reasonOrValue;
                  return NEXT_FILTER
                } else {
                  return reasonOrValue
                }
              }
              function tapHandler(value) {
                var promise = this.promise;
                var handler = this.handler;
                var ret = promise._isBound() ? handler.call(promise._boundValue(), value) : handler(value);
                if (ret !== undefined) {
                  var maybePromise = tryConvertToPromise(ret, promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    return promisedFinally(maybePromise, value, true)
                  }
                }
                return value
              }
              Promise.prototype._passThroughHandler = function (handler, isFinally) {
                if (typeof handler !== 'function')
                  return this.then();
                var promiseAndHandler = {
                  promise: this,
                  handler: handler
                };
                return this._then(isFinally ? finallyHandler : tapHandler, isFinally ? finallyHandler : undefined, undefined, promiseAndHandler, undefined)
              };
              Promise.prototype.lastly = Promise.prototype['finally'] = function (handler) {
                return this._passThroughHandler(handler, true)
              };
              Promise.prototype.tap = function (handler) {
                return this._passThroughHandler(handler, false)
              }
            }
          },
          { './util.js': 38 }
        ],
        17: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, apiRejection, INTERNAL, tryConvertToPromise) {
              var errors = _dereq_('./errors.js');
              var TypeError = errors.TypeError;
              var util = _dereq_('./util.js');
              var errorObj = util.errorObj;
              var tryCatch = util.tryCatch;
              var yieldHandlers = [];
              function promiseFromYieldHandler(value, yieldHandlers, traceParent) {
                for (var i = 0; i < yieldHandlers.length; ++i) {
                  traceParent._pushContext();
                  var result = tryCatch(yieldHandlers[i])(value);
                  traceParent._popContext();
                  if (result === errorObj) {
                    traceParent._pushContext();
                    var ret = Promise.reject(errorObj.e);
                    traceParent._popContext();
                    return ret
                  }
                  var maybePromise = tryConvertToPromise(result, traceParent);
                  if (maybePromise instanceof Promise)
                    return maybePromise
                }
                return null
              }
              function PromiseSpawn(generatorFunction, receiver, yieldHandler, stack) {
                var promise = this._promise = new Promise(INTERNAL);
                promise._captureStackTrace();
                this._stack = stack;
                this._generatorFunction = generatorFunction;
                this._receiver = receiver;
                this._generator = undefined;
                this._yieldHandlers = typeof yieldHandler === 'function' ? [yieldHandler].concat(yieldHandlers) : yieldHandlers
              }
              PromiseSpawn.prototype.promise = function () {
                return this._promise
              };
              PromiseSpawn.prototype._run = function () {
                this._generator = this._generatorFunction.call(this._receiver);
                this._receiver = this._generatorFunction = undefined;
                this._next(undefined)
              };
              PromiseSpawn.prototype._continue = function (result) {
                if (result === errorObj) {
                  return this._promise._rejectCallback(result.e, false, true)
                }
                var value = result.value;
                if (result.done === true) {
                  this._promise._resolveCallback(value)
                } else {
                  var maybePromise = tryConvertToPromise(value, this._promise);
                  if (!(maybePromise instanceof Promise)) {
                    maybePromise = promiseFromYieldHandler(maybePromise, this._yieldHandlers, this._promise);
                    if (maybePromise === null) {
                      this._throw(new TypeError('A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/4Y4pDk\n\n'.replace('%s', value) + 'From coroutine:\n' + this._stack.split('\n').slice(1, -7).join('\n')));
                      return
                    }
                  }
                  maybePromise._then(this._next, this._throw, undefined, this, null)
                }
              };
              PromiseSpawn.prototype._throw = function (reason) {
                this._promise._attachExtraTrace(reason);
                this._promise._pushContext();
                var result = tryCatch(this._generator['throw']).call(this._generator, reason);
                this._promise._popContext();
                this._continue(result)
              };
              PromiseSpawn.prototype._next = function (value) {
                this._promise._pushContext();
                var result = tryCatch(this._generator.next).call(this._generator, value);
                this._promise._popContext();
                this._continue(result)
              };
              Promise.coroutine = function (generatorFunction, options) {
                if (typeof generatorFunction !== 'function') {
                  throw new TypeError('generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n')
                }
                var yieldHandler = Object(options).yieldHandler;
                var PromiseSpawn$ = PromiseSpawn;
                var stack = new Error().stack;
                return function () {
                  var generator = generatorFunction.apply(this, arguments);
                  var spawn = new PromiseSpawn$(undefined, undefined, yieldHandler, stack);
                  spawn._generator = generator;
                  spawn._next(undefined);
                  return spawn.promise()
                }
              };
              Promise.coroutine.addYieldHandler = function (fn) {
                if (typeof fn !== 'function')
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                yieldHandlers.push(fn)
              };
              Promise.spawn = function (generatorFunction) {
                if (typeof generatorFunction !== 'function') {
                  return apiRejection('generatorFunction must be a function\n\n    See http://goo.gl/6Vqhm0\n')
                }
                var spawn = new PromiseSpawn(generatorFunction, this);
                var ret = spawn.promise();
                spawn._run(Promise.spawn);
                return ret
              }
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        18: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, tryConvertToPromise, INTERNAL) {
              var util = _dereq_('./util.js');
              var canEvaluate = util.canEvaluate;
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var reject;
              if (!true) {
                if (canEvaluate) {
                  var thenCallback = function (i) {
                    return new Function('value', 'holder', "                             \n            'use strict';                                                    \n            holder.pIndex = value;                                           \n            holder.checkFulfillment(this);                                   \n            ".replace(/Index/g, i))
                  };
                  var caller = function (count) {
                    var values = [];
                    for (var i = 1; i <= count; ++i)
                      values.push('holder.p' + i);
                    return new Function('holder', "                                      \n            'use strict';                                                    \n            var callback = holder.fn;                                        \n            return callback(values);                                         \n            ".replace(/values/g, values.join(', ')))
                  };
                  var thenCallbacks = [];
                  var callers = [undefined];
                  for (var i = 1; i <= 5; ++i) {
                    thenCallbacks.push(thenCallback(i));
                    callers.push(caller(i))
                  }
                  var Holder = function (total, fn) {
                    this.p1 = this.p2 = this.p3 = this.p4 = this.p5 = null;
                    this.fn = fn;
                    this.total = total;
                    this.now = 0
                  };
                  Holder.prototype.callers = callers;
                  Holder.prototype.checkFulfillment = function (promise) {
                    var now = this.now;
                    now++;
                    var total = this.total;
                    if (now >= total) {
                      var handler = this.callers[total];
                      promise._pushContext();
                      var ret = tryCatch(handler)(this);
                      promise._popContext();
                      if (ret === errorObj) {
                        promise._rejectCallback(ret.e, false, true)
                      } else {
                        promise._resolveCallback(ret)
                      }
                    } else {
                      this.now = now
                    }
                  };
                  var reject = function (reason) {
                    this._reject(reason)
                  }
                }
              }
              Promise.join = function () {
                var last = arguments.length - 1;
                var fn;
                if (last > 0 && typeof arguments[last] === 'function') {
                  fn = arguments[last];
                  if (!true) {
                    if (last < 6 && canEvaluate) {
                      var ret = new Promise(INTERNAL);
                      ret._captureStackTrace();
                      var holder = new Holder(last, fn);
                      var callbacks = thenCallbacks;
                      for (var i = 0; i < last; ++i) {
                        var maybePromise = tryConvertToPromise(arguments[i], ret);
                        if (maybePromise instanceof Promise) {
                          maybePromise = maybePromise._target();
                          if (maybePromise._isPending()) {
                            maybePromise._then(callbacks[i], reject, undefined, ret, holder)
                          } else if (maybePromise._isFulfilled()) {
                            callbacks[i].call(ret, maybePromise._value(), holder)
                          } else {
                            ret._reject(maybePromise._reason())
                          }
                        } else {
                          callbacks[i].call(ret, maybePromise, holder)
                        }
                      }
                      return ret
                    }
                  }
                }
                var $_len = arguments.length;
                var args = new Array($_len);
                for (var $_i = 0; $_i < $_len; ++$_i) {
                  args[$_i] = arguments[$_i]
                }
                if (fn)
                  args.pop();
                var ret = new PromiseArray(args).promise();
                return fn !== undefined ? ret.spread(fn) : ret
              }
            }
          },
          { './util.js': 38 }
        ],
        19: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              var PENDING = {};
              var EMPTY_ARRAY = [];
              function MappingPromiseArray(promises, fn, limit, _filter) {
                this.constructor$(promises);
                this._promise._captureStackTrace();
                var domain = getDomain();
                this._callback = domain === null ? fn : domain.bind(fn);
                this._preservedValues = _filter === INTERNAL ? new Array(this.length()) : null;
                this._limit = limit;
                this._inFlight = 0;
                this._queue = limit >= 1 ? [] : EMPTY_ARRAY;
                async.invoke(init, this, undefined)
              }
              util.inherits(MappingPromiseArray, PromiseArray);
              function init() {
                this._init$(undefined, -2)
              }
              MappingPromiseArray.prototype._init = function () {
              };
              MappingPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var values = this._values;
                var length = this.length();
                var preservedValues = this._preservedValues;
                var limit = this._limit;
                if (values[index] === PENDING) {
                  values[index] = value;
                  if (limit >= 1) {
                    this._inFlight--;
                    this._drainQueue();
                    if (this._isResolved())
                      return
                  }
                } else {
                  if (limit >= 1 && this._inFlight >= limit) {
                    values[index] = value;
                    this._queue.push(index);
                    return
                  }
                  if (preservedValues !== null)
                    preservedValues[index] = value;
                  var callback = this._callback;
                  var receiver = this._promise._boundValue();
                  this._promise._pushContext();
                  var ret = tryCatch(callback).call(receiver, value, index, length);
                  this._promise._popContext();
                  if (ret === errorObj)
                    return this._reject(ret.e);
                  var maybePromise = tryConvertToPromise(ret, this._promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (maybePromise._isPending()) {
                      if (limit >= 1)
                        this._inFlight++;
                      values[index] = PENDING;
                      return maybePromise._proxyPromiseArray(this, index)
                    } else if (maybePromise._isFulfilled()) {
                      ret = maybePromise._value()
                    } else {
                      return this._reject(maybePromise._reason())
                    }
                  }
                  values[index] = ret
                }
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= length) {
                  if (preservedValues !== null) {
                    this._filter(values, preservedValues)
                  } else {
                    this._resolve(values)
                  }
                }
              };
              MappingPromiseArray.prototype._drainQueue = function () {
                var queue = this._queue;
                var limit = this._limit;
                var values = this._values;
                while (queue.length > 0 && this._inFlight < limit) {
                  if (this._isResolved())
                    return;
                  var index = queue.pop();
                  this._promiseFulfilled(values[index], index)
                }
              };
              MappingPromiseArray.prototype._filter = function (booleans, values) {
                var len = values.length;
                var ret = new Array(len);
                var j = 0;
                for (var i = 0; i < len; ++i) {
                  if (booleans[i])
                    ret[j++] = values[i]
                }
                ret.length = j;
                this._resolve(ret)
              };
              MappingPromiseArray.prototype.preservedValues = function () {
                return this._preservedValues
              };
              function map(promises, fn, options, _filter) {
                var limit = typeof options === 'object' && options !== null ? options.concurrency : 0;
                limit = typeof limit === 'number' && isFinite(limit) && limit >= 1 ? limit : 0;
                return new MappingPromiseArray(promises, fn, limit, _filter)
              }
              Promise.prototype.map = function (fn, options) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                return map(this, fn, options, null).promise()
              };
              Promise.map = function (promises, fn, options, _filter) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                return map(promises, fn, options, _filter).promise()
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        20: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              Promise.method = function (fn) {
                if (typeof fn !== 'function') {
                  throw new Promise.TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                return function () {
                  var ret = new Promise(INTERNAL);
                  ret._captureStackTrace();
                  ret._pushContext();
                  var value = tryCatch(fn).apply(this, arguments);
                  ret._popContext();
                  ret._resolveFromSyncValue(value);
                  return ret
                }
              };
              Promise.attempt = Promise['try'] = function (fn, args, ctx) {
                if (typeof fn !== 'function') {
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._pushContext();
                var value = util.isArray(args) ? tryCatch(fn).apply(ctx, args) : tryCatch(fn).call(ctx, args);
                ret._popContext();
                ret._resolveFromSyncValue(value);
                return ret
              };
              Promise.prototype._resolveFromSyncValue = function (value) {
                if (value === util.errorObj) {
                  this._rejectCallback(value.e, false, true)
                } else {
                  this._resolveCallback(value, true)
                }
              }
            }
          },
          { './util.js': 38 }
        ],
        21: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              var util = _dereq_('./util.js');
              var async = _dereq_('./async.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              function spreadAdapter(val, nodeback) {
                var promise = this;
                if (!util.isArray(val))
                  return successAdapter.call(promise, val, nodeback);
                var ret = tryCatch(nodeback).apply(promise._boundValue(), [null].concat(val));
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              function successAdapter(val, nodeback) {
                var promise = this;
                var receiver = promise._boundValue();
                var ret = val === undefined ? tryCatch(nodeback).call(receiver, null) : tryCatch(nodeback).call(receiver, null, val);
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              function errorAdapter(reason, nodeback) {
                var promise = this;
                if (!reason) {
                  var target = promise._target();
                  var newReason = target._getCarriedStackTrace();
                  newReason.cause = reason;
                  reason = newReason
                }
                var ret = tryCatch(nodeback).call(promise._boundValue(), reason);
                if (ret === errorObj) {
                  async.throwLater(ret.e)
                }
              }
              Promise.prototype.asCallback = Promise.prototype.nodeify = function (nodeback, options) {
                if (typeof nodeback == 'function') {
                  var adapter = successAdapter;
                  if (options !== undefined && Object(options).spread) {
                    adapter = spreadAdapter
                  }
                  this._then(adapter, errorAdapter, undefined, this, nodeback)
                }
                return this
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        22: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray) {
              var util = _dereq_('./util.js');
              var async = _dereq_('./async.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              Promise.prototype.progressed = function (handler) {
                return this._then(undefined, undefined, handler, undefined, undefined)
              };
              Promise.prototype._progress = function (progressValue) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._target()._progressUnchecked(progressValue)
              };
              Promise.prototype._progressHandlerAt = function (index) {
                return index === 0 ? this._progressHandler0 : this[(index << 2) + index - 5 + 2]
              };
              Promise.prototype._doProgressWith = function (progression) {
                var progressValue = progression.value;
                var handler = progression.handler;
                var promise = progression.promise;
                var receiver = progression.receiver;
                var ret = tryCatch(handler).call(receiver, progressValue);
                if (ret === errorObj) {
                  if (ret.e != null && ret.e.name !== 'StopProgressPropagation') {
                    var trace = util.canAttachTrace(ret.e) ? ret.e : new Error(util.toString(ret.e));
                    promise._attachExtraTrace(trace);
                    promise._progress(ret.e)
                  }
                } else if (ret instanceof Promise) {
                  ret._then(promise._progress, null, null, promise, undefined)
                } else {
                  promise._progress(ret)
                }
              };
              Promise.prototype._progressUnchecked = function (progressValue) {
                var len = this._length();
                var progress = this._progress;
                for (var i = 0; i < len; i++) {
                  var handler = this._progressHandlerAt(i);
                  var promise = this._promiseAt(i);
                  if (!(promise instanceof Promise)) {
                    var receiver = this._receiverAt(i);
                    if (typeof handler === 'function') {
                      handler.call(receiver, progressValue, promise)
                    } else if (receiver instanceof PromiseArray && !receiver._isResolved()) {
                      receiver._promiseProgressed(progressValue, promise)
                    }
                    continue
                  }
                  if (typeof handler === 'function') {
                    async.invoke(this._doProgressWith, this, {
                      handler: handler,
                      promise: promise,
                      receiver: this._receiverAt(i),
                      value: progressValue
                    })
                  } else {
                    async.invoke(progress, promise, progressValue)
                  }
                }
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        23: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function () {
              var makeSelfResolutionError = function () {
                return new TypeError('circular promise resolution chain\n\n    See http://goo.gl/LhFpo0\n')
              };
              var reflect = function () {
                return new Promise.PromiseInspection(this._target())
              };
              var apiRejection = function (msg) {
                return Promise.reject(new TypeError(msg))
              };
              var util = _dereq_('./util.js');
              var getDomain;
              if (util.isNode) {
                getDomain = function () {
                  var ret = process.domain;
                  if (ret === undefined)
                    ret = null;
                  return ret
                }
              } else {
                getDomain = function () {
                  return null
                }
              }
              util.notEnumerableProp(Promise, '_getDomain', getDomain);
              var async = _dereq_('./async.js');
              var errors = _dereq_('./errors.js');
              var TypeError = Promise.TypeError = errors.TypeError;
              Promise.RangeError = errors.RangeError;
              Promise.CancellationError = errors.CancellationError;
              Promise.TimeoutError = errors.TimeoutError;
              Promise.OperationalError = errors.OperationalError;
              Promise.RejectionError = errors.OperationalError;
              Promise.AggregateError = errors.AggregateError;
              var INTERNAL = function () {
              };
              var APPLY = {};
              var NEXT_FILTER = { e: null };
              var tryConvertToPromise = _dereq_('./thenables.js')(Promise, INTERNAL);
              var PromiseArray = _dereq_('./promise_array.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              var CapturedTrace = _dereq_('./captured_trace.js')();
              var isDebugging = _dereq_('./debuggability.js')(Promise, CapturedTrace);
              /*jshint unused:false*/
              var createContext = _dereq_('./context.js')(Promise, CapturedTrace, isDebugging);
              var CatchFilter = _dereq_('./catch_filter.js')(NEXT_FILTER);
              var PromiseResolver = _dereq_('./promise_resolver.js');
              var nodebackForPromise = PromiseResolver._nodebackForPromise;
              var errorObj = util.errorObj;
              var tryCatch = util.tryCatch;
              function Promise(resolver) {
                if (typeof resolver !== 'function') {
                  throw new TypeError('the promise constructor requires a resolver function\n\n    See http://goo.gl/EC22Yn\n')
                }
                if (this.constructor !== Promise) {
                  throw new TypeError('the promise constructor cannot be invoked directly\n\n    See http://goo.gl/KsIlge\n')
                }
                this._bitField = 0;
                this._fulfillmentHandler0 = undefined;
                this._rejectionHandler0 = undefined;
                this._progressHandler0 = undefined;
                this._promise0 = undefined;
                this._receiver0 = undefined;
                this._settledValue = undefined;
                if (resolver !== INTERNAL)
                  this._resolveFromResolver(resolver)
              }
              Promise.prototype.toString = function () {
                return '[object Promise]'
              };
              Promise.prototype.caught = Promise.prototype['catch'] = function (fn) {
                var len = arguments.length;
                if (len > 1) {
                  var catchInstances = new Array(len - 1), j = 0, i;
                  for (i = 0; i < len - 1; ++i) {
                    var item = arguments[i];
                    if (typeof item === 'function') {
                      catchInstances[j++] = item
                    } else {
                      return Promise.reject(new TypeError('Catch filter must inherit from Error or be a simple predicate function\n\n    See http://goo.gl/o84o68\n'))
                    }
                  }
                  catchInstances.length = j;
                  fn = arguments[i];
                  var catchFilter = new CatchFilter(catchInstances, fn, this);
                  return this._then(undefined, catchFilter.doFilter, undefined, catchFilter, undefined)
                }
                return this._then(undefined, fn, undefined, undefined, undefined)
              };
              Promise.prototype.reflect = function () {
                return this._then(reflect, reflect, undefined, this, undefined)
              };
              Promise.prototype.then = function (didFulfill, didReject, didProgress) {
                if (isDebugging() && arguments.length > 0 && typeof didFulfill !== 'function' && typeof didReject !== 'function') {
                  var msg = '.then() only accepts functions but was passed: ' + util.classString(didFulfill);
                  if (arguments.length > 1) {
                    msg += ', ' + util.classString(didReject)
                  }
                  this._warn(msg)
                }
                return this._then(didFulfill, didReject, didProgress, undefined, undefined)
              };
              Promise.prototype.done = function (didFulfill, didReject, didProgress) {
                var promise = this._then(didFulfill, didReject, didProgress, undefined, undefined);
                promise._setIsFinal()
              };
              Promise.prototype.spread = function (didFulfill, didReject) {
                return this.all()._then(didFulfill, didReject, undefined, APPLY, undefined)
              };
              Promise.prototype.isCancellable = function () {
                return !this.isResolved() && this._cancellable()
              };
              Promise.prototype.toJSON = function () {
                var ret = {
                  isFulfilled: false,
                  isRejected: false,
                  fulfillmentValue: undefined,
                  rejectionReason: undefined
                };
                if (this.isFulfilled()) {
                  ret.fulfillmentValue = this.value();
                  ret.isFulfilled = true
                } else if (this.isRejected()) {
                  ret.rejectionReason = this.reason();
                  ret.isRejected = true
                }
                return ret
              };
              Promise.prototype.all = function () {
                return new PromiseArray(this).promise()
              };
              Promise.prototype.error = function (fn) {
                return this.caught(util.originatesFromRejection, fn)
              };
              Promise.is = function (val) {
                return val instanceof Promise
              };
              Promise.fromNode = function (fn) {
                var ret = new Promise(INTERNAL);
                var result = tryCatch(fn)(nodebackForPromise(ret));
                if (result === errorObj) {
                  ret._rejectCallback(result.e, true, true)
                }
                return ret
              };
              Promise.all = function (promises) {
                return new PromiseArray(promises).promise()
              };
              Promise.defer = Promise.pending = function () {
                var promise = new Promise(INTERNAL);
                return new PromiseResolver(promise)
              };
              Promise.cast = function (obj) {
                var ret = tryConvertToPromise(obj);
                if (!(ret instanceof Promise)) {
                  var val = ret;
                  ret = new Promise(INTERNAL);
                  ret._fulfillUnchecked(val)
                }
                return ret
              };
              Promise.resolve = Promise.fulfilled = Promise.cast;
              Promise.reject = Promise.rejected = function (reason) {
                var ret = new Promise(INTERNAL);
                ret._captureStackTrace();
                ret._rejectCallback(reason, true);
                return ret
              };
              Promise.setScheduler = function (fn) {
                if (typeof fn !== 'function')
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var prev = async._schedule;
                async._schedule = fn;
                return prev
              };
              Promise.prototype._then = function (didFulfill, didReject, didProgress, receiver, internalData) {
                var haveInternalData = internalData !== undefined;
                var ret = haveInternalData ? internalData : new Promise(INTERNAL);
                if (!haveInternalData) {
                  ret._propagateFrom(this, 4 | 1);
                  ret._captureStackTrace()
                }
                var target = this._target();
                if (target !== this) {
                  if (receiver === undefined)
                    receiver = this._boundTo;
                  if (!haveInternalData)
                    ret._setIsMigrated()
                }
                var callbackIndex = target._addCallbacks(didFulfill, didReject, didProgress, ret, receiver, getDomain());
                if (target._isResolved() && !target._isSettlePromisesQueued()) {
                  async.invoke(target._settlePromiseAtPostResolution, target, callbackIndex)
                }
                return ret
              };
              Promise.prototype._settlePromiseAtPostResolution = function (index) {
                if (this._isRejectionUnhandled())
                  this._unsetRejectionIsUnhandled();
                this._settlePromiseAt(index)
              };
              Promise.prototype._length = function () {
                return this._bitField & 131071
              };
              Promise.prototype._isFollowingOrFulfilledOrRejected = function () {
                return (this._bitField & 939524096) > 0
              };
              Promise.prototype._isFollowing = function () {
                return (this._bitField & 536870912) === 536870912
              };
              Promise.prototype._setLength = function (len) {
                this._bitField = this._bitField & -131072 | len & 131071
              };
              Promise.prototype._setFulfilled = function () {
                this._bitField = this._bitField | 268435456
              };
              Promise.prototype._setRejected = function () {
                this._bitField = this._bitField | 134217728
              };
              Promise.prototype._setFollowing = function () {
                this._bitField = this._bitField | 536870912
              };
              Promise.prototype._setIsFinal = function () {
                this._bitField = this._bitField | 33554432
              };
              Promise.prototype._isFinal = function () {
                return (this._bitField & 33554432) > 0
              };
              Promise.prototype._cancellable = function () {
                return (this._bitField & 67108864) > 0
              };
              Promise.prototype._setCancellable = function () {
                this._bitField = this._bitField | 67108864
              };
              Promise.prototype._unsetCancellable = function () {
                this._bitField = this._bitField & ~67108864
              };
              Promise.prototype._setIsMigrated = function () {
                this._bitField = this._bitField | 4194304
              };
              Promise.prototype._unsetIsMigrated = function () {
                this._bitField = this._bitField & ~4194304
              };
              Promise.prototype._isMigrated = function () {
                return (this._bitField & 4194304) > 0
              };
              Promise.prototype._receiverAt = function (index) {
                var ret = index === 0 ? this._receiver0 : this[index * 5 - 5 + 4];
                if (ret === undefined && this._isBound()) {
                  return this._boundValue()
                }
                return ret
              };
              Promise.prototype._promiseAt = function (index) {
                return index === 0 ? this._promise0 : this[index * 5 - 5 + 3]
              };
              Promise.prototype._fulfillmentHandlerAt = function (index) {
                return index === 0 ? this._fulfillmentHandler0 : this[index * 5 - 5 + 0]
              };
              Promise.prototype._rejectionHandlerAt = function (index) {
                return index === 0 ? this._rejectionHandler0 : this[index * 5 - 5 + 1]
              };
              Promise.prototype._boundValue = function () {
                var ret = this._boundTo;
                if (ret !== undefined) {
                  if (ret instanceof Promise) {
                    if (ret.isFulfilled()) {
                      return ret.value()
                    } else {
                      return undefined
                    }
                  }
                }
                return ret
              };
              Promise.prototype._migrateCallbacks = function (follower, index) {
                var fulfill = follower._fulfillmentHandlerAt(index);
                var reject = follower._rejectionHandlerAt(index);
                var progress = follower._progressHandlerAt(index);
                var promise = follower._promiseAt(index);
                var receiver = follower._receiverAt(index);
                if (promise instanceof Promise)
                  promise._setIsMigrated();
                this._addCallbacks(fulfill, reject, progress, promise, receiver, null)
              };
              Promise.prototype._addCallbacks = function (fulfill, reject, progress, promise, receiver, domain) {
                var index = this._length();
                if (index >= 131071 - 5) {
                  index = 0;
                  this._setLength(0)
                }
                if (index === 0) {
                  this._promise0 = promise;
                  if (receiver !== undefined)
                    this._receiver0 = receiver;
                  if (typeof fulfill === 'function' && !this._isCarryingStackTrace()) {
                    this._fulfillmentHandler0 = domain === null ? fulfill : domain.bind(fulfill)
                  }
                  if (typeof reject === 'function') {
                    this._rejectionHandler0 = domain === null ? reject : domain.bind(reject)
                  }
                  if (typeof progress === 'function') {
                    this._progressHandler0 = domain === null ? progress : domain.bind(progress)
                  }
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = promise;
                  this[base + 4] = receiver;
                  if (typeof fulfill === 'function') {
                    this[base + 0] = domain === null ? fulfill : domain.bind(fulfill)
                  }
                  if (typeof reject === 'function') {
                    this[base + 1] = domain === null ? reject : domain.bind(reject)
                  }
                  if (typeof progress === 'function') {
                    this[base + 2] = domain === null ? progress : domain.bind(progress)
                  }
                }
                this._setLength(index + 1);
                return index
              };
              Promise.prototype._setProxyHandlers = function (receiver, promiseSlotValue) {
                var index = this._length();
                if (index >= 131071 - 5) {
                  index = 0;
                  this._setLength(0)
                }
                if (index === 0) {
                  this._promise0 = promiseSlotValue;
                  this._receiver0 = receiver
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = promiseSlotValue;
                  this[base + 4] = receiver
                }
                this._setLength(index + 1)
              };
              Promise.prototype._proxyPromiseArray = function (promiseArray, index) {
                this._setProxyHandlers(promiseArray, index)
              };
              Promise.prototype._resolveCallback = function (value, shouldBind) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                if (value === this)
                  return this._rejectCallback(makeSelfResolutionError(), false, true);
                var maybePromise = tryConvertToPromise(value, this);
                if (!(maybePromise instanceof Promise))
                  return this._fulfill(value);
                var propagationFlags = 1 | (shouldBind ? 4 : 0);
                this._propagateFrom(maybePromise, propagationFlags);
                var promise = maybePromise._target();
                if (promise._isPending()) {
                  var len = this._length();
                  for (var i = 0; i < len; ++i) {
                    promise._migrateCallbacks(this, i)
                  }
                  this._setFollowing();
                  this._setLength(0);
                  this._setFollowee(promise)
                } else if (promise._isFulfilled()) {
                  this._fulfillUnchecked(promise._value())
                } else {
                  this._rejectUnchecked(promise._reason(), promise._getCarriedStackTrace())
                }
              };
              Promise.prototype._rejectCallback = function (reason, synchronous, shouldNotMarkOriginatingFromRejection) {
                if (!shouldNotMarkOriginatingFromRejection) {
                  util.markAsOriginatingFromRejection(reason)
                }
                var trace = util.ensureErrorObject(reason);
                var hasStack = trace === reason;
                this._attachExtraTrace(trace, synchronous ? hasStack : false);
                this._reject(reason, hasStack ? undefined : trace)
              };
              Promise.prototype._resolveFromResolver = function (resolver) {
                var promise = this;
                this._captureStackTrace();
                this._pushContext();
                var synchronous = true;
                var r = tryCatch(resolver)(function (value) {
                  if (promise === null)
                    return;
                  promise._resolveCallback(value);
                  promise = null
                }, function (reason) {
                  if (promise === null)
                    return;
                  promise._rejectCallback(reason, synchronous);
                  promise = null
                });
                synchronous = false;
                this._popContext();
                if (r !== undefined && r === errorObj && promise !== null) {
                  promise._rejectCallback(r.e, true, true);
                  promise = null
                }
              };
              Promise.prototype._settlePromiseFromHandler = function (handler, receiver, value, promise) {
                if (promise._isRejected())
                  return;
                promise._pushContext();
                var x;
                if (receiver === APPLY && !this._isRejected()) {
                  x = tryCatch(handler).apply(this._boundValue(), value)
                } else {
                  x = tryCatch(handler).call(receiver, value)
                }
                promise._popContext();
                if (x === errorObj || x === promise || x === NEXT_FILTER) {
                  var err = x === promise ? makeSelfResolutionError() : x.e;
                  promise._rejectCallback(err, false, true)
                } else {
                  promise._resolveCallback(x)
                }
              };
              Promise.prototype._target = function () {
                var ret = this;
                while (ret._isFollowing())
                  ret = ret._followee();
                return ret
              };
              Promise.prototype._followee = function () {
                return this._rejectionHandler0
              };
              Promise.prototype._setFollowee = function (promise) {
                this._rejectionHandler0 = promise
              };
              Promise.prototype._cleanValues = function () {
                if (this._cancellable()) {
                  this._cancellationParent = undefined
                }
              };
              Promise.prototype._propagateFrom = function (parent, flags) {
                if ((flags & 1) > 0 && parent._cancellable()) {
                  this._setCancellable();
                  this._cancellationParent = parent
                }
                if ((flags & 4) > 0 && parent._isBound()) {
                  this._setBoundTo(parent._boundTo)
                }
              };
              Promise.prototype._fulfill = function (value) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._fulfillUnchecked(value)
              };
              Promise.prototype._reject = function (reason, carriedStackTrace) {
                if (this._isFollowingOrFulfilledOrRejected())
                  return;
                this._rejectUnchecked(reason, carriedStackTrace)
              };
              Promise.prototype._settlePromiseAt = function (index) {
                var promise = this._promiseAt(index);
                var isPromise = promise instanceof Promise;
                if (isPromise && promise._isMigrated()) {
                  promise._unsetIsMigrated();
                  return async.invoke(this._settlePromiseAt, this, index)
                }
                var handler = this._isFulfilled() ? this._fulfillmentHandlerAt(index) : this._rejectionHandlerAt(index);
                var carriedStackTrace = this._isCarryingStackTrace() ? this._getCarriedStackTrace() : undefined;
                var value = this._settledValue;
                var receiver = this._receiverAt(index);
                this._clearCallbackDataAtIndex(index);
                if (typeof handler === 'function') {
                  if (!isPromise) {
                    handler.call(receiver, value, promise)
                  } else {
                    this._settlePromiseFromHandler(handler, receiver, value, promise)
                  }
                } else if (receiver instanceof PromiseArray) {
                  if (!receiver._isResolved()) {
                    if (this._isFulfilled()) {
                      receiver._promiseFulfilled(value, promise)
                    } else {
                      receiver._promiseRejected(value, promise)
                    }
                  }
                } else if (isPromise) {
                  if (this._isFulfilled()) {
                    promise._fulfill(value)
                  } else {
                    promise._reject(value, carriedStackTrace)
                  }
                }
                if (index >= 4 && (index & 31) === 4)
                  async.invokeLater(this._setLength, this, 0)
              };
              Promise.prototype._clearCallbackDataAtIndex = function (index) {
                if (index === 0) {
                  if (!this._isCarryingStackTrace()) {
                    this._fulfillmentHandler0 = undefined
                  }
                  this._rejectionHandler0 = this._progressHandler0 = this._receiver0 = this._promise0 = undefined
                } else {
                  var base = index * 5 - 5;
                  this[base + 3] = this[base + 4] = this[base + 0] = this[base + 1] = this[base + 2] = undefined
                }
              };
              Promise.prototype._isSettlePromisesQueued = function () {
                return (this._bitField & -1073741824) === -1073741824
              };
              Promise.prototype._setSettlePromisesQueued = function () {
                this._bitField = this._bitField | -1073741824
              };
              Promise.prototype._unsetSettlePromisesQueued = function () {
                this._bitField = this._bitField & ~-1073741824
              };
              Promise.prototype._queueSettlePromises = function () {
                async.settlePromises(this);
                this._setSettlePromisesQueued()
              };
              Promise.prototype._fulfillUnchecked = function (value) {
                if (value === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._rejectUnchecked(err, undefined)
                }
                this._setFulfilled();
                this._settledValue = value;
                this._cleanValues();
                if (this._length() > 0) {
                  this._queueSettlePromises()
                }
              };
              Promise.prototype._rejectUncheckedCheckError = function (reason) {
                var trace = util.ensureErrorObject(reason);
                this._rejectUnchecked(reason, trace === reason ? undefined : trace)
              };
              Promise.prototype._rejectUnchecked = function (reason, trace) {
                if (reason === this) {
                  var err = makeSelfResolutionError();
                  this._attachExtraTrace(err);
                  return this._rejectUnchecked(err)
                }
                this._setRejected();
                this._settledValue = reason;
                this._cleanValues();
                if (this._isFinal()) {
                  async.throwLater(function (e) {
                    if ('stack' in e) {
                      async.invokeFirst(CapturedTrace.unhandledRejection, undefined, e)
                    }
                    throw e
                  }, trace === undefined ? reason : trace);
                  return
                }
                if (trace !== undefined && trace !== reason) {
                  this._setCarriedStackTrace(trace)
                }
                if (this._length() > 0) {
                  this._queueSettlePromises()
                } else {
                  this._ensurePossibleRejectionHandled()
                }
              };
              Promise.prototype._settlePromises = function () {
                this._unsetSettlePromisesQueued();
                var len = this._length();
                for (var i = 0; i < len; i++) {
                  this._settlePromiseAt(i)
                }
              };
              util.notEnumerableProp(Promise, '_makeSelfResolutionError', makeSelfResolutionError);
              _dereq_('./progress.js')(Promise, PromiseArray);
              _dereq_('./method.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              _dereq_('./bind.js')(Promise, INTERNAL, tryConvertToPromise);
              _dereq_('./finally.js')(Promise, NEXT_FILTER, tryConvertToPromise);
              _dereq_('./direct_resolve.js')(Promise);
              _dereq_('./synchronous_inspection.js')(Promise);
              _dereq_('./join.js')(Promise, PromiseArray, tryConvertToPromise, INTERNAL);
              Promise.Promise = Promise;
              _dereq_('./map.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
              _dereq_('./cancel.js')(Promise);
              _dereq_('./using.js')(Promise, apiRejection, tryConvertToPromise, createContext);
              _dereq_('./generators.js')(Promise, apiRejection, INTERNAL, tryConvertToPromise);
              _dereq_('./nodeify.js')(Promise);
              _dereq_('./call_get.js')(Promise);
              _dereq_('./props.js')(Promise, PromiseArray, tryConvertToPromise, apiRejection);
              _dereq_('./race.js')(Promise, INTERNAL, tryConvertToPromise, apiRejection);
              _dereq_('./reduce.js')(Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL);
              _dereq_('./settle.js')(Promise, PromiseArray);
              _dereq_('./some.js')(Promise, PromiseArray, apiRejection);
              _dereq_('./promisify.js')(Promise, INTERNAL);
              _dereq_('./any.js')(Promise);
              _dereq_('./each.js')(Promise, INTERNAL);
              _dereq_('./timers.js')(Promise, INTERNAL);
              _dereq_('./filter.js')(Promise, INTERNAL);
              util.toFastProperties(Promise);
              util.toFastProperties(Promise.prototype);
              function fillTypes(value) {
                var p = new Promise(INTERNAL);
                p._fulfillmentHandler0 = value;
                p._rejectionHandler0 = value;
                p._progressHandler0 = value;
                p._promise0 = value;
                p._receiver0 = value;
                p._settledValue = value
              }
              // Complete slack tracking, opt out of field-type tracking and           
              // stabilize map                                                         
              fillTypes({ a: 1 });
              fillTypes({ b: 2 });
              fillTypes({ c: 3 });
              fillTypes(1);
              fillTypes(function () {
              });
              fillTypes(undefined);
              fillTypes(false);
              fillTypes(new Promise(INTERNAL));
              CapturedTrace.setBounds(async.firstLineError, util.lastLineError);
              return Promise
            }
          },
          {
            './any.js': 1,
            './async.js': 2,
            './bind.js': 3,
            './call_get.js': 5,
            './cancel.js': 6,
            './captured_trace.js': 7,
            './catch_filter.js': 8,
            './context.js': 9,
            './debuggability.js': 10,
            './direct_resolve.js': 11,
            './each.js': 12,
            './errors.js': 13,
            './filter.js': 15,
            './finally.js': 16,
            './generators.js': 17,
            './join.js': 18,
            './map.js': 19,
            './method.js': 20,
            './nodeify.js': 21,
            './progress.js': 22,
            './promise_array.js': 24,
            './promise_resolver.js': 25,
            './promisify.js': 26,
            './props.js': 27,
            './race.js': 29,
            './reduce.js': 30,
            './settle.js': 32,
            './some.js': 33,
            './synchronous_inspection.js': 34,
            './thenables.js': 35,
            './timers.js': 36,
            './using.js': 37,
            './util.js': 38
          }
        ],
        24: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var isArray = util.isArray;
              function toResolutionValue(val) {
                switch (val) {
                case -2:
                  return [];
                case -3:
                  return {}
                }
              }
              function PromiseArray(values) {
                var promise = this._promise = new Promise(INTERNAL);
                var parent;
                if (values instanceof Promise) {
                  parent = values;
                  promise._propagateFrom(parent, 1 | 4)
                }
                this._values = values;
                this._length = 0;
                this._totalResolved = 0;
                this._init(undefined, -2)
              }
              PromiseArray.prototype.length = function () {
                return this._length
              };
              PromiseArray.prototype.promise = function () {
                return this._promise
              };
              PromiseArray.prototype._init = function init(_, resolveValueIfEmpty) {
                var values = tryConvertToPromise(this._values, this._promise);
                if (values instanceof Promise) {
                  values = values._target();
                  this._values = values;
                  if (values._isFulfilled()) {
                    values = values._value();
                    if (!isArray(values)) {
                      var err = new Promise.TypeError('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n');
                      this.__hardReject__(err);
                      return
                    }
                  } else if (values._isPending()) {
                    values._then(init, this._reject, undefined, this, resolveValueIfEmpty);
                    return
                  } else {
                    this._reject(values._reason());
                    return
                  }
                } else if (!isArray(values)) {
                  this._promise._reject(apiRejection('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n')._reason());
                  return
                }
                if (values.length === 0) {
                  if (resolveValueIfEmpty === -5) {
                    this._resolveEmptyArray()
                  } else {
                    this._resolve(toResolutionValue(resolveValueIfEmpty))
                  }
                  return
                }
                var len = this.getActualLength(values.length);
                this._length = len;
                this._values = this.shouldCopyValues() ? new Array(len) : this._values;
                var promise = this._promise;
                for (var i = 0; i < len; ++i) {
                  var isResolved = this._isResolved();
                  var maybePromise = tryConvertToPromise(values[i], promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (isResolved) {
                      maybePromise._ignoreRejections()
                    } else if (maybePromise._isPending()) {
                      maybePromise._proxyPromiseArray(this, i)
                    } else if (maybePromise._isFulfilled()) {
                      this._promiseFulfilled(maybePromise._value(), i)
                    } else {
                      this._promiseRejected(maybePromise._reason(), i)
                    }
                  } else if (!isResolved) {
                    this._promiseFulfilled(maybePromise, i)
                  }
                }
              };
              PromiseArray.prototype._isResolved = function () {
                return this._values === null
              };
              PromiseArray.prototype._resolve = function (value) {
                this._values = null;
                this._promise._fulfill(value)
              };
              PromiseArray.prototype.__hardReject__ = PromiseArray.prototype._reject = function (reason) {
                this._values = null;
                this._promise._rejectCallback(reason, false, true)
              };
              PromiseArray.prototype._promiseProgressed = function (progressValue, index) {
                this._promise._progress({
                  index: index,
                  value: progressValue
                })
              };
              PromiseArray.prototype._promiseFulfilled = function (value, index) {
                this._values[index] = value;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  this._resolve(this._values)
                }
              };
              PromiseArray.prototype._promiseRejected = function (reason, index) {
                this._totalResolved++;
                this._reject(reason)
              };
              PromiseArray.prototype.shouldCopyValues = function () {
                return true
              };
              PromiseArray.prototype.getActualLength = function (len) {
                return len
              };
              return PromiseArray
            }
          },
          { './util.js': 38 }
        ],
        25: [
          function (_dereq_, module, exports) {
            'use strict';
            var util = _dereq_('./util.js');
            var maybeWrapAsError = util.maybeWrapAsError;
            var errors = _dereq_('./errors.js');
            var TimeoutError = errors.TimeoutError;
            var OperationalError = errors.OperationalError;
            var haveGetters = util.haveGetters;
            var es5 = _dereq_('./es5.js');
            function isUntypedError(obj) {
              return obj instanceof Error && es5.getPrototypeOf(obj) === Error.prototype
            }
            var rErrorKey = /^(?:name|message|stack|cause)$/;
            function wrapAsOperationalError(obj) {
              var ret;
              if (isUntypedError(obj)) {
                ret = new OperationalError(obj);
                ret.name = obj.name;
                ret.message = obj.message;
                ret.stack = obj.stack;
                var keys = es5.keys(obj);
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  if (!rErrorKey.test(key)) {
                    ret[key] = obj[key]
                  }
                }
                return ret
              }
              util.markAsOriginatingFromRejection(obj);
              return obj
            }
            function nodebackForPromise(promise) {
              return function (err, value) {
                if (promise === null)
                  return;
                if (err) {
                  var wrapped = wrapAsOperationalError(maybeWrapAsError(err));
                  promise._attachExtraTrace(wrapped);
                  promise._reject(wrapped)
                } else if (arguments.length > 2) {
                  var $_len = arguments.length;
                  var args = new Array($_len - 1);
                  for (var $_i = 1; $_i < $_len; ++$_i) {
                    args[$_i - 1] = arguments[$_i]
                  }
                  promise._fulfill(args)
                } else {
                  promise._fulfill(value)
                }
                promise = null
              }
            }
            var PromiseResolver;
            if (!haveGetters) {
              PromiseResolver = function (promise) {
                this.promise = promise;
                this.asCallback = nodebackForPromise(promise);
                this.callback = this.asCallback
              }
            } else {
              PromiseResolver = function (promise) {
                this.promise = promise
              }
            }
            if (haveGetters) {
              var prop = {
                get: function () {
                  return nodebackForPromise(this.promise)
                }
              };
              es5.defineProperty(PromiseResolver.prototype, 'asCallback', prop);
              es5.defineProperty(PromiseResolver.prototype, 'callback', prop)
            }
            PromiseResolver._nodebackForPromise = nodebackForPromise;
            PromiseResolver.prototype.toString = function () {
              return '[object PromiseResolver]'
            };
            PromiseResolver.prototype.resolve = PromiseResolver.prototype.fulfill = function (value) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._resolveCallback(value)
            };
            PromiseResolver.prototype.reject = function (reason) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._rejectCallback(reason)
            };
            PromiseResolver.prototype.progress = function (value) {
              if (!(this instanceof PromiseResolver)) {
                throw new TypeError('Illegal invocation, resolver resolve/reject must be called within a resolver context. Consider using the promise constructor instead.\n\n    See http://goo.gl/sdkXL9\n')
              }
              this.promise._progress(value)
            };
            PromiseResolver.prototype.cancel = function (err) {
              this.promise.cancel(err)
            };
            PromiseResolver.prototype.timeout = function () {
              this.reject(new TimeoutError('timeout'))
            };
            PromiseResolver.prototype.isResolved = function () {
              return this.promise.isResolved()
            };
            PromiseResolver.prototype.toJSON = function () {
              return this.promise.toJSON()
            };
            module.exports = PromiseResolver
          },
          {
            './errors.js': 13,
            './es5.js': 14,
            './util.js': 38
          }
        ],
        26: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var THIS = {};
              var util = _dereq_('./util.js');
              var nodebackForPromise = _dereq_('./promise_resolver.js')._nodebackForPromise;
              var withAppended = util.withAppended;
              var maybeWrapAsError = util.maybeWrapAsError;
              var canEvaluate = util.canEvaluate;
              var TypeError = _dereq_('./errors').TypeError;
              var defaultSuffix = 'Async';
              var defaultPromisified = { __isPromisified__: true };
              var noCopyProps = [
                'arity',
                'length',
                'name',
                'arguments',
                'caller',
                'callee',
                'prototype',
                '__isPromisified__'
              ];
              var noCopyPropsPattern = new RegExp('^(?:' + noCopyProps.join('|') + ')$');
              var defaultFilter = function (name) {
                return util.isIdentifier(name) && name.charAt(0) !== '_' && name !== 'constructor'
              };
              function propsFilter(key) {
                return !noCopyPropsPattern.test(key)
              }
              function isPromisified(fn) {
                try {
                  return fn.__isPromisified__ === true
                } catch (e) {
                  return false
                }
              }
              function hasPromisified(obj, key, suffix) {
                var val = util.getDataPropertyOrDefault(obj, key + suffix, defaultPromisified);
                return val ? isPromisified(val) : false
              }
              function checkValid(ret, suffix, suffixRegexp) {
                for (var i = 0; i < ret.length; i += 2) {
                  var key = ret[i];
                  if (suffixRegexp.test(key)) {
                    var keyWithoutAsyncSuffix = key.replace(suffixRegexp, '');
                    for (var j = 0; j < ret.length; j += 2) {
                      if (ret[j] === keyWithoutAsyncSuffix) {
                        throw new TypeError("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/iWrZbw\n".replace('%s', suffix))
                      }
                    }
                  }
                }
              }
              function promisifiableMethods(obj, suffix, suffixRegexp, filter) {
                var keys = util.inheritedDataKeys(obj);
                var ret = [];
                for (var i = 0; i < keys.length; ++i) {
                  var key = keys[i];
                  var value = obj[key];
                  var passesDefaultFilter = filter === defaultFilter ? true : defaultFilter(key, value, obj);
                  if (typeof value === 'function' && !isPromisified(value) && !hasPromisified(obj, key, suffix) && filter(key, value, obj, passesDefaultFilter)) {
                    ret.push(key, value)
                  }
                }
                checkValid(ret, suffix, suffixRegexp);
                return ret
              }
              var escapeIdentRegex = function (str) {
                return str.replace(/([$])/, '\\$')
              };
              var makeNodePromisifiedEval;
              if (!true) {
                var switchCaseArgumentOrder = function (likelyArgumentCount) {
                  var ret = [likelyArgumentCount];
                  var min = Math.max(0, likelyArgumentCount - 1 - 3);
                  for (var i = likelyArgumentCount - 1; i >= min; --i) {
                    ret.push(i)
                  }
                  for (var i = likelyArgumentCount + 1; i <= 3; ++i) {
                    ret.push(i)
                  }
                  return ret
                };
                var argumentSequence = function (argumentCount) {
                  return util.filledRange(argumentCount, '_arg', '')
                };
                var parameterDeclaration = function (parameterCount) {
                  return util.filledRange(Math.max(parameterCount, 3), '_arg', '')
                };
                var parameterCount = function (fn) {
                  if (typeof fn.length === 'number') {
                    return Math.max(Math.min(fn.length, 1023 + 1), 0)
                  }
                  return 0
                };
                makeNodePromisifiedEval = function (callback, receiver, originalName, fn) {
                  var newParameterCount = Math.max(0, parameterCount(fn) - 1);
                  var argumentOrder = switchCaseArgumentOrder(newParameterCount);
                  var shouldProxyThis = typeof callback === 'string' || receiver === THIS;
                  function generateCallForArgumentCount(count) {
                    var args = argumentSequence(count).join(', ');
                    var comma = count > 0 ? ', ' : '';
                    var ret;
                    if (shouldProxyThis) {
                      ret = 'ret = callback.call(this, {{args}}, nodeback); break;\n'
                    } else {
                      ret = receiver === undefined ? 'ret = callback({{args}}, nodeback); break;\n' : 'ret = callback.call(receiver, {{args}}, nodeback); break;\n'
                    }
                    return ret.replace('{{args}}', args).replace(', ', comma)
                  }
                  function generateArgumentSwitchCase() {
                    var ret = '';
                    for (var i = 0; i < argumentOrder.length; ++i) {
                      ret += 'case ' + argumentOrder[i] + ':' + generateCallForArgumentCount(argumentOrder[i])
                    }
                    ret += '                                                             \n        default:                                                             \n            var args = new Array(len + 1);                                   \n            var i = 0;                                                       \n            for (var i = 0; i < len; ++i) {                                  \n               args[i] = arguments[i];                                       \n            }                                                                \n            args[i] = nodeback;                                              \n            [CodeForCall]                                                    \n            break;                                                           \n        '.replace('[CodeForCall]', shouldProxyThis ? 'ret = callback.apply(this, args);\n' : 'ret = callback.apply(receiver, args);\n');
                    return ret
                  }
                  var getFunctionCode = typeof callback === 'string' ? "this != null ? this['" + callback + "'] : fn" : 'fn';
                  return new Function('Promise', 'fn', 'receiver', 'withAppended', 'maybeWrapAsError', 'nodebackForPromise', 'tryCatch', 'errorObj', 'notEnumerableProp', 'INTERNAL', "'use strict';                            \n        var ret = function (Parameters) {                                    \n            'use strict';                                                    \n            var len = arguments.length;                                      \n            var promise = new Promise(INTERNAL);                             \n            promise._captureStackTrace();                                    \n            var nodeback = nodebackForPromise(promise);                      \n            var ret;                                                         \n            var callback = tryCatch([GetFunctionCode]);                      \n            switch(len) {                                                    \n                [CodeForSwitchCase]                                          \n            }                                                                \n            if (ret === errorObj) {                                          \n                promise._rejectCallback(maybeWrapAsError(ret.e), true, true);\n            }                                                                \n            return promise;                                                  \n        };                                                                   \n        notEnumerableProp(ret, '__isPromisified__', true);                   \n        return ret;                                                          \n        ".replace('Parameters', parameterDeclaration(newParameterCount)).replace('[CodeForSwitchCase]', generateArgumentSwitchCase()).replace('[GetFunctionCode]', getFunctionCode))(Promise, fn, receiver, withAppended, maybeWrapAsError, nodebackForPromise, util.tryCatch, util.errorObj, util.notEnumerableProp, INTERNAL)
                }
              }
              function makeNodePromisifiedClosure(callback, receiver, _, fn) {
                var defaultThis = function () {
                  return this
                }();
                var method = callback;
                if (typeof method === 'string') {
                  callback = fn
                }
                function promisified() {
                  var _receiver = receiver;
                  if (receiver === THIS)
                    _receiver = this;
                  var promise = new Promise(INTERNAL);
                  promise._captureStackTrace();
                  var cb = typeof method === 'string' && this !== defaultThis ? this[method] : callback;
                  var fn = nodebackForPromise(promise);
                  try {
                    cb.apply(_receiver, withAppended(arguments, fn))
                  } catch (e) {
                    promise._rejectCallback(maybeWrapAsError(e), true, true)
                  }
                  return promise
                }
                util.notEnumerableProp(promisified, '__isPromisified__', true);
                return promisified
              }
              var makeNodePromisified = canEvaluate ? makeNodePromisifiedEval : makeNodePromisifiedClosure;
              function promisifyAll(obj, suffix, filter, promisifier) {
                var suffixRegexp = new RegExp(escapeIdentRegex(suffix) + '$');
                var methods = promisifiableMethods(obj, suffix, suffixRegexp, filter);
                for (var i = 0, len = methods.length; i < len; i += 2) {
                  var key = methods[i];
                  var fn = methods[i + 1];
                  var promisifiedKey = key + suffix;
                  obj[promisifiedKey] = promisifier === makeNodePromisified ? makeNodePromisified(key, THIS, key, fn, suffix) : promisifier(fn, function () {
                    return makeNodePromisified(key, THIS, key, fn, suffix)
                  })
                }
                util.toFastProperties(obj);
                return obj
              }
              function promisify(callback, receiver) {
                return makeNodePromisified(callback, receiver, undefined, callback)
              }
              Promise.promisify = function (fn, receiver) {
                if (typeof fn !== 'function') {
                  throw new TypeError('fn must be a function\n\n    See http://goo.gl/916lJJ\n')
                }
                if (isPromisified(fn)) {
                  return fn
                }
                var ret = promisify(fn, arguments.length < 2 ? THIS : receiver);
                util.copyDescriptors(fn, ret, propsFilter);
                return ret
              };
              Promise.promisifyAll = function (target, options) {
                if (typeof target !== 'function' && typeof target !== 'object') {
                  throw new TypeError('the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/9ITlV0\n')
                }
                options = Object(options);
                var suffix = options.suffix;
                if (typeof suffix !== 'string')
                  suffix = defaultSuffix;
                var filter = options.filter;
                if (typeof filter !== 'function')
                  filter = defaultFilter;
                var promisifier = options.promisifier;
                if (typeof promisifier !== 'function')
                  promisifier = makeNodePromisified;
                if (!util.isIdentifier(suffix)) {
                  throw new RangeError('suffix must be a valid identifier\n\n    See http://goo.gl/8FZo5V\n')
                }
                var keys = util.inheritedDataKeys(target);
                for (var i = 0; i < keys.length; ++i) {
                  var value = target[keys[i]];
                  if (keys[i] !== 'constructor' && util.isClass(value)) {
                    promisifyAll(value.prototype, suffix, filter, promisifier);
                    promisifyAll(value, suffix, filter, promisifier)
                  }
                }
                return promisifyAll(target, suffix, filter, promisifier)
              }
            }
          },
          {
            './errors': 13,
            './promise_resolver.js': 25,
            './util.js': 38
          }
        ],
        27: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, tryConvertToPromise, apiRejection) {
              var util = _dereq_('./util.js');
              var isObject = util.isObject;
              var es5 = _dereq_('./es5.js');
              function PropertiesPromiseArray(obj) {
                var keys = es5.keys(obj);
                var len = keys.length;
                var values = new Array(len * 2);
                for (var i = 0; i < len; ++i) {
                  var key = keys[i];
                  values[i] = obj[key];
                  values[i + len] = key
                }
                this.constructor$(values)
              }
              util.inherits(PropertiesPromiseArray, PromiseArray);
              PropertiesPromiseArray.prototype._init = function () {
                this._init$(undefined, -3)
              };
              PropertiesPromiseArray.prototype._promiseFulfilled = function (value, index) {
                this._values[index] = value;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  var val = {};
                  var keyOffset = this.length();
                  for (var i = 0, len = this.length(); i < len; ++i) {
                    val[this._values[i + keyOffset]] = this._values[i]
                  }
                  this._resolve(val)
                }
              };
              PropertiesPromiseArray.prototype._promiseProgressed = function (value, index) {
                this._promise._progress({
                  key: this._values[index + this.length()],
                  value: value
                })
              };
              PropertiesPromiseArray.prototype.shouldCopyValues = function () {
                return false
              };
              PropertiesPromiseArray.prototype.getActualLength = function (len) {
                return len >> 1
              };
              function props(promises) {
                var ret;
                var castValue = tryConvertToPromise(promises);
                if (!isObject(castValue)) {
                  return apiRejection('cannot await properties of a non-object\n\n    See http://goo.gl/OsFKC8\n')
                } else if (castValue instanceof Promise) {
                  ret = castValue._then(Promise.props, undefined, undefined, undefined, undefined)
                } else {
                  ret = new PropertiesPromiseArray(castValue).promise()
                }
                if (castValue instanceof Promise) {
                  ret._propagateFrom(castValue, 4)
                }
                return ret
              }
              Promise.prototype.props = function () {
                return props(this)
              };
              Promise.props = function (promises) {
                return props(promises)
              }
            }
          },
          {
            './es5.js': 14,
            './util.js': 38
          }
        ],
        28: [
          function (_dereq_, module, exports) {
            'use strict';
            function arrayMove(src, srcIndex, dst, dstIndex, len) {
              for (var j = 0; j < len; ++j) {
                dst[j + dstIndex] = src[j + srcIndex];
                src[j + srcIndex] = void 0
              }
            }
            function Queue(capacity) {
              this._capacity = capacity;
              this._length = 0;
              this._front = 0
            }
            Queue.prototype._willBeOverCapacity = function (size) {
              return this._capacity < size
            };
            Queue.prototype._pushOne = function (arg) {
              var length = this.length();
              this._checkCapacity(length + 1);
              var i = this._front + length & this._capacity - 1;
              this[i] = arg;
              this._length = length + 1
            };
            Queue.prototype._unshiftOne = function (value) {
              var capacity = this._capacity;
              this._checkCapacity(this.length() + 1);
              var front = this._front;
              var i = (front - 1 & capacity - 1 ^ capacity) - capacity;
              this[i] = value;
              this._front = i;
              this._length = this.length() + 1
            };
            Queue.prototype.unshift = function (fn, receiver, arg) {
              this._unshiftOne(arg);
              this._unshiftOne(receiver);
              this._unshiftOne(fn)
            };
            Queue.prototype.push = function (fn, receiver, arg) {
              var length = this.length() + 3;
              if (this._willBeOverCapacity(length)) {
                this._pushOne(fn);
                this._pushOne(receiver);
                this._pushOne(arg);
                return
              }
              var j = this._front + length - 3;
              this._checkCapacity(length);
              var wrapMask = this._capacity - 1;
              this[j + 0 & wrapMask] = fn;
              this[j + 1 & wrapMask] = receiver;
              this[j + 2 & wrapMask] = arg;
              this._length = length
            };
            Queue.prototype.shift = function () {
              var front = this._front, ret = this[front];
              this[front] = undefined;
              this._front = front + 1 & this._capacity - 1;
              this._length--;
              return ret
            };
            Queue.prototype.length = function () {
              return this._length
            };
            Queue.prototype._checkCapacity = function (size) {
              if (this._capacity < size) {
                this._resizeTo(this._capacity << 1)
              }
            };
            Queue.prototype._resizeTo = function (capacity) {
              var oldCapacity = this._capacity;
              this._capacity = capacity;
              var front = this._front;
              var length = this._length;
              var moveItemsCount = front + length & oldCapacity - 1;
              arrayMove(this, 0, this, oldCapacity, moveItemsCount)
            };
            module.exports = Queue
          },
          {}
        ],
        29: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL, tryConvertToPromise, apiRejection) {
              var isArray = _dereq_('./util.js').isArray;
              var raceLater = function (promise) {
                return promise.then(function (array) {
                  return race(array, promise)
                })
              };
              function race(promises, parent) {
                var maybePromise = tryConvertToPromise(promises);
                if (maybePromise instanceof Promise) {
                  return raceLater(maybePromise)
                } else if (!isArray(promises)) {
                  return apiRejection('expecting an array, a promise or a thenable\n\n    See http://goo.gl/s8MMhc\n')
                }
                var ret = new Promise(INTERNAL);
                if (parent !== undefined) {
                  ret._propagateFrom(parent, 4 | 1)
                }
                var fulfill = ret._fulfill;
                var reject = ret._reject;
                for (var i = 0, len = promises.length; i < len; ++i) {
                  var val = promises[i];
                  if (val === undefined && !(i in promises)) {
                    continue
                  }
                  Promise.cast(val)._then(fulfill, reject, undefined, ret, null)
                }
                return ret
              }
              Promise.race = function (promises) {
                return race(promises, undefined)
              };
              Promise.prototype.race = function () {
                return race(this, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        30: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection, tryConvertToPromise, INTERNAL) {
              var getDomain = Promise._getDomain;
              var async = _dereq_('./async.js');
              var util = _dereq_('./util.js');
              var tryCatch = util.tryCatch;
              var errorObj = util.errorObj;
              function ReductionPromiseArray(promises, fn, accum, _each) {
                this.constructor$(promises);
                this._promise._captureStackTrace();
                this._preservedValues = _each === INTERNAL ? [] : null;
                this._zerothIsAccum = accum === undefined;
                this._gotAccum = false;
                this._reducingIndex = this._zerothIsAccum ? 1 : 0;
                this._valuesPhase = undefined;
                var maybePromise = tryConvertToPromise(accum, this._promise);
                var rejected = false;
                var isPromise = maybePromise instanceof Promise;
                if (isPromise) {
                  maybePromise = maybePromise._target();
                  if (maybePromise._isPending()) {
                    maybePromise._proxyPromiseArray(this, -1)
                  } else if (maybePromise._isFulfilled()) {
                    accum = maybePromise._value();
                    this._gotAccum = true
                  } else {
                    this._reject(maybePromise._reason());
                    rejected = true
                  }
                }
                if (!(isPromise || this._zerothIsAccum))
                  this._gotAccum = true;
                var domain = getDomain();
                this._callback = domain === null ? fn : domain.bind(fn);
                this._accum = accum;
                if (!rejected)
                  async.invoke(init, this, undefined)
              }
              function init() {
                this._init$(undefined, -5)
              }
              util.inherits(ReductionPromiseArray, PromiseArray);
              ReductionPromiseArray.prototype._init = function () {
              };
              ReductionPromiseArray.prototype._resolveEmptyArray = function () {
                if (this._gotAccum || this._zerothIsAccum) {
                  this._resolve(this._preservedValues !== null ? [] : this._accum)
                }
              };
              ReductionPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var values = this._values;
                values[index] = value;
                var length = this.length();
                var preservedValues = this._preservedValues;
                var isEach = preservedValues !== null;
                var gotAccum = this._gotAccum;
                var valuesPhase = this._valuesPhase;
                var valuesPhaseIndex;
                if (!valuesPhase) {
                  valuesPhase = this._valuesPhase = new Array(length);
                  for (valuesPhaseIndex = 0; valuesPhaseIndex < length; ++valuesPhaseIndex) {
                    valuesPhase[valuesPhaseIndex] = 0
                  }
                }
                valuesPhaseIndex = valuesPhase[index];
                if (index === 0 && this._zerothIsAccum) {
                  this._accum = value;
                  this._gotAccum = gotAccum = true;
                  valuesPhase[index] = valuesPhaseIndex === 0 ? 1 : 2
                } else if (index === -1) {
                  this._accum = value;
                  this._gotAccum = gotAccum = true
                } else {
                  if (valuesPhaseIndex === 0) {
                    valuesPhase[index] = 1
                  } else {
                    valuesPhase[index] = 2;
                    this._accum = value
                  }
                }
                if (!gotAccum)
                  return;
                var callback = this._callback;
                var receiver = this._promise._boundValue();
                var ret;
                for (var i = this._reducingIndex; i < length; ++i) {
                  valuesPhaseIndex = valuesPhase[i];
                  if (valuesPhaseIndex === 2) {
                    this._reducingIndex = i + 1;
                    continue
                  }
                  if (valuesPhaseIndex !== 1)
                    return;
                  value = values[i];
                  this._promise._pushContext();
                  if (isEach) {
                    preservedValues.push(value);
                    ret = tryCatch(callback).call(receiver, value, i, length)
                  } else {
                    ret = tryCatch(callback).call(receiver, this._accum, value, i, length)
                  }
                  this._promise._popContext();
                  if (ret === errorObj)
                    return this._reject(ret.e);
                  var maybePromise = tryConvertToPromise(ret, this._promise);
                  if (maybePromise instanceof Promise) {
                    maybePromise = maybePromise._target();
                    if (maybePromise._isPending()) {
                      valuesPhase[i] = 4;
                      return maybePromise._proxyPromiseArray(this, i)
                    } else if (maybePromise._isFulfilled()) {
                      ret = maybePromise._value()
                    } else {
                      return this._reject(maybePromise._reason())
                    }
                  }
                  this._reducingIndex = i + 1;
                  this._accum = ret
                }
                this._resolve(isEach ? preservedValues : this._accum)
              };
              function reduce(promises, fn, initialValue, _each) {
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                var array = new ReductionPromiseArray(promises, fn, initialValue, _each);
                return array.promise()
              }
              Promise.prototype.reduce = function (fn, initialValue) {
                return reduce(this, fn, initialValue, null)
              };
              Promise.reduce = function (promises, fn, initialValue, _each) {
                return reduce(promises, fn, initialValue, _each)
              }
            }
          },
          {
            './async.js': 2,
            './util.js': 38
          }
        ],
        31: [
          function (_dereq_, module, exports) {
            'use strict';
            var schedule;
            var util = _dereq_('./util');
            var noAsyncScheduler = function () {
              throw new Error('No async scheduler available\n\n    See http://goo.gl/m3OTXk\n')
            };
            if (util.isNode && typeof MutationObserver === 'undefined') {
              var GlobalSetImmediate = global.setImmediate;
              var ProcessNextTick = process.nextTick;
              schedule = util.isRecentNode ? function (fn) {
                GlobalSetImmediate.call(global, fn)
              } : function (fn) {
                ProcessNextTick.call(process, fn)
              }
            } else if (typeof MutationObserver !== 'undefined' && !(typeof window !== 'undefined' && window.navigator && window.navigator.standalone)) {
              schedule = function (fn) {
                var div = document.createElement('div');
                var observer = new MutationObserver(fn);
                observer.observe(div, { attributes: true });
                return function () {
                  div.classList.toggle('foo')
                }
              };
              schedule.isStatic = true
            } else if (typeof setImmediate !== 'undefined') {
              schedule = function (fn) {
                setImmediate(fn)
              }
            } else if (typeof setTimeout !== 'undefined') {
              schedule = function (fn) {
                setTimeout(fn, 0)
              }
            } else {
              schedule = noAsyncScheduler
            }
            module.exports = schedule
          },
          { './util': 38 }
        ],
        32: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray) {
              var PromiseInspection = Promise.PromiseInspection;
              var util = _dereq_('./util.js');
              function SettledPromiseArray(values) {
                this.constructor$(values)
              }
              util.inherits(SettledPromiseArray, PromiseArray);
              SettledPromiseArray.prototype._promiseResolved = function (index, inspection) {
                this._values[index] = inspection;
                var totalResolved = ++this._totalResolved;
                if (totalResolved >= this._length) {
                  this._resolve(this._values)
                }
              };
              SettledPromiseArray.prototype._promiseFulfilled = function (value, index) {
                var ret = new PromiseInspection;
                ret._bitField = 268435456;
                ret._settledValue = value;
                this._promiseResolved(index, ret)
              };
              SettledPromiseArray.prototype._promiseRejected = function (reason, index) {
                var ret = new PromiseInspection;
                ret._bitField = 134217728;
                ret._settledValue = reason;
                this._promiseResolved(index, ret)
              };
              Promise.settle = function (promises) {
                return new SettledPromiseArray(promises).promise()
              };
              Promise.prototype.settle = function () {
                return new SettledPromiseArray(this).promise()
              }
            }
          },
          { './util.js': 38 }
        ],
        33: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, PromiseArray, apiRejection) {
              var util = _dereq_('./util.js');
              var RangeError = _dereq_('./errors.js').RangeError;
              var AggregateError = _dereq_('./errors.js').AggregateError;
              var isArray = util.isArray;
              function SomePromiseArray(values) {
                this.constructor$(values);
                this._howMany = 0;
                this._unwrap = false;
                this._initialized = false
              }
              util.inherits(SomePromiseArray, PromiseArray);
              SomePromiseArray.prototype._init = function () {
                if (!this._initialized) {
                  return
                }
                if (this._howMany === 0) {
                  this._resolve([]);
                  return
                }
                this._init$(undefined, -5);
                var isArrayResolved = isArray(this._values);
                if (!this._isResolved() && isArrayResolved && this._howMany > this._canPossiblyFulfill()) {
                  this._reject(this._getRangeError(this.length()))
                }
              };
              SomePromiseArray.prototype.init = function () {
                this._initialized = true;
                this._init()
              };
              SomePromiseArray.prototype.setUnwrap = function () {
                this._unwrap = true
              };
              SomePromiseArray.prototype.howMany = function () {
                return this._howMany
              };
              SomePromiseArray.prototype.setHowMany = function (count) {
                this._howMany = count
              };
              SomePromiseArray.prototype._promiseFulfilled = function (value) {
                this._addFulfilled(value);
                if (this._fulfilled() === this.howMany()) {
                  this._values.length = this.howMany();
                  if (this.howMany() === 1 && this._unwrap) {
                    this._resolve(this._values[0])
                  } else {
                    this._resolve(this._values)
                  }
                }
              };
              SomePromiseArray.prototype._promiseRejected = function (reason) {
                this._addRejected(reason);
                if (this.howMany() > this._canPossiblyFulfill()) {
                  var e = new AggregateError;
                  for (var i = this.length(); i < this._values.length; ++i) {
                    e.push(this._values[i])
                  }
                  this._reject(e)
                }
              };
              SomePromiseArray.prototype._fulfilled = function () {
                return this._totalResolved
              };
              SomePromiseArray.prototype._rejected = function () {
                return this._values.length - this.length()
              };
              SomePromiseArray.prototype._addRejected = function (reason) {
                this._values.push(reason)
              };
              SomePromiseArray.prototype._addFulfilled = function (value) {
                this._values[this._totalResolved++] = value
              };
              SomePromiseArray.prototype._canPossiblyFulfill = function () {
                return this.length() - this._rejected()
              };
              SomePromiseArray.prototype._getRangeError = function (count) {
                var message = 'Input array must contain at least ' + this._howMany + ' items but contains only ' + count + ' items';
                return new RangeError(message)
              };
              SomePromiseArray.prototype._resolveEmptyArray = function () {
                this._reject(this._getRangeError(0))
              };
              function some(promises, howMany) {
                if ((howMany | 0) !== howMany || howMany < 0) {
                  return apiRejection('expecting a positive integer\n\n    See http://goo.gl/1wAmHx\n')
                }
                var ret = new SomePromiseArray(promises);
                var promise = ret.promise();
                ret.setHowMany(howMany);
                ret.init();
                return promise
              }
              Promise.some = function (promises, howMany) {
                return some(promises, howMany)
              };
              Promise.prototype.some = function (howMany) {
                return some(this, howMany)
              };
              Promise._SomePromiseArray = SomePromiseArray
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        34: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise) {
              function PromiseInspection(promise) {
                if (promise !== undefined) {
                  promise = promise._target();
                  this._bitField = promise._bitField;
                  this._settledValue = promise._settledValue
                } else {
                  this._bitField = 0;
                  this._settledValue = undefined
                }
              }
              PromiseInspection.prototype.value = function () {
                if (!this.isFulfilled()) {
                  throw new TypeError('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n')
                }
                return this._settledValue
              };
              PromiseInspection.prototype.error = PromiseInspection.prototype.reason = function () {
                if (!this.isRejected()) {
                  throw new TypeError('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n')
                }
                return this._settledValue
              };
              PromiseInspection.prototype.isFulfilled = Promise.prototype._isFulfilled = function () {
                return (this._bitField & 268435456) > 0
              };
              PromiseInspection.prototype.isRejected = Promise.prototype._isRejected = function () {
                return (this._bitField & 134217728) > 0
              };
              PromiseInspection.prototype.isPending = Promise.prototype._isPending = function () {
                return (this._bitField & 402653184) === 0
              };
              PromiseInspection.prototype.isResolved = Promise.prototype._isResolved = function () {
                return (this._bitField & 402653184) > 0
              };
              Promise.prototype.isPending = function () {
                return this._target()._isPending()
              };
              Promise.prototype.isRejected = function () {
                return this._target()._isRejected()
              };
              Promise.prototype.isFulfilled = function () {
                return this._target()._isFulfilled()
              };
              Promise.prototype.isResolved = function () {
                return this._target()._isResolved()
              };
              Promise.prototype._value = function () {
                return this._settledValue
              };
              Promise.prototype._reason = function () {
                this._unsetRejectionIsUnhandled();
                return this._settledValue
              };
              Promise.prototype.value = function () {
                var target = this._target();
                if (!target.isFulfilled()) {
                  throw new TypeError('cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/hc1DLj\n')
                }
                return target._settledValue
              };
              Promise.prototype.reason = function () {
                var target = this._target();
                if (!target.isRejected()) {
                  throw new TypeError('cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/hPuiwB\n')
                }
                target._unsetRejectionIsUnhandled();
                return target._settledValue
              };
              Promise.PromiseInspection = PromiseInspection
            }
          },
          {}
        ],
        35: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var util = _dereq_('./util.js');
              var errorObj = util.errorObj;
              var isObject = util.isObject;
              function tryConvertToPromise(obj, context) {
                if (isObject(obj)) {
                  if (obj instanceof Promise) {
                    return obj
                  } else if (isAnyBluebirdPromise(obj)) {
                    var ret = new Promise(INTERNAL);
                    obj._then(ret._fulfillUnchecked, ret._rejectUncheckedCheckError, ret._progressUnchecked, ret, null);
                    return ret
                  }
                  var then = util.tryCatch(getThen)(obj);
                  if (then === errorObj) {
                    if (context)
                      context._pushContext();
                    var ret = Promise.reject(then.e);
                    if (context)
                      context._popContext();
                    return ret
                  } else if (typeof then === 'function') {
                    return doThenable(obj, then, context)
                  }
                }
                return obj
              }
              function getThen(obj) {
                return obj.then
              }
              var hasProp = {}.hasOwnProperty;
              function isAnyBluebirdPromise(obj) {
                return hasProp.call(obj, '_promise0')
              }
              function doThenable(x, then, context) {
                var promise = new Promise(INTERNAL);
                var ret = promise;
                if (context)
                  context._pushContext();
                promise._captureStackTrace();
                if (context)
                  context._popContext();
                var synchronous = true;
                var result = util.tryCatch(then).call(x, resolveFromThenable, rejectFromThenable, progressFromThenable);
                synchronous = false;
                if (promise && result === errorObj) {
                  promise._rejectCallback(result.e, true, true);
                  promise = null
                }
                function resolveFromThenable(value) {
                  if (!promise)
                    return;
                  promise._resolveCallback(value);
                  promise = null
                }
                function rejectFromThenable(reason) {
                  if (!promise)
                    return;
                  promise._rejectCallback(reason, synchronous, true);
                  promise = null
                }
                function progressFromThenable(value) {
                  if (!promise)
                    return;
                  if (typeof promise._progress === 'function') {
                    promise._progress(value)
                  }
                }
                return ret
              }
              return tryConvertToPromise
            }
          },
          { './util.js': 38 }
        ],
        36: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, INTERNAL) {
              var util = _dereq_('./util.js');
              var TimeoutError = Promise.TimeoutError;
              var afterTimeout = function (promise, message) {
                if (!promise.isPending())
                  return;
                if (typeof message !== 'string') {
                  message = 'operation timed out'
                }
                var err = new TimeoutError(message);
                util.markAsOriginatingFromRejection(err);
                promise._attachExtraTrace(err);
                promise._cancel(err)
              };
              var afterValue = function (value) {
                return delay(+this).thenReturn(value)
              };
              var delay = Promise.delay = function (value, ms) {
                if (ms === undefined) {
                  ms = value;
                  value = undefined;
                  var ret = new Promise(INTERNAL);
                  setTimeout(function () {
                    ret._fulfill()
                  }, ms);
                  return ret
                }
                ms = +ms;
                return Promise.resolve(value)._then(afterValue, null, null, ms, undefined)
              };
              Promise.prototype.delay = function (ms) {
                return delay(this, ms)
              };
              function successClear(value) {
                var handle = this;
                if (handle instanceof Number)
                  handle = +handle;
                clearTimeout(handle);
                return value
              }
              function failureClear(reason) {
                var handle = this;
                if (handle instanceof Number)
                  handle = +handle;
                clearTimeout(handle);
                throw reason
              }
              Promise.prototype.timeout = function (ms, message) {
                ms = +ms;
                var ret = this.then().cancellable();
                ret._cancellationParent = this;
                var handle = setTimeout(function timeoutTimeout() {
                  afterTimeout(ret, message)
                }, ms);
                return ret._then(successClear, failureClear, undefined, handle, undefined)
              }
            }
          },
          { './util.js': 38 }
        ],
        37: [
          function (_dereq_, module, exports) {
            'use strict';
            module.exports = function (Promise, apiRejection, tryConvertToPromise, createContext) {
              var TypeError = _dereq_('./errors.js').TypeError;
              var inherits = _dereq_('./util.js').inherits;
              var PromiseInspection = Promise.PromiseInspection;
              function inspectionMapper(inspections) {
                var len = inspections.length;
                for (var i = 0; i < len; ++i) {
                  var inspection = inspections[i];
                  if (inspection.isRejected()) {
                    return Promise.reject(inspection.error())
                  }
                  inspections[i] = inspection._settledValue
                }
                return inspections
              }
              function thrower(e) {
                setTimeout(function () {
                  throw e
                }, 0)
              }
              function castPreservingDisposable(thenable) {
                var maybePromise = tryConvertToPromise(thenable);
                if (maybePromise !== thenable && typeof thenable._isDisposable === 'function' && typeof thenable._getDisposer === 'function' && thenable._isDisposable()) {
                  maybePromise._setDisposable(thenable._getDisposer())
                }
                return maybePromise
              }
              function dispose(resources, inspection) {
                var i = 0;
                var len = resources.length;
                var ret = Promise.defer();
                function iterator() {
                  if (i >= len)
                    return ret.resolve();
                  var maybePromise = castPreservingDisposable(resources[i++]);
                  if (maybePromise instanceof Promise && maybePromise._isDisposable()) {
                    try {
                      maybePromise = tryConvertToPromise(maybePromise._getDisposer().tryDispose(inspection), resources.promise)
                    } catch (e) {
                      return thrower(e)
                    }
                    if (maybePromise instanceof Promise) {
                      return maybePromise._then(iterator, thrower, null, null, null)
                    }
                  }
                  iterator()
                }
                iterator();
                return ret.promise
              }
              function disposerSuccess(value) {
                var inspection = new PromiseInspection;
                inspection._settledValue = value;
                inspection._bitField = 268435456;
                return dispose(this, inspection).thenReturn(value)
              }
              function disposerFail(reason) {
                var inspection = new PromiseInspection;
                inspection._settledValue = reason;
                inspection._bitField = 134217728;
                return dispose(this, inspection).thenThrow(reason)
              }
              function Disposer(data, promise, context) {
                this._data = data;
                this._promise = promise;
                this._context = context
              }
              Disposer.prototype.data = function () {
                return this._data
              };
              Disposer.prototype.promise = function () {
                return this._promise
              };
              Disposer.prototype.resource = function () {
                if (this.promise().isFulfilled()) {
                  return this.promise().value()
                }
                return null
              };
              Disposer.prototype.tryDispose = function (inspection) {
                var resource = this.resource();
                var context = this._context;
                if (context !== undefined)
                  context._pushContext();
                var ret = resource !== null ? this.doDispose(resource, inspection) : null;
                if (context !== undefined)
                  context._popContext();
                this._promise._unsetDisposable();
                this._data = null;
                return ret
              };
              Disposer.isDisposer = function (d) {
                return d != null && typeof d.resource === 'function' && typeof d.tryDispose === 'function'
              };
              function FunctionDisposer(fn, promise, context) {
                this.constructor$(fn, promise, context)
              }
              inherits(FunctionDisposer, Disposer);
              FunctionDisposer.prototype.doDispose = function (resource, inspection) {
                var fn = this.data();
                return fn.call(resource, resource, inspection)
              };
              function maybeUnwrapDisposer(value) {
                if (Disposer.isDisposer(value)) {
                  this.resources[this.index]._setDisposable(value);
                  return value.promise()
                }
                return value
              }
              Promise.using = function () {
                var len = arguments.length;
                if (len < 2)
                  return apiRejection('you must pass at least 2 arguments to Promise.using');
                var fn = arguments[len - 1];
                if (typeof fn !== 'function')
                  return apiRejection('fn must be a function\n\n    See http://goo.gl/916lJJ\n');
                len--;
                var resources = new Array(len);
                for (var i = 0; i < len; ++i) {
                  var resource = arguments[i];
                  if (Disposer.isDisposer(resource)) {
                    var disposer = resource;
                    resource = resource.promise();
                    resource._setDisposable(disposer)
                  } else {
                    var maybePromise = tryConvertToPromise(resource);
                    if (maybePromise instanceof Promise) {
                      resource = maybePromise._then(maybeUnwrapDisposer, null, null, {
                        resources: resources,
                        index: i
                      }, undefined)
                    }
                  }
                  resources[i] = resource
                }
                var promise = Promise.settle(resources).then(inspectionMapper).then(function (vals) {
                  promise._pushContext();
                  var ret;
                  try {
                    ret = fn.apply(undefined, vals)
                  } finally {
                    promise._popContext()
                  }
                  return ret
                })._then(disposerSuccess, disposerFail, undefined, resources, undefined);
                resources.promise = promise;
                return promise
              };
              Promise.prototype._setDisposable = function (disposer) {
                this._bitField = this._bitField | 262144;
                this._disposer = disposer
              };
              Promise.prototype._isDisposable = function () {
                return (this._bitField & 262144) > 0
              };
              Promise.prototype._getDisposer = function () {
                return this._disposer
              };
              Promise.prototype._unsetDisposable = function () {
                this._bitField = this._bitField & ~262144;
                this._disposer = undefined
              };
              Promise.prototype.disposer = function (fn) {
                if (typeof fn === 'function') {
                  return new FunctionDisposer(fn, this, createContext())
                }
                throw new TypeError
              }
            }
          },
          {
            './errors.js': 13,
            './util.js': 38
          }
        ],
        38: [
          function (_dereq_, module, exports) {
            'use strict';
            var es5 = _dereq_('./es5.js');
            var canEvaluate = typeof navigator == 'undefined';
            var haveGetters = function () {
              try {
                var o = {};
                es5.defineProperty(o, 'f', {
                  get: function () {
                    return 3
                  }
                });
                return o.f === 3
              } catch (e) {
                return false
              }
            }();
            var errorObj = { e: {} };
            var tryCatchTarget;
            function tryCatcher() {
              try {
                var target = tryCatchTarget;
                tryCatchTarget = null;
                return target.apply(this, arguments)
              } catch (e) {
                errorObj.e = e;
                return errorObj
              }
            }
            function tryCatch(fn) {
              tryCatchTarget = fn;
              return tryCatcher
            }
            var inherits = function (Child, Parent) {
              var hasProp = {}.hasOwnProperty;
              function T() {
                this.constructor = Child;
                this.constructor$ = Parent;
                for (var propertyName in Parent.prototype) {
                  if (hasProp.call(Parent.prototype, propertyName) && propertyName.charAt(propertyName.length - 1) !== '$') {
                    this[propertyName + '$'] = Parent.prototype[propertyName]
                  }
                }
              }
              T.prototype = Parent.prototype;
              Child.prototype = new T;
              return Child.prototype
            };
            function isPrimitive(val) {
              return val == null || val === true || val === false || typeof val === 'string' || typeof val === 'number'
            }
            function isObject(value) {
              return !isPrimitive(value)
            }
            function maybeWrapAsError(maybeError) {
              if (!isPrimitive(maybeError))
                return maybeError;
              return new Error(safeToString(maybeError))
            }
            function withAppended(target, appendee) {
              var len = target.length;
              var ret = new Array(len + 1);
              var i;
              for (i = 0; i < len; ++i) {
                ret[i] = target[i]
              }
              ret[i] = appendee;
              return ret
            }
            function getDataPropertyOrDefault(obj, key, defaultValue) {
              if (es5.isES5) {
                var desc = Object.getOwnPropertyDescriptor(obj, key);
                if (desc != null) {
                  return desc.get == null && desc.set == null ? desc.value : defaultValue
                }
              } else {
                return {}.hasOwnProperty.call(obj, key) ? obj[key] : undefined
              }
            }
            function notEnumerableProp(obj, name, value) {
              if (isPrimitive(obj))
                return obj;
              var descriptor = {
                value: value,
                configurable: true,
                enumerable: false,
                writable: true
              };
              es5.defineProperty(obj, name, descriptor);
              return obj
            }
            function thrower(r) {
              throw r
            }
            var inheritedDataKeys = function () {
              var excludedPrototypes = [
                Array.prototype,
                Object.prototype,
                Function.prototype
              ];
              var isExcludedProto = function (val) {
                for (var i = 0; i < excludedPrototypes.length; ++i) {
                  if (excludedPrototypes[i] === val) {
                    return true
                  }
                }
                return false
              };
              if (es5.isES5) {
                var getKeys = Object.getOwnPropertyNames;
                return function (obj) {
                  var ret = [];
                  var visitedKeys = Object.create(null);
                  while (obj != null && !isExcludedProto(obj)) {
                    var keys;
                    try {
                      keys = getKeys(obj)
                    } catch (e) {
                      return ret
                    }
                    for (var i = 0; i < keys.length; ++i) {
                      var key = keys[i];
                      if (visitedKeys[key])
                        continue;
                      visitedKeys[key] = true;
                      var desc = Object.getOwnPropertyDescriptor(obj, key);
                      if (desc != null && desc.get == null && desc.set == null) {
                        ret.push(key)
                      }
                    }
                    obj = es5.getPrototypeOf(obj)
                  }
                  return ret
                }
              } else {
                var hasProp = {}.hasOwnProperty;
                return function (obj) {
                  if (isExcludedProto(obj))
                    return [];
                  var ret = [];
                  /*jshint forin:false */
                  enumeration:
                    for (var key in obj) {
                      if (hasProp.call(obj, key)) {
                        ret.push(key)
                      } else {
                        for (var i = 0; i < excludedPrototypes.length; ++i) {
                          if (hasProp.call(excludedPrototypes[i], key)) {
                            continue enumeration
                          }
                        }
                        ret.push(key)
                      }
                    }
                  return ret
                }
              }
            }();
            var thisAssignmentPattern = /this\s*\.\s*\S+\s*=/;
            function isClass(fn) {
              try {
                if (typeof fn === 'function') {
                  var keys = es5.names(fn.prototype);
                  var hasMethods = es5.isES5 && keys.length > 1;
                  var hasMethodsOtherThanConstructor = keys.length > 0 && !(keys.length === 1 && keys[0] === 'constructor');
                  var hasThisAssignmentAndStaticMethods = thisAssignmentPattern.test(fn + '') && es5.names(fn).length > 0;
                  if (hasMethods || hasMethodsOtherThanConstructor || hasThisAssignmentAndStaticMethods) {
                    return true
                  }
                }
                return false
              } catch (e) {
                return false
              }
            }
            function toFastProperties(obj) {
              /*jshint -W027,-W055,-W031*/
              function f() {
              }
              f.prototype = obj;
              var l = 8;
              while (l--)
                new f;
              return obj;
              eval(obj)
            }
            var rident = /^[a-z$_][a-z$_0-9]*$/i;
            function isIdentifier(str) {
              return rident.test(str)
            }
            function filledRange(count, prefix, suffix) {
              var ret = new Array(count);
              for (var i = 0; i < count; ++i) {
                ret[i] = prefix + i + suffix
              }
              return ret
            }
            function safeToString(obj) {
              try {
                return obj + ''
              } catch (e) {
                return '[no string representation]'
              }
            }
            function markAsOriginatingFromRejection(e) {
              try {
                notEnumerableProp(e, 'isOperational', true)
              } catch (ignore) {
              }
            }
            function originatesFromRejection(e) {
              if (e == null)
                return false;
              return e instanceof Error['__BluebirdErrorTypes__'].OperationalError || e['isOperational'] === true
            }
            function canAttachTrace(obj) {
              return obj instanceof Error && es5.propertyIsWritable(obj, 'stack')
            }
            var ensureErrorObject = function () {
              if (!('stack' in new Error)) {
                return function (value) {
                  if (canAttachTrace(value))
                    return value;
                  try {
                    throw new Error(safeToString(value))
                  } catch (err) {
                    return err
                  }
                }
              } else {
                return function (value) {
                  if (canAttachTrace(value))
                    return value;
                  return new Error(safeToString(value))
                }
              }
            }();
            function classString(obj) {
              return {}.toString.call(obj)
            }
            function copyDescriptors(from, to, filter) {
              var keys = es5.names(from);
              for (var i = 0; i < keys.length; ++i) {
                var key = keys[i];
                if (filter(key)) {
                  try {
                    es5.defineProperty(to, key, es5.getDescriptor(from, key))
                  } catch (ignore) {
                  }
                }
              }
            }
            var ret = {
              isClass: isClass,
              isIdentifier: isIdentifier,
              inheritedDataKeys: inheritedDataKeys,
              getDataPropertyOrDefault: getDataPropertyOrDefault,
              thrower: thrower,
              isArray: es5.isArray,
              haveGetters: haveGetters,
              notEnumerableProp: notEnumerableProp,
              isPrimitive: isPrimitive,
              isObject: isObject,
              canEvaluate: canEvaluate,
              errorObj: errorObj,
              tryCatch: tryCatch,
              inherits: inherits,
              withAppended: withAppended,
              maybeWrapAsError: maybeWrapAsError,
              toFastProperties: toFastProperties,
              filledRange: filledRange,
              toString: safeToString,
              canAttachTrace: canAttachTrace,
              ensureErrorObject: ensureErrorObject,
              originatesFromRejection: originatesFromRejection,
              markAsOriginatingFromRejection: markAsOriginatingFromRejection,
              classString: classString,
              copyDescriptors: copyDescriptors,
              hasDevTools: typeof chrome !== 'undefined' && chrome && typeof chrome.loadTimes === 'function',
              isNode: typeof process !== 'undefined' && classString(process).toLowerCase() === '[object process]'
            };
            ret.isRecentNode = ret.isNode && function () {
              var version = process.versions.node.split('.').map(Number);
              return version[0] === 0 && version[1] > 10 || version[0] > 0
            }();
            if (ret.isNode)
              ret.toFastProperties(process);
            try {
              throw new Error
            } catch (e) {
              ret.lastLineError = e
            }
            module.exports = ret
          },
          { './es5.js': 14 }
        ]
      }, {}, [4])(4)
    });
    ;
    if (typeof window !== 'undefined' && window !== null) {
      window.P = window.Promise
    } else if (typeof self !== 'undefined' && self !== null) {
      self.P = self.Promise
    }
  });
  // source: node_modules/crowdstart.js/node_modules/xhr-promise/node_modules/extend/index.js
  require.define('crowdstart/node_modules/xhr-promise/node_modules/extend/index.js', function (module, exports, __dirname, __filename) {
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var undefined;
    var isArray = function isArray(arr) {
      if (typeof Array.isArray === 'function') {
        return Array.isArray(arr)
      }
      return toStr.call(arr) === '[object Array]'
    };
    var isPlainObject = function isPlainObject(obj) {
      'use strict';
      if (!obj || toStr.call(obj) !== '[object Object]') {
        return false
      }
      var has_own_constructor = hasOwn.call(obj, 'constructor');
      var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
      // Not own constructor property must be Object
      if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
        return false
      }
      // Own properties are enumerated firstly, so to speed up,
      // if last one is own, then all properties are own.
      var key;
      for (key in obj) {
      }
      return key === undefined || hasOwn.call(obj, key)
    };
    module.exports = function extend() {
      'use strict';
      var options, name, src, copy, copyIsArray, clone, target = arguments[0], i = 1, length = arguments.length, deep = false;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      } else if (typeof target !== 'object' && typeof target !== 'function' || target == null) {
        target = {}
      }
      for (; i < length; ++i) {
        options = arguments[i];
        // Only deal with non-null/undefined values
        if (options != null) {
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && isArray(src) ? src : []
              } else {
                clone = src && isPlainObject(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (copy !== undefined) {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    }
  });
  // source: node_modules/crowdstart.js/node_modules/xhr-promise/node_modules/parse-headers/parse-headers.js
  require.define('crowdstart/node_modules/xhr-promise/node_modules/parse-headers/parse-headers.js', function (module, exports, __dirname, __filename) {
    var trim = require('crowdstart/node_modules/xhr-promise/node_modules/parse-headers/node_modules/trim/index.js'), forEach = require('crowdstart/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/index.js'), isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]'
      };
    module.exports = function (headers) {
      if (!headers)
        return {};
      var result = {};
      forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [
            result[key],
            value
          ]
        }
      });
      return result
    }
  });
  // source: node_modules/crowdstart.js/node_modules/xhr-promise/node_modules/parse-headers/node_modules/trim/index.js
  require.define('crowdstart/node_modules/xhr-promise/node_modules/parse-headers/node_modules/trim/index.js', function (module, exports, __dirname, __filename) {
    exports = module.exports = trim;
    function trim(str) {
      return str.replace(/^\s*|\s*$/g, '')
    }
    exports.left = function (str) {
      return str.replace(/^\s*/, '')
    };
    exports.right = function (str) {
      return str.replace(/\s*$/, '')
    }
  });
  // source: node_modules/crowdstart.js/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/index.js
  require.define('crowdstart/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/index.js', function (module, exports, __dirname, __filename) {
    var isFunction = require('crowdstart/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/node_modules/is-function/index.js');
    module.exports = forEach;
    var toString = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function forEach(list, iterator, context) {
      if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
      }
      if (arguments.length < 3) {
        context = this
      }
      if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context);
      else if (typeof list === 'string')
        forEachString(list, iterator, context);
      else
        forEachObject(list, iterator, context)
    }
    function forEachArray(array, iterator, context) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          iterator.call(context, array[i], i, array)
        }
      }
    }
    function forEachString(string, iterator, context) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
      }
    }
    function forEachObject(object, iterator, context) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          iterator.call(context, object[k], k, object)
        }
      }
    }
  });
  // source: node_modules/crowdstart.js/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/node_modules/is-function/index.js
  require.define('crowdstart/node_modules/xhr-promise/node_modules/parse-headers/node_modules/for-each/node_modules/is-function/index.js', function (module, exports, __dirname, __filename) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      var string = toString.call(fn);
      return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
    }
    ;
  });
  // source: node_modules/crowdstart.js/node_modules/cookies-js/dist/cookies.js
  require.define('crowdstart/node_modules/cookies-js/dist/cookies.js', function (module, exports, __dirname, __filename) {
    /*
 * Cookies.js - 1.2.2
 * https://github.com/ScottHamper/Cookies
 *
 * This is free and unencumbered software released into the public domain.
 */
    (function (global, undefined) {
      'use strict';
      var factory = function (window) {
        if (typeof window.document !== 'object') {
          throw new Error('Cookies.js requires a `window` with a `document` object')
        }
        var Cookies = function (key, value, options) {
          return arguments.length === 1 ? Cookies.get(key) : Cookies.set(key, value, options)
        };
        // Allows for setter injection in unit tests
        Cookies._document = window.document;
        // Used to ensure cookie keys do not collide with
        // built-in `Object` properties
        Cookies._cacheKeyPrefix = 'cookey.';
        // Hurr hurr, :)
        Cookies._maxExpireDate = new Date('Fri, 31 Dec 9999 23:59:59 UTC');
        Cookies.defaults = {
          path: '/',
          secure: false
        };
        Cookies.get = function (key) {
          if (Cookies._cachedDocumentCookie !== Cookies._document.cookie) {
            Cookies._renewCache()
          }
          var value = Cookies._cache[Cookies._cacheKeyPrefix + key];
          return value === undefined ? undefined : decodeURIComponent(value)
        };
        Cookies.set = function (key, value, options) {
          options = Cookies._getExtendedOptions(options);
          options.expires = Cookies._getExpiresDate(value === undefined ? -1 : options.expires);
          Cookies._document.cookie = Cookies._generateCookieString(key, value, options);
          return Cookies
        };
        Cookies.expire = function (key, options) {
          return Cookies.set(key, undefined, options)
        };
        Cookies._getExtendedOptions = function (options) {
          return {
            path: options && options.path || Cookies.defaults.path,
            domain: options && options.domain || Cookies.defaults.domain,
            expires: options && options.expires || Cookies.defaults.expires,
            secure: options && options.secure !== undefined ? options.secure : Cookies.defaults.secure
          }
        };
        Cookies._isValidDate = function (date) {
          return Object.prototype.toString.call(date) === '[object Date]' && !isNaN(date.getTime())
        };
        Cookies._getExpiresDate = function (expires, now) {
          now = now || new Date;
          if (typeof expires === 'number') {
            expires = expires === Infinity ? Cookies._maxExpireDate : new Date(now.getTime() + expires * 1000)
          } else if (typeof expires === 'string') {
            expires = new Date(expires)
          }
          if (expires && !Cookies._isValidDate(expires)) {
            throw new Error('`expires` parameter cannot be converted to a valid Date instance')
          }
          return expires
        };
        Cookies._generateCookieString = function (key, value, options) {
          key = key.replace(/[^#$&+\^`|]/g, encodeURIComponent);
          key = key.replace(/\(/g, '%28').replace(/\)/g, '%29');
          value = (value + '').replace(/[^!#$&-+\--:<-\[\]-~]/g, encodeURIComponent);
          options = options || {};
          var cookieString = key + '=' + value;
          cookieString += options.path ? ';path=' + options.path : '';
          cookieString += options.domain ? ';domain=' + options.domain : '';
          cookieString += options.expires ? ';expires=' + options.expires.toUTCString() : '';
          cookieString += options.secure ? ';secure' : '';
          return cookieString
        };
        Cookies._getCacheFromString = function (documentCookie) {
          var cookieCache = {};
          var cookiesArray = documentCookie ? documentCookie.split('; ') : [];
          for (var i = 0; i < cookiesArray.length; i++) {
            var cookieKvp = Cookies._getKeyValuePairFromCookieString(cookiesArray[i]);
            if (cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] === undefined) {
              cookieCache[Cookies._cacheKeyPrefix + cookieKvp.key] = cookieKvp.value
            }
          }
          return cookieCache
        };
        Cookies._getKeyValuePairFromCookieString = function (cookieString) {
          // "=" is a valid character in a cookie value according to RFC6265, so cannot `split('=')`
          var separatorIndex = cookieString.indexOf('=');
          // IE omits the "=" when the cookie value is an empty string
          separatorIndex = separatorIndex < 0 ? cookieString.length : separatorIndex;
          var key = cookieString.substr(0, separatorIndex);
          var decodedKey;
          try {
            decodedKey = decodeURIComponent(key)
          } catch (e) {
            if (console && typeof console.error === 'function') {
              console.error('Could not decode cookie with key "' + key + '"', e)
            }
          }
          return {
            key: decodedKey,
            value: cookieString.substr(separatorIndex + 1)  // Defer decoding value until accessed
          }
        };
        Cookies._renewCache = function () {
          Cookies._cache = Cookies._getCacheFromString(Cookies._document.cookie);
          Cookies._cachedDocumentCookie = Cookies._document.cookie
        };
        Cookies._areEnabled = function () {
          var testKey = 'cookies.js';
          var areEnabled = Cookies.set(testKey, 1).get(testKey) === '1';
          Cookies.expire(testKey);
          return areEnabled
        };
        Cookies.enabled = Cookies._areEnabled();
        return Cookies
      };
      var cookiesExport = typeof global.document === 'object' ? factory(global) : factory;
      // AMD support
      if (typeof define === 'function' && define.amd) {
        define(function () {
          return cookiesExport
        })  // CommonJS/Node.js support
      } else if (typeof exports === 'object') {
        // Support Node.js specific `module.exports` (which can be a function)
        if (typeof module === 'object' && typeof module.exports === 'object') {
          exports = module.exports = cookiesExport
        }
        // But always support CommonJS module 1.1.1 spec (`exports` cannot be a function)
        exports.Cookies = cookiesExport
      } else {
        global.Cookies = cookiesExport
      }
    }(typeof window === 'undefined' ? this : window))
  });
  // source: src/events.coffee
  require.define('./events', function (module, exports, __dirname, __filename) {
    var Events, crowdcontrol;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    Events.ProgressBar = { Update: 'progressbar-update' };
    Events.Checkout = { Update: 'checkout-update' };
    Events.Modal = {
      Open: 'modal-open',
      Close: 'modal-close',
      DisableClose: 'modal-disable-close',
      EnableClose: 'modal-enable-close'
    }
  });
  // source: src/views/progressbar.coffee
  require.define('./views/progressbar', function (module, exports, __dirname, __filename) {
    var Events, ProgressBar, View, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    ProgressBar = function (superClass) {
      var obj;
      extend(ProgressBar, superClass);
      function ProgressBar() {
        return ProgressBar.__super__.constructor.apply(this, arguments)
      }
      ProgressBar.prototype.tag = 'progressbar';
      ProgressBar.prototype.html = require('./Users/dtai/work/verus/checkout/templates/progressbar');
      ProgressBar.prototype.screens = [];
      ProgressBar.prototype.index = 0;
      ProgressBar.prototype.events = (obj = {}, obj['' + Events.ProgressBar.Update] = function (i) {
        return this.index = i
      }, obj);
      ProgressBar.prototype.js = function (opts) {
        return this.screens = opts.screens
      };
      return ProgressBar
    }(View);
    ProgressBar.register();
    module.exports = ProgressBar
  });
  // source: templates/progressbar.jade
  require.define('./Users/dtai/work/verus/checkout/templates/progressbar', function (module, exports, __dirname, __filename) {
    module.exports = '<ul class="crowdstart-progress"><li each="{ screen, i in screens }" class="{ active: this.parent.index >= i }">{ screen }</li></ul>'
  });
  // source: src/views/widget.coffee
  require.define('./views/widget', function (module, exports, __dirname, __filename) {
    var Events, View, Widget, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    Widget = function (superClass) {
      extend(Widget, superClass);
      function Widget() {
        return Widget.__super__.constructor.apply(this, arguments)
      }
      Widget.prototype.tag = 'widget';
      Widget.prototype.html = require('./Users/dtai/work/verus/checkout/templates/widget');
      Widget.prototype.js = function (opts) {
        return this.screens = [
          'Payment Method',
          'Payment Info',
          'Shipping Address'
        ]
      };
      Widget.prototype.close = function () {
        return this.obs.trigger('' + Events.Modal.Close)
      };
      return Widget
    }(View);
    Widget.register();
    module.exports = Widget
  });
  // source: templates/widget.jade
  require.define('./Users/dtai/work/verus/checkout/templates/widget', function (module, exports, __dirname, __filename) {
    module.exports = '<div class="crowdstart-checkout crowdstart-widget"><progressbar screens="{ screens }"></progressbar><div class="crowdstart-back"><span>&#10140;</span></div><div onclick="{ close }" class="crowdstart-close"></div><div class="crowdstart-screens-container"><div class="crowdstart-screens"><div class="crowdstart-screen-strip"><yield></yield></div></div></div><div class="crowdstart-invoice"><div class="crowdstart-sep"></div></div></div>'
  });
  // source: src/views/modal.coffee
  require.define('./views/modal', function (module, exports, __dirname, __filename) {
    var Events, Modal, View, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    Modal = function (superClass) {
      var obj;
      extend(Modal, superClass);
      function Modal() {
        return Modal.__super__.constructor.apply(this, arguments)
      }
      Modal.prototype.tag = 'modal';
      Modal.prototype.html = require('./Users/dtai/work/verus/checkout/templates/modal');
      Modal.prototype.isOpen = false;
      Modal.prototype.canClose = true;
      Modal.prototype.events = (obj = {}, obj['' + Events.Modal.Open] = function () {
        return this.open()
      }, obj['' + Events.Modal.Close] = function () {
        return this.close()
      }, obj['' + Events.Modal.DisableClose] = function () {
        return this.canClose = false
      }, obj['' + Events.Modal.EnableClose] = function () {
        return this.canClose = true
      }, obj);
      Modal.prototype.js = function (opts) {
        return $(document).on('keydown', this.closeOnEscape)
      };
      Modal.prototype.open = function () {
        this.isOpen = true;
        return this.update()
      };
      Modal.prototype.close = function () {
        if (this.canClose) {
          this.isOpen = false;
          return this.update()
        } else {
          return true
        }
      };
      Modal.prototype.closeOnEscape = function (event) {
        if (event.which === 27) {
          return this.close()
        }
      };
      return Modal
    }(View);
    Modal.register();
    module.exports = Modal
  });
  // source: templates/modal.jade
  require.define('./Users/dtai/work/verus/checkout/templates/modal', function (module, exports, __dirname, __filename) {
    module.exports = '<div class="{ crowdstart-active: isOpen }"><div onclick="{ close }" class="crowdstart-modal-target"><yield></yield></div><div onclick="{ close }" class="crowdstart-modal"></div></div>'
  });
  // source: src/checkout.coffee
  require.define('./checkout', function (module, exports, __dirname, __filename) {
    var Checkout, Client, Events, Modal, ProgressBar, Widget, crowdcontrol, riot;
    riot = require('riot/riot');
    window.riot = riot;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    Client = require('crowdstart/lib/index.js');
    require('./events');
    ProgressBar = require('./views/progressbar');
    Widget = require('./views/widget');
    Modal = require('./views/modal');
    Checkout = function () {
      Checkout.prototype.key = '';
      Checkout.prototype.order = null;
      Checkout.prototype.user = null;
      Checkout.prototype.items = null;
      Checkout.prototype.itemUpdateQueue = null;
      Checkout.prototype.obs = null;
      function Checkout(key) {
        var $modal, match, q, qs, search, widgetTag;
        this.key = key;
        this.client = new Client(this.key);
        search = /([^&=]+)=?([^&]*)/g;
        q = window.location.href.split('?')[1];
        qs = {};
        if (q != null) {
          while (match = search.exec(q)) {
            qs[decodeURIComponent(match[1])] = decodeURIComponent(match[2])
          }
        }
        this.order = { items: [] };
        if (qs.referrer != null) {
          this.order.referrerId = qs.referrer
        }
        this.items = [];
        this.itemUpdateQueue = [];
        this.obs = {};
        riot.observable(this.obs);
        widgetTag = Widget.prototype.tag;
        $modal = $('<modal><' + widgetTag + ' obs="{ obs }"></' + widgetTag + '></modal>');
        $('body').append($modal);
        riot.mount('modal', { obs: this.obs })
      }
      Checkout.prototype.open = function () {
        this.obs.trigger(Events.Modal.Open);
        this.obs.trigger(Events.Modal.DisableClose);
        setTimeout(function (_this) {
          return function () {
            return _this.obs.trigger(Events.Modal.EnableClose)
          }
        }(this), 600);
        return false
      };
      Checkout.prototype.update = function () {
        return this.obs.trigger(Events.Checkout.Update, {
          user: this.user,
          order: this.order,
          config: this.config
        })
      };
      Checkout.prototype.setConfig = function (config) {
        this.config = config;
        return this.update()
      };
      Checkout.prototype.setUser = function (user) {
        this.user = user;
        return this.update()
      };
      Checkout.prototype.updateItem = function (id, quantity) {
        this.itemUpdateQueue.push([
          id,
          quantity
        ]);
        if (this.itemUpdateQueue.length === 1) {
          return this._updateItem()
        }
      };
      Checkout.prototype._updateItem = function () {
        var i, id, item, j, k, len, len1, quantity, ref, ref1, ref2, set;
        if (itemUpdateQueue.length === 0) {
          this.update();
          return
        }
        ref = this.itemUpdateQueue.shift(), id = ref[0], quantity = ref[1];
        set = false;
        if (quantity === 0) {
          ref1 = this.items;
          for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            item = ref1[i];
            if (item.id === id) {
              break
            }
          }
          this.items.splice(i, 1);
          this.order.items.splice(i, 1);
          return
        }
        ref2 = this.items;
        for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
          item = ref2[i];
          if (item.id === id) {
            this.set = true;
            item.quantity = quantity;
            this.items[i].quantity = quantity
          }
        }
        if (set) {
          this.items.push({
            id: item,
            quantity: quantity
          });
          return this.client.util.product(id).then(function (_this) {
            return function (res) {
              _this.order.items.push(res.responseText);
              return _this._updateItem()
            }
          }(this))['catch'](function (err) {
            console.log('updateItem Error: ' + err);
            return this._updateItem()
          })
        }
      };
      return Checkout
    }();
    if (window.Crowdstart != null) {
      window.Crowdstart.Checkout = Checkout
    } else {
      window.Crowdstart = { Checkout: Checkout }
    }
    if (typeof module !== 'undefined' && module !== null) {
      module.exports = Checkout
    }
  });
  require('./checkout')
}.call(this, this))//# sourceMappingURL=data:application/json;base64,