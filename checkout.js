(function (global) {
  var process = {
    title: 'browser',
    browser: true,
    env: {},
    argv: [],
    nextTick: function (fn) {
      setTimeout(fn, 0)
    },
    cwd: function () {
      return '/'
    },
    chdir: function () {
    }
  };
  // Require module
  function require(file, callback) {
    if ({}.hasOwnProperty.call(require.cache, file))
      return require.cache[file];
    // Handle async require
    if (typeof callback == 'function') {
      require.load(file, callback);
      return
    }
    var resolved = require.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
      id: file,
      require: require,
      filename: file,
      exports: {},
      loaded: false,
      parent: null,
      children: []
    };
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    require.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return require.cache[file] = module$.exports
  }
  require.modules = {};
  require.cache = {};
  require.resolve = function (file) {
    return {}.hasOwnProperty.call(require.modules, file) ? require.modules[file] : void 0
  };
  // define normal static module
  require.define = function (file, fn) {
    require.modules[file] = fn
  };
  require.waiting = {};
  // define asynchrons module
  require.async = function (url, fn) {
    require.modules[url] = fn;
    while (cb = require.waiting[url].shift())
      cb(require(url))
  };
  // Load module asynchronously
  require.load = function (url, cb) {
    var script = document.createElement('script'), existing = document.getElementsByTagName('script')[0], callbacks = require.waiting[url] = require.waiting[url] || [];
    // we'll be called when asynchronously defined.
    callbacks.push(cb);
    // load module
    script.type = 'text/javascript';
    script.async = true;
    script.src = url;
    existing.parentNode.insertBefore(script, existing)
  };
  global.require = require;
  // source: node_modules/crowdstart.js/lib/browser.js
  require.define('crowdstart/lib/browser.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Api, Client;
    if (global.Crowdstart == null) {
      global.Crowdstart = {}
    }
    Api = require('crowdstart/lib/api.js');
    Client = require('crowdstart/lib/client/xhr.js');
    Api.CLIENT = Client;
    Api.BLUEPRINTS = require('crowdstart/lib/blueprints/browser.js');
    Crowdstart.Api = Api;
    Crowdstart.Client = Client;
    module.exports = Crowdstart  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/crowdstart.js/lib/api.js
  require.define('crowdstart/lib/api.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Api, isFunction, isString, newError, ref, statusOk;
    ref = require('crowdstart/lib/utils.js'), isFunction = ref.isFunction, isString = ref.isString, newError = ref.newError, statusOk = ref.statusOk;
    module.exports = Api = function () {
      Api.BLUEPRINTS = {};
      Api.CLIENT = null;
      function Api(opts) {
        var blueprints, client, debug, endpoint, k, key, v;
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof Api)) {
          return new Api(opts)
        }
        endpoint = opts.endpoint, debug = opts.debug, key = opts.key, client = opts.client, blueprints = opts.blueprints;
        this.debug = debug;
        if (blueprints == null) {
          blueprints = this.constructor.BLUEPRINTS
        }
        if (client) {
          this.client = client
        } else {
          this.client = new this.constructor.CLIENT({
            debug: debug,
            endpoint: endpoint,
            key: key
          })
        }
        for (k in blueprints) {
          v = blueprints[k];
          this.addBlueprints(k, v)
        }
      }
      Api.prototype.addBlueprints = function (api, blueprints) {
        var bp, fn, name;
        if (this[api] == null) {
          this[api] = {}
        }
        fn = function (_this) {
          return function (name, bp) {
            var method;
            if (isFunction(bp)) {
              return _this[api][name] = function () {
                return bp.apply(_this, arguments)
              }
            }
            if (bp.expects == null) {
              bp.expects = statusOk
            }
            if (bp.method == null) {
              bp.method = 'POST'
            }
            method = function (data, cb) {
              return _this.client.request(bp, data).then(function (res) {
                var ref1, ref2;
                if (((ref1 = res.data) != null ? ref1.error : void 0) != null) {
                  throw newError(data, res)
                }
                if (!bp.expects(res)) {
                  throw newError(data, res)
                }
                if (bp.process != null) {
                  bp.process.call(_this, res)
                }
                return (ref2 = res.data) != null ? ref2 : res.body
              }).callback(cb)
            };
            return _this[api][name] = method
          }
        }(this);
        for (name in blueprints) {
          bp = blueprints[name];
          fn(name, bp)
        }
      };
      Api.prototype.setKey = function (key) {
        return this.client.setKey(key)
      };
      Api.prototype.setUserKey = function (key) {
        return this.client.setUserKey(key)
      };
      Api.prototype.deleteUserKey = function () {
        return this.client.deleteUserKey()
      };
      Api.prototype.setStore = function (id) {
        this.storeId = id;
        return this.client.setStore(id)
      };
      return Api
    }()  //# sourceMappingURL=api.js.map
  });
  // source: node_modules/crowdstart.js/lib/utils.js
  require.define('crowdstart/lib/utils.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    exports.isFunction = function (fn) {
      return typeof fn === 'function'
    };
    exports.isString = function (s) {
      return typeof s === 'string'
    };
    exports.statusOk = function (res) {
      return res.status === 200
    };
    exports.statusCreated = function (res) {
      return res.status === 201
    };
    exports.statusNoContent = function (res) {
      return res.status === 204
    };
    exports.newError = function (data, res) {
      var err, message, ref, ref1, ref2, ref3, ref4;
      if (res == null) {
        res = {}
      }
      message = (ref = res != null ? (ref1 = res.data) != null ? (ref2 = ref1.error) != null ? ref2.message : void 0 : void 0 : void 0) != null ? ref : 'Request failed';
      err = new Error(message);
      err.message = message;
      err.req = data;
      err.data = res.data;
      err.responseText = res.data;
      err.status = res.status;
      err.type = (ref3 = res.data) != null ? (ref4 = ref3.error) != null ? ref4.type : void 0 : void 0;
      return err
    };
    exports.updateQuery = function (url, key, value) {
      var hash, re, separator;
      re = new RegExp('([?&])' + key + '=.*?(&|#|$)(.*)', 'gi');
      if (re.test(url)) {
        if (value != null) {
          return url.replace(re, '$1' + key + '=' + value + '$2$3')
        } else {
          hash = url.split('#');
          url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        }
      } else {
        if (value != null) {
          separator = url.indexOf('?') !== -1 ? '&' : '?';
          hash = url.split('#');
          url = hash[0] + separator + key + '=' + value;
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        } else {
          return url
        }
      }
    }  //# sourceMappingURL=utils.js.map
  });
  // source: node_modules/crowdstart.js/lib/client/xhr.js
  require.define('crowdstart/lib/client/xhr.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Xhr, XhrClient, cookie, isFunction, newError, ref, updateQuery;
    Xhr = require('xhr-promise-es6/lib');
    Xhr.Promise = require('broken/lib');
    cookie = require('js-cookie/src/js.cookie');
    ref = require('crowdstart/lib/utils.js'), isFunction = ref.isFunction, newError = ref.newError, updateQuery = ref.updateQuery;
    module.exports = XhrClient = function () {
      XhrClient.prototype.debug = false;
      XhrClient.prototype.endpoint = 'https://api.crowdstart.com';
      XhrClient.prototype.sessionName = 'crwdst';
      function XhrClient(opts) {
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof XhrClient)) {
          return new XhrClient(opts)
        }
        this.key = opts.key, this.debug = opts.debug;
        if (opts.endpoint) {
          this.setEndpoint(opts.endpoint)
        }
        this.getUserKey()
      }
      XhrClient.prototype.setEndpoint = function (endpoint) {
        return this.endpoint = endpoint.replace(/\/$/, '')
      };
      XhrClient.prototype.setStore = function (id) {
        return this.storeId = id
      };
      XhrClient.prototype.setKey = function (key) {
        return this.key = key
      };
      XhrClient.prototype.getKey = function () {
        return this.userKey || this.key || this.constructor.KEY
      };
      XhrClient.prototype.getUserKey = function () {
        var session;
        if ((session = cookie.getJSON(this.sessionName)) != null) {
          if (session.userKey != null) {
            this.userKey = session.userKey
          }
        }
        return this.userKey
      };
      XhrClient.prototype.setUserKey = function (key) {
        cookie.set(this.sessionName, { userKey: key }, { expires: 7 * 24 * 3600 * 1000 });
        return this.userKey = key
      };
      XhrClient.prototype.deleteUserKey = function () {
        cookie.set(this.sessionName, { userKey: null }, { expires: 7 * 24 * 3600 * 1000 });
        return this.userKey
      };
      XhrClient.prototype.getUrl = function (url, data, key) {
        if (isFunction(url)) {
          url = url.call(this, data)
        }
        return updateQuery(this.endpoint + url, 'token', key)
      };
      XhrClient.prototype.request = function (blueprint, data, key) {
        var opts;
        if (key == null) {
          key = this.getKey()
        }
        opts = {
          url: this.getUrl(blueprint.url, data, key),
          method: blueprint.method,
          data: JSON.stringify(data)
        };
        if (this.debug) {
          console.log('--REQUEST--');
          console.log(opts)
        }
        return new Xhr().send(opts).then(function (res) {
          if (this.debug) {
            console.log('--RESPONSE--');
            console.log(res)
          }
          res.data = res.responseText;
          return res
        })['catch'](function (res) {
          var err, error, ref1;
          try {
            res.data = (ref1 = res.responseText) != null ? ref1 : JSON.parse(res.xhr.responseText)
          } catch (error) {
            err = error
          }
          err = newError(data, res);
          if (this.debug) {
            console.log('--RESPONSE--');
            console.log(res);
            console.log('ERROR:', err)
          }
          throw err
        })
      };
      return XhrClient
    }()  //# sourceMappingURL=xhr.js.map
  });
  // source: node_modules/xhr-promise-es6/lib/index.js
  require.define('xhr-promise-es6/lib', function (module, exports, __dirname, __filename) {
    /*
 * Copyright 2015 Scott Brady
 * MIT License
 * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
 */
    var ParseHeaders, XMLHttpRequestPromise, objectAssign;
    ParseHeaders = require('parse-headers/parse-headers');
    objectAssign = require('object-assign');
    /*
 * Module to wrap an XMLHttpRequest in a promise.
 */
    module.exports = XMLHttpRequestPromise = function () {
      function XMLHttpRequestPromise() {
      }
      XMLHttpRequestPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';
      XMLHttpRequestPromise.Promise = global.Promise;
      /*
   * XMLHttpRequestPromise.send(options) -> Promise
   * - options (Object): URL, method, data, etc.
   *
   * Create the XHR object and wire up event handlers to use a promise.
   */
      XMLHttpRequestPromise.prototype.send = function (options) {
        var defaults;
        if (options == null) {
          options = {}
        }
        defaults = {
          method: 'GET',
          data: null,
          headers: {},
          async: true,
          username: null,
          password: null
        };
        options = objectAssign({}, defaults, options);
        return new this.constructor.Promise(function (_this) {
          return function (resolve, reject) {
            var e, header, ref, value, xhr;
            if (!XMLHttpRequest) {
              _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
              return
            }
            if (typeof options.url !== 'string' || options.url.length === 0) {
              _this._handleError('url', reject, null, 'URL is a required parameter');
              return
            }
            _this._xhr = xhr = new XMLHttpRequest;
            xhr.onload = function () {
              var responseText;
              _this._detachWindowUnload();
              try {
                responseText = _this._getResponseText()
              } catch (_error) {
                _this._handleError('parse', reject, null, 'invalid JSON response');
                return
              }
              return resolve({
                url: _this._getResponseUrl(),
                status: xhr.status,
                statusText: xhr.statusText,
                responseText: responseText,
                headers: _this._getHeaders(),
                xhr: xhr
              })
            };
            xhr.onerror = function () {
              return _this._handleError('error', reject)
            };
            xhr.ontimeout = function () {
              return _this._handleError('timeout', reject)
            };
            xhr.onabort = function () {
              return _this._handleError('abort', reject)
            };
            _this._attachWindowUnload();
            xhr.open(options.method, options.url, options.async, options.username, options.password);
            if (options.data != null && !options.headers['Content-Type']) {
              options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE
            }
            ref = options.headers;
            for (header in ref) {
              value = ref[header];
              xhr.setRequestHeader(header, value)
            }
            try {
              return xhr.send(options.data)
            } catch (_error) {
              e = _error;
              return _this._handleError('send', reject, null, e.toString())
            }
          }
        }(this))
      };
      /*
   * XMLHttpRequestPromise.getXHR() -> XMLHttpRequest
   */
      XMLHttpRequestPromise.prototype.getXHR = function () {
        return this._xhr
      };
      /*
   * XMLHttpRequestPromise._attachWindowUnload()
   *
   * Fix for IE 9 and IE 10
   * Internet Explorer freezes when you close a webpage during an XHR request
   * https://support.microsoft.com/kb/2856746
   *
   */
      XMLHttpRequestPromise.prototype._attachWindowUnload = function () {
        this._unloadHandler = this._handleWindowUnload.bind(this);
        if (window.attachEvent) {
          return window.attachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._detachWindowUnload()
   */
      XMLHttpRequestPromise.prototype._detachWindowUnload = function () {
        if (window.detachEvent) {
          return window.detachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._getHeaders() -> Object
   */
      XMLHttpRequestPromise.prototype._getHeaders = function () {
        return ParseHeaders(this._xhr.getAllResponseHeaders())
      };
      /*
   * XMLHttpRequestPromise._getResponseText() -> Mixed
   *
   * Parses response text JSON if present.
   */
      XMLHttpRequestPromise.prototype._getResponseText = function () {
        var responseText;
        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
        switch (this._xhr.getResponseHeader('Content-Type')) {
        case 'application/json':
        case 'text/javascript':
          responseText = JSON.parse(responseText + '')
        }
        return responseText
      };
      /*
   * XMLHttpRequestPromise._getResponseUrl() -> String
   *
   * Actual response URL after following redirects.
   */
      XMLHttpRequestPromise.prototype._getResponseUrl = function () {
        if (this._xhr.responseURL != null) {
          return this._xhr.responseURL
        }
        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
          return this._xhr.getResponseHeader('X-Request-URL')
        }
        return ''
      };
      /*
   * XMLHttpRequestPromise._handleError(reason, reject, status, statusText)
   * - reason (String)
   * - reject (Function)
   * - status (String)
   * - statusText (String)
   */
      XMLHttpRequestPromise.prototype._handleError = function (reason, reject, status, statusText) {
        this._detachWindowUnload();
        return reject({
          reason: reason,
          status: status || this._xhr.status,
          statusText: statusText || this._xhr.statusText,
          xhr: this._xhr
        })
      };
      /*
   * XMLHttpRequestPromise._handleWindowUnload()
   */
      XMLHttpRequestPromise.prototype._handleWindowUnload = function () {
        return this._xhr.abort()
      };
      return XMLHttpRequestPromise
    }()
  });
  // source: node_modules/parse-headers/parse-headers.js
  require.define('parse-headers/parse-headers', function (module, exports, __dirname, __filename) {
    var trim = require('trim'), forEach = require('for-each'), isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]'
      };
    module.exports = function (headers) {
      if (!headers)
        return {};
      var result = {};
      forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [
            result[key],
            value
          ]
        }
      });
      return result
    }
  });
  // source: node_modules/trim/index.js
  require.define('trim', function (module, exports, __dirname, __filename) {
    exports = module.exports = trim;
    function trim(str) {
      return str.replace(/^\s*|\s*$/g, '')
    }
    exports.left = function (str) {
      return str.replace(/^\s*/, '')
    };
    exports.right = function (str) {
      return str.replace(/\s*$/, '')
    }
  });
  // source: node_modules/for-each/index.js
  require.define('for-each', function (module, exports, __dirname, __filename) {
    var isFunction = require('is-function');
    module.exports = forEach;
    var toString = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function forEach(list, iterator, context) {
      if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
      }
      if (arguments.length < 3) {
        context = this
      }
      if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context);
      else if (typeof list === 'string')
        forEachString(list, iterator, context);
      else
        forEachObject(list, iterator, context)
    }
    function forEachArray(array, iterator, context) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          iterator.call(context, array[i], i, array)
        }
      }
    }
    function forEachString(string, iterator, context) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
      }
    }
    function forEachObject(object, iterator, context) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          iterator.call(context, object[k], k, object)
        }
      }
    }
  });
  // source: node_modules/is-function/index.js
  require.define('is-function', function (module, exports, __dirname, __filename) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      var string = toString.call(fn);
      return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
    }
    ;
  });
  // source: node_modules/object-assign/index.js
  require.define('object-assign', function (module, exports, __dirname, __filename) {
    /* eslint-disable no-unused-vars */
    'use strict';
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined')
      }
      return Object(val)
    }
    module.exports = Object.assign || function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key]
          }
        }
        if (Object.getOwnPropertySymbols) {
          symbols = Object.getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]]
            }
          }
        }
      }
      return to
    }
  });
  // source: node_modules/broken/lib/index.js
  require.define('broken/lib', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Promise, PromiseInspection;
    Promise = require('zousan/zousan-min');
    Promise.suppressUncaughtRejectionError = true;
    PromiseInspection = function () {
      function PromiseInspection(arg) {
        this.state = arg.state, this.value = arg.value, this.reason = arg.reason
      }
      PromiseInspection.prototype.isFulfilled = function () {
        return this.state === 'fulfilled'
      };
      PromiseInspection.prototype.isRejected = function () {
        return this.state === 'rejected'
      };
      return PromiseInspection
    }();
    Promise.reflect = function (promise) {
      return new Promise(function (resolve, reject) {
        return promise.then(function (value) {
          return resolve(new PromiseInspection({
            state: 'fulfilled',
            value: value
          }))
        })['catch'](function (err) {
          return resolve(new PromiseInspection({
            state: 'rejected',
            reason: err
          }))
        })
      })
    };
    Promise.settle = function (promises) {
      return Promise.all(promises.map(Promise.reflect))
    };
    Promise.prototype.callback = function (cb) {
      if (typeof cb === 'function') {
        this.then(function (value) {
          return cb(null, value)
        });
        this['catch'](function (error) {
          return cb(error, null)
        })
      }
      return this
    };
    module.exports = Promise  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/zousan/zousan-min.js
  require.define('zousan/zousan-min', function (module, exports, __dirname, __filename) {
    !function (t) {
      'use strict';
      function e(t) {
        if (t) {
          var e = this;
          t(function (t) {
            e.resolve(t)
          }, function (t) {
            e.reject(t)
          })
        }
      }
      function n(t, e) {
        if ('function' == typeof t.y)
          try {
            var n = t.y.call(i, e);
            t.p.resolve(n)
          } catch (o) {
            t.p.reject(o)
          }
        else
          t.p.resolve(e)
      }
      function o(t, e) {
        if ('function' == typeof t.n)
          try {
            var n = t.n.call(i, e);
            t.p.resolve(n)
          } catch (o) {
            t.p.reject(o)
          }
        else
          t.p.reject(e)
      }
      var r, i, c = 'fulfilled', u = 'rejected', s = 'undefined', f = function () {
          function t() {
            for (; e.length - n;)
              e[n](), n++, n > 1024 && (e.splice(0, n), n = 0)
          }
          var e = [], n = 0, o = function () {
              if (typeof MutationObserver !== s) {
                var e = document.createElement('div'), n = new MutationObserver(t);
                return n.observe(e, { attributes: !0 }), function () {
                  e.setAttribute('a', 0)
                }
              }
              return typeof setImmediate !== s ? function () {
                setImmediate(t)
              } : function () {
                setTimeout(t, 0)
              }
            }();
          return function (t) {
            e.push(t), e.length - n == 1 && o()
          }
        }();
      e.prototype = {
        resolve: function (t) {
          if (this.state === r) {
            if (t === this)
              return this.reject(new TypeError('Attempt to resolve promise with self'));
            var e = this;
            if (t && ('function' == typeof t || 'object' == typeof t))
              try {
                var o = !0, i = t.then;
                if ('function' == typeof i)
                  return void i.call(t, function (t) {
                    o && (o = !1, e.resolve(t))
                  }, function (t) {
                    o && (o = !1, e.reject(t))
                  })
              } catch (u) {
                return void (o && this.reject(u))
              }
            this.state = c, this.v = t, e.c && f(function () {
              for (var o = 0, r = e.c.length; r > o; o++)
                n(e.c[o], t)
            })
          }
        },
        reject: function (t) {
          if (this.state === r) {
            this.state = u, this.v = t;
            var n = this.c;
            n ? f(function () {
              for (var e = 0, r = n.length; r > e; e++)
                o(n[e], t)
            }) : e.suppressUncaughtRejectionError || console.log('You upset Zousan. Please catch rejections: ', t, t.stack)
          }
        },
        then: function (t, i) {
          var u = new e, s = {
              y: t,
              n: i,
              p: u
            };
          if (this.state === r)
            this.c ? this.c.push(s) : this.c = [s];
          else {
            var l = this.state, a = this.v;
            f(function () {
              l === c ? n(s, a) : o(s, a)
            })
          }
          return u
        },
        'catch': function (t) {
          return this.then(null, t)
        },
        'finally': function (t) {
          return this.then(t, t)
        },
        timeout: function (t, n) {
          n = n || 'Timeout';
          var o = this;
          return new e(function (e, r) {
            setTimeout(function () {
              r(Error(n))
            }, t), o.then(function (t) {
              e(t)
            }, function (t) {
              r(t)
            })
          })
        }
      }, e.resolve = function (t) {
        var n = new e;
        return n.resolve(t), n
      }, e.reject = function (t) {
        var n = new e;
        return n.reject(t), n
      }, e.all = function (t) {
        function n(n, c) {
          'function' != typeof n.then && (n = e.resolve(n)), n.then(function (e) {
            o[c] = e, r++, r == t.length && i.resolve(o)
          }, function (t) {
            i.reject(t)
          })
        }
        for (var o = [], r = 0, i = new e, c = 0; c < t.length; c++)
          n(t[c], c);
        return t.length || i.resolve(o), i
      }, typeof module != s && module.exports && (module.exports = e), t.Zousan = e, e.soon = f
    }('undefined' != typeof global ? global : this)
  });
  // source: node_modules/js-cookie/src/js.cookie.js
  require.define('js-cookie/src/js.cookie', function (module, exports, __dirname, __filename) {
    /*!
 * JavaScript Cookie v2.0.4
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        define(factory)
      } else if (typeof exports === 'object') {
        module.exports = factory()
      } else {
        var _OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function () {
          window.Cookies = _OldCookies;
          return api
        }
      }
    }(function () {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key]
          }
        }
        return result
      }
      function init(converter) {
        function api(key, value, attributes) {
          var result;
          // Write
          if (arguments.length > 1) {
            attributes = extend({ path: '/' }, api.defaults, attributes);
            if (typeof attributes.expires === 'number') {
              var expires = new Date;
              expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 86400000);
              attributes.expires = expires
            }
            try {
              result = JSON.stringify(value);
              if (/^[\{\[]/.test(result)) {
                value = result
              }
            } catch (e) {
            }
            value = encodeURIComponent(String(value));
            value = value.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            key = encodeURIComponent(String(key));
            key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
            key = key.replace(/[\(\)]/g, escape);
            return document.cookie = [
              key,
              '=',
              value,
              attributes.expires && '; expires=' + attributes.expires.toUTCString(),
              // use expires attribute, max-age is not supported by IE
              attributes.path && '; path=' + attributes.path,
              attributes.domain && '; domain=' + attributes.domain,
              attributes.secure ? '; secure' : ''
            ].join('')
          }
          // Read
          if (!key) {
            result = {}
          }
          // To prevent the for loop in the first place assign an empty array
          // in case there are no cookies at all. Also prevents odd result when
          // calling "get()"
          var cookies = document.cookie ? document.cookie.split('; ') : [];
          var rdecode = /(%[0-9A-Z]{2})+/g;
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split('=');
            var name = parts[0].replace(rdecode, decodeURIComponent);
            var cookie = parts.slice(1).join('=');
            if (cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1)
            }
            try {
              cookie = converter && converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);
              if (this.json) {
                try {
                  cookie = JSON.parse(cookie)
                } catch (e) {
                }
              }
              if (key === name) {
                result = cookie;
                break
              }
              if (!key) {
                result[name] = cookie
              }
            } catch (e) {
            }
          }
          return result
        }
        api.get = api.set = api;
        api.getJSON = function () {
          return api.apply({ json: true }, [].slice.call(arguments))
        };
        api.defaults = {};
        api.remove = function (key, attributes) {
          api(key, '', extend(attributes, { expires: -1 }))
        };
        api.withConverter = init;
        return api
      }
      return init()
    }))
  });
  // source: node_modules/crowdstart.js/lib/blueprints/browser.js
  require.define('crowdstart/lib/blueprints/browser.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var blueprints, byId, createBlueprint, fn, i, isFunction, len, model, models, ref, ref1, statusCreated, statusNoContent, statusOk, storePrefixed, userModels;
    ref = require('crowdstart/lib/utils.js'), isFunction = ref.isFunction, statusCreated = ref.statusCreated, statusNoContent = ref.statusNoContent, statusOk = ref.statusOk;
    ref1 = require('crowdstart/lib/blueprints/url.js'), byId = ref1.byId, storePrefixed = ref1.storePrefixed;
    createBlueprint = function (name) {
      var endpoint;
      endpoint = '/' + name;
      return {
        list: {
          url: endpoint,
          method: 'GET',
          expects: statusOk
        },
        get: {
          url: byId(name),
          method: 'GET',
          expects: statusOk
        }
      }
    };
    blueprints = {
      account: {
        get: {
          url: '/account',
          method: 'GET',
          expects: statusOk
        },
        update: {
          url: '/account',
          method: 'PATCH',
          expects: statusOk
        },
        exists: {
          url: function (x) {
            var ref2, ref3, ref4;
            return '/account/exists/' + ((ref2 = (ref3 = (ref4 = x.email) != null ? ref4 : x.username) != null ? ref3 : x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk,
          process: function (res) {
            return res.data.exists
          }
        },
        create: {
          url: '/account/create',
          method: 'POST',
          expects: statusCreated
        },
        enable: {
          url: function (x) {
            var ref2;
            return '/account/enable/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk
        },
        login: {
          url: '/account/login',
          method: 'POST',
          expects: statusOk,
          process: function (res) {
            this.setUserKey(res.data.token);
            return res
          }
        },
        logout: function () {
          return this.deleteUserKey()
        },
        reset: {
          url: '/account/reset',
          method: 'POST',
          expects: statusOk
        },
        confirm: {
          url: function (x) {
            var ref2;
            return '/account/confirm/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk
        }
      },
      checkout: {
        authorize: {
          url: storePrefixed('/checkout/authorize'),
          method: 'POST',
          expects: statusOk
        },
        capture: {
          url: storePrefixed(function (x) {
            var ref2;
            return '/checkout/capture/' + ((ref2 = x.orderId) != null ? ref2 : x)
          }),
          method: 'POST',
          expects: statusOk
        },
        charge: {
          url: storePrefixed('/checkout/charge'),
          method: 'POST',
          expects: statusOk
        },
        paypal: {
          url: storePrefixed('/checkout/paypal'),
          method: 'POST',
          expects: statusOk
        }
      },
      referrer: {
        create: {
          url: '/referrer',
          method: 'POST',
          expects: statusCreated
        }
      }
    };
    models = [
      'collection',
      'coupon',
      'product',
      'variant'
    ];
    userModels = [
      'order',
      'subscription'
    ];
    fn = function (model) {
      return blueprints[model] = createBlueprint(model)
    };
    for (i = 0, len = models.length; i < len; i++) {
      model = models[i];
      fn(model)
    }
    module.exports = blueprints  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/crowdstart.js/lib/blueprints/url.js
  require.define('crowdstart/lib/blueprints/url.js', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var isFunction, sp;
    isFunction = require('crowdstart/lib/utils.js').isFunction;
    exports.storePrefixed = sp = function (u) {
      return function (x) {
        var url;
        if (isFunction(u)) {
          url = u(x)
        } else {
          url = u
        }
        if (this.storeId != null) {
          return '/store/' + this.storeId + url
        } else {
          return url
        }
      }
    };
    exports.byId = function (name) {
      switch (name) {
      case 'coupon':
        return sp(function (x) {
          var ref;
          return '/coupon/' + ((ref = x.code) != null ? ref : x)
        });
      case 'collection':
        return sp(function (x) {
          var ref;
          return '/collection/' + ((ref = x.slug) != null ? ref : x)
        });
      case 'product':
        return sp(function (x) {
          var ref, ref1;
          return '/product/' + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x)
        });
      case 'variant':
        return sp(function (x) {
          var ref, ref1;
          return '/variant/' + ((ref = (ref1 = x.id) != null ? ref1 : x.sku) != null ? ref : x)
        });
      default:
        return function (x) {
          var ref;
          return '/' + name + '/' + ((ref = x.id) != null ? ref : x)
        }
      }
    }  //# sourceMappingURL=url.js.map
  });
  // source: node_modules/crowdcontrol/lib/index.js
  require.define('crowdcontrol/lib', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {
      config: require('crowdcontrol/lib/config'),
      utils: require('crowdcontrol/lib/utils'),
      view: require('crowdcontrol/lib/view'),
      start: function (opts) {
        return require('riot/riot').mount('*')
      },
      Events: require('crowdcontrol/lib/events')
    };
    if (typeof window !== 'undefined' && window !== null) {
      window.crowdcontrol = module.exports
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/config.js
  require.define('crowdcontrol/lib/config', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {}  //# sourceMappingURL=config.js.map
  });
  // source: node_modules/crowdcontrol/lib/utils/index.js
  require.define('crowdcontrol/lib/utils', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {
      log: require('crowdcontrol/lib/utils/log'),
      mediator: require('crowdcontrol/lib/utils/mediator')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/utils/log.js
  require.define('crowdcontrol/lib/utils/log', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var log;
    log = function () {
      if (log.DEBUG) {
        return console.log.apply(console, arguments)
      }
    };
    log.DEBUG = false;
    log.debug = log;
    log.info = function () {
      return console.log.apply(console, arguments)
    };
    log.warn = function () {
      console.log('WARN:');
      return console.log.apply(console, arguments)
    };
    log.error = function () {
      console.log('ERROR:');
      console.log.apply(console, arguments);
      throw new arguments[0]
    };
    module.exports = log  //# sourceMappingURL=log.js.map
  });
  // source: node_modules/crowdcontrol/lib/utils/mediator.js
  require.define('crowdcontrol/lib/utils/mediator', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var riot;
    riot = require('riot/riot');
    module.exports = riot.observable({})  //# sourceMappingURL=mediator.js.map
  });
  // source: node_modules/riot/riot.js
  require.define('riot/riot', function (module, exports, __dirname, __filename) {
    /* Riot v2.2.4, @license MIT, (c) 2015 Muut Inc. + contributors */
    ;
    (function (window, undefined) {
      'use strict';
      var riot = {
          version: 'v2.2.4',
          settings: {}
        },
        //// be aware, internal usage
        // counter to give a unique id to all the Tag instances
        __uid = 0,
        // riot specific prefixes
        RIOT_PREFIX = 'riot-', RIOT_TAG = RIOT_PREFIX + 'tag',
        // for typeof == '' comparisons
        T_STRING = 'string', T_OBJECT = 'object', T_UNDEF = 'undefined', T_FUNCTION = 'function',
        // special native tags that cannot be treated like the others
        SPECIAL_TAGS_REGEX = /^(?:opt(ion|group)|tbody|col|t[rhd])$/, RESERVED_WORDS_BLACKLIST = [
          '_item',
          '_id',
          'update',
          'root',
          'mount',
          'unmount',
          'mixin',
          'isMounted',
          'isLoop',
          'tags',
          'parent',
          'opts',
          'trigger',
          'on',
          'off',
          'one'
        ],
        // version# for IE 8-11, 0 for others
        IE_VERSION = (window && window.document || {}).documentMode | 0,
        // Array.isArray for IE8 is in the polyfills
        isArray = Array.isArray;
      riot.observable = function (el) {
        el = el || {};
        var callbacks = {}, _id = 0;
        el.on = function (events, fn) {
          if (isFunction(fn)) {
            if (typeof fn.id === T_UNDEF)
              fn._id = _id++;
            events.replace(/\S+/g, function (name, pos) {
              (callbacks[name] = callbacks[name] || []).push(fn);
              fn.typed = pos > 0
            })
          }
          return el
        };
        el.off = function (events, fn) {
          if (events == '*')
            callbacks = {};
          else {
            events.replace(/\S+/g, function (name) {
              if (fn) {
                var arr = callbacks[name];
                for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                  if (cb._id == fn._id)
                    arr.splice(i--, 1)
                }
              } else {
                callbacks[name] = []
              }
            })
          }
          return el
        };
        // only single event supported
        el.one = function (name, fn) {
          function on() {
            el.off(name, on);
            fn.apply(el, arguments)
          }
          return el.on(name, on)
        };
        el.trigger = function (name) {
          var args = [].slice.call(arguments, 1), fns = callbacks[name] || [];
          for (var i = 0, fn; fn = fns[i]; ++i) {
            if (!fn.busy) {
              fn.busy = 1;
              fn.apply(el, fn.typed ? [name].concat(args) : args);
              if (fns[i] !== fn) {
                i--
              }
              fn.busy = 0
            }
          }
          if (callbacks.all && name != 'all') {
            el.trigger.apply(el, [
              'all',
              name
            ].concat(args))
          }
          return el
        };
        return el
      };
      riot.mixin = function () {
        var mixins = {};
        return function (name, mixin) {
          if (!mixin)
            return mixins[name];
          mixins[name] = mixin
        }
      }();
      (function (riot, evt, win) {
        // browsers only
        if (!win)
          return;
        var loc = win.location, fns = riot.observable(), started = false, current;
        function hash() {
          return loc.href.split('#')[1] || ''  // why not loc.hash.splice(1) ?
        }
        function parser(path) {
          return path.split('/')
        }
        function emit(path) {
          if (path.type)
            path = hash();
          if (path != current) {
            fns.trigger.apply(null, ['H'].concat(parser(path)));
            current = path
          }
        }
        var r = riot.route = function (arg) {
          // string
          if (arg[0]) {
            loc.hash = arg;
            emit(arg)  // function
          } else {
            fns.on('H', arg)
          }
        };
        r.exec = function (fn) {
          fn.apply(null, parser(hash()))
        };
        r.parser = function (fn) {
          parser = fn
        };
        r.stop = function () {
          if (started) {
            if (win.removeEventListener)
              win.removeEventListener(evt, emit, false)  //@IE8 - the if()
;
            else
              win.detachEvent('on' + evt, emit);
            //@IE8
            fns.off('*');
            started = false
          }
        };
        r.start = function () {
          if (!started) {
            if (win.addEventListener)
              win.addEventListener(evt, emit, false)  //@IE8 - the if()
;
            else
              win.attachEvent('on' + evt, emit);
            //IE8
            started = true
          }
        };
        // autostart the router
        r.start()
      }(riot, 'hashchange', window));
      /*

//// How it works?


Three ways:

1. Expressions: tmpl('{ value }', data).
   Returns the result of evaluated expression as a raw object.

2. Templates: tmpl('Hi { name } { surname }', data).
   Returns a string with evaluated expressions.

3. Filters: tmpl('{ show: !done, highlight: active }', data).
   Returns a space separated list of trueish keys (mainly
   used for setting html classes), e.g. "show highlight".


// Template examples

tmpl('{ title || "Untitled" }', data)
tmpl('Results are { results ? "ready" : "loading" }', data)
tmpl('Today is { new Date() }', data)
tmpl('{ message.length > 140 && "Message is too long" }', data)
tmpl('This item got { Math.round(rating) } stars', data)
tmpl('<h1>{ title }</h1>{ body }', data)


// Falsy expressions in templates

In templates (as opposed to single expressions) all falsy values
except zero (undefined/null/false) will default to empty string:

tmpl('{ undefined } - { false } - { null } - { 0 }', {})
// will return: " - - - 0"

*/
      var brackets = function (orig) {
        var cachedBrackets, r, b, re = /[{}]/g;
        return function (x) {
          // make sure we use the current setting
          var s = riot.settings.brackets || orig;
          // recreate cached vars if needed
          if (cachedBrackets !== s) {
            cachedBrackets = s;
            b = s.split(' ');
            r = b.map(function (e) {
              return e.replace(/(?=.)/g, '\\')
            })
          }
          // if regexp given, rewrite it with current brackets (only if differ from default)
          return x instanceof RegExp ? s === orig ? x : new RegExp(x.source.replace(re, function (b) {
            return r[~~(b === '}')]
          }), x.global ? 'g' : '') : // else, get specific bracket
          b[x]
        }
      }('{ }');
      var tmpl = function () {
        var cache = {}, OGLOB = '"in d?d:' + (window ? 'window).' : 'global).'), reVars = /(['"\/])(?:[^\\]*?|\\.|.)*?\1|\.\w*|\w*:|\b(?:(?:new|typeof|in|instanceof) |(?:this|true|false|null|undefined)\b|function\s*\()|([A-Za-z_$]\w*)/g;
        // build a template (or get it from cache), render with data
        return function (str, data) {
          return str && (cache[str] || (cache[str] = tmpl(str)))(data)
        };
        // create a template instance
        function tmpl(s, p) {
          if (s.indexOf(brackets(0)) < 0) {
            // return raw text
            s = s.replace(/\n|\r\n?/g, '\n');
            return function () {
              return s
            }
          }
          // temporarily convert \{ and \} to a non-character
          s = s.replace(brackets(/\\{/g), '￰').replace(brackets(/\\}/g), '￱');
          // split string to expression and non-expresion parts
          p = split(s, extract(s, brackets(/{/), brackets(/}/)));
          // is it a single expression or a template? i.e. {x} or <b>{x}</b>
          s = p.length === 2 && !p[0] ? // if expression, evaluate it
          expr(p[1]) : // if template, evaluate all expressions in it
          '[' + p.map(function (s, i) {
            // is it an expression or a string (every second part is an expression)
            return i % 2 ? // evaluate the expressions
            expr(s, true) : // process string parts of the template:
            '"' + s  // preserve new lines
.replace(/\n|\r\n?/g, '\\n')  // escape quotes
.replace(/"/g, '\\"') + '"'
          }).join(',') + '].join("")';
          return new Function('d', 'return ' + s  // bring escaped { and } back
.replace(/\uFFF0/g, brackets(0)).replace(/\uFFF1/g, brackets(1)) + ';')
        }
        // parse { ... } expression
        function expr(s, n) {
          s = s  // convert new lines to spaces
.replace(/\n|\r\n?/g, ' ')  // trim whitespace, brackets, strip comments
.replace(brackets(/^[{ ]+|[ }]+$|\/\*.+?\*\//g), '');
          // is it an object literal? i.e. { key : value }
          return /^\s*[\w- "']+ *:/.test(s) ? // if object literal, return trueish keys
          // e.g.: { show: isOpen(), done: item.done } -> "show done"
          '[' + // extract key:val pairs, ignoring any nested objects
          extract(s, // name part: name:, "name":, 'name':, name :
          /["' ]*[\w- ]+["' ]*:/, // expression part: everything upto a comma followed by a name (see above) or end of line
          /,(?=["' ]*[\w- ]+["' ]*:)|}|$/).map(function (pair) {
            // get key, val parts
            return pair.replace(/^[ "']*(.+?)[ "']*: *(.+?),? *$/, function (_, k, v) {
              // wrap all conditional parts to ignore errors
              return v.replace(/[^&|=!><]+/g, wrap) + '?"' + k + '":"",'
            })
          }).join('') + '].join(" ").trim()' : // if js expression, evaluate as javascript
          wrap(s, n)
        }
        // execute js w/o breaking on errors or undefined vars
        function wrap(s, nonull) {
          s = s.trim();
          return !s ? '' : '(function(v){try{v=' + // prefix vars (name => data.name)
          s.replace(reVars, function (s, _, v) {
            return v ? '(("' + v + OGLOB + v + ')' : s
          }) + // default to empty string for falsy values except zero
          '}catch(e){}return ' + (nonull === true ? '!v&&v!==0?"":v' : 'v') + '}).call(d)'
        }
        // split string by an array of substrings
        function split(str, substrings) {
          var parts = [];
          substrings.map(function (sub, i) {
            // push matched expression and part before it
            i = str.indexOf(sub);
            parts.push(str.slice(0, i), sub);
            str = str.slice(i + sub.length)
          });
          if (str)
            parts.push(str);
          // push the remaining part
          return parts
        }
        // match strings between opening and closing regexp, skipping any inner/nested matches
        function extract(str, open, close) {
          var start, level = 0, matches = [], re = new RegExp('(' + open.source + ')|(' + close.source + ')', 'g');
          str.replace(re, function (_, open, close, pos) {
            // if outer inner bracket, mark position
            if (!level && open)
              start = pos;
            // in(de)crease bracket level
            level += open ? 1 : -1;
            // if outer closing bracket, grab the match
            if (!level && close != null)
              matches.push(str.slice(start, pos + close.length))
          });
          return matches
        }
      }();
      /*
  lib/browser/tag/mkdom.js

  Includes hacks needed for the Internet Explorer version 9 and bellow

*/
      // http://kangax.github.io/compat-table/es5/#ie8
      // http://codeplanet.io/dropping-ie8/
      var mkdom = function (checkIE) {
        var rootEls = {
            'tr': 'tbody',
            'th': 'tr',
            'td': 'tr',
            'tbody': 'table',
            'col': 'colgroup'
          }, GENERIC = 'div';
        checkIE = checkIE && checkIE < 10;
        // creates any dom element in a div, table, or colgroup container
        function _mkdom(html) {
          var match = html && html.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), rootTag = rootEls[tagName] || GENERIC, el = mkEl(rootTag);
          el.stub = true;
          if (checkIE && tagName && (match = tagName.match(SPECIAL_TAGS_REGEX)))
            ie9elem(el, html, tagName, !!match[1]);
          else
            el.innerHTML = html;
          return el
        }
        // creates tr, th, td, option, optgroup element for IE8-9
        /* istanbul ignore next */
        function ie9elem(el, html, tagName, select) {
          var div = mkEl(GENERIC), tag = select ? 'select>' : 'table>', child;
          div.innerHTML = '<' + tag + html + '</' + tag;
          child = div.getElementsByTagName(tagName)[0];
          if (child)
            el.appendChild(child)
        }
        // end ie9elem()
        return _mkdom
      }(IE_VERSION);
      // { key, i in items} -> { key, i, items }
      function loopKeys(expr) {
        var b0 = brackets(0), els = expr.trim().slice(b0.length).match(/^\s*(\S+?)\s*(?:,\s*(\S+))?\s+in\s+(.+)$/);
        return els ? {
          key: els[1],
          pos: els[2],
          val: b0 + els[3]
        } : { val: expr }
      }
      function mkitem(expr, key, val) {
        var item = {};
        item[expr.key] = key;
        if (expr.pos)
          item[expr.pos] = val;
        return item
      }
      /* Beware: heavy stuff */
      function _each(dom, parent, expr) {
        remAttr(dom, 'each');
        var tagName = getTagName(dom), template = dom.outerHTML, hasImpl = !!tagImpl[tagName], impl = tagImpl[tagName] || { tmpl: template }, root = dom.parentNode, placeholder = document.createComment('riot placeholder'), tags = [], child = getTag(dom), checksum;
        root.insertBefore(placeholder, dom);
        expr = loopKeys(expr);
        // clean template code
        parent.one('premount', function () {
          if (root.stub)
            root = parent.root;
          // remove the original DOM node
          dom.parentNode.removeChild(dom)
        }).on('update', function () {
          var items = tmpl(expr.val, parent);
          // object loop. any changes cause full redraw
          if (!isArray(items)) {
            checksum = items ? JSON.stringify(items) : '';
            items = !items ? [] : Object.keys(items).map(function (key) {
              return mkitem(expr, key, items[key])
            })
          }
          var frag = document.createDocumentFragment(), i = tags.length, j = items.length;
          // unmount leftover items
          while (i > j) {
            tags[--i].unmount();
            tags.splice(i, 1)
          }
          for (i = 0; i < j; ++i) {
            var _item = !checksum && !!expr.key ? mkitem(expr, items[i], i) : items[i];
            if (!tags[i]) {
              // mount new
              (tags[i] = new Tag(impl, {
                parent: parent,
                isLoop: true,
                hasImpl: hasImpl,
                root: SPECIAL_TAGS_REGEX.test(tagName) ? root : dom.cloneNode(),
                item: _item
              }, dom.innerHTML)).mount();
              frag.appendChild(tags[i].root)
            } else
              tags[i].update(_item);
            tags[i]._item = _item
          }
          root.insertBefore(frag, placeholder);
          if (child)
            parent.tags[tagName] = tags
        }).one('updated', function () {
          var keys = Object.keys(parent);
          // only set new values
          walk(root, function (node) {
            // only set element node and not isLoop
            if (node.nodeType == 1 && !node.isLoop && !node._looped) {
              node._visited = false;
              // reset _visited for loop node
              node._looped = true;
              // avoid set multiple each
              setNamed(node, parent, keys)
            }
          })
        })
      }
      function parseNamedElements(root, tag, childTags) {
        walk(root, function (dom) {
          if (dom.nodeType == 1) {
            dom.isLoop = dom.isLoop || (dom.parentNode && dom.parentNode.isLoop || dom.getAttribute('each')) ? 1 : 0;
            // custom child tag
            var child = getTag(dom);
            if (child && !dom.isLoop) {
              childTags.push(initChildTag(child, dom, tag))
            }
            if (!dom.isLoop)
              setNamed(dom, tag, [])
          }
        })
      }
      function parseExpressions(root, tag, expressions) {
        function addExpr(dom, val, extra) {
          if (val.indexOf(brackets(0)) >= 0) {
            var expr = {
              dom: dom,
              expr: val
            };
            expressions.push(extend(expr, extra))
          }
        }
        walk(root, function (dom) {
          var type = dom.nodeType;
          // text node
          if (type == 3 && dom.parentNode.tagName != 'STYLE')
            addExpr(dom, dom.nodeValue);
          if (type != 1)
            return;
          /* element */
          // loop
          var attr = dom.getAttribute('each');
          if (attr) {
            _each(dom, tag, attr);
            return false
          }
          // attribute expressions
          each(dom.attributes, function (attr) {
            var name = attr.name, bool = name.split('__')[1];
            addExpr(dom, attr.value, {
              attr: bool || name,
              bool: bool
            });
            if (bool) {
              remAttr(dom, name);
              return false
            }
          });
          // skip custom tags
          if (getTag(dom))
            return false
        })
      }
      function Tag(impl, conf, innerHTML) {
        var self = riot.observable(this), opts = inherit(conf.opts) || {}, dom = mkdom(impl.tmpl), parent = conf.parent, isLoop = conf.isLoop, hasImpl = conf.hasImpl, item = cleanUpData(conf.item), expressions = [], childTags = [], root = conf.root, fn = impl.fn, tagName = root.tagName.toLowerCase(), attr = {}, propsInSyncWithParent = [];
        if (fn && root._tag) {
          root._tag.unmount(true)
        }
        // not yet mounted
        this.isMounted = false;
        root.isLoop = isLoop;
        // keep a reference to the tag just created
        // so we will be able to mount this tag multiple times
        root._tag = this;
        // create a unique id to this tag
        // it could be handy to use it also to improve the virtual dom rendering speed
        this._id = __uid++;
        extend(this, {
          parent: parent,
          root: root,
          opts: opts,
          tags: {}
        }, item);
        // grab attributes
        each(root.attributes, function (el) {
          var val = el.value;
          // remember attributes with expressions only
          if (brackets(/{.*}/).test(val))
            attr[el.name] = val
        });
        if (dom.innerHTML && !/^(select|optgroup|table|tbody|tr|col(?:group)?)$/.test(tagName))
          // replace all the yield tags with the tag inner html
          dom.innerHTML = replaceYield(dom.innerHTML, innerHTML);
        // options
        function updateOpts() {
          var ctx = hasImpl && isLoop ? self : parent || self;
          // update opts from current DOM attributes
          each(root.attributes, function (el) {
            opts[el.name] = tmpl(el.value, ctx)
          });
          // recover those with expressions
          each(Object.keys(attr), function (name) {
            opts[name] = tmpl(attr[name], ctx)
          })
        }
        function normalizeData(data) {
          for (var key in item) {
            if (typeof self[key] !== T_UNDEF)
              self[key] = data[key]
          }
        }
        function inheritFromParent() {
          if (!self.parent || !isLoop)
            return;
          each(Object.keys(self.parent), function (k) {
            // some properties must be always in sync with the parent tag
            var mustSync = !~RESERVED_WORDS_BLACKLIST.indexOf(k) && ~propsInSyncWithParent.indexOf(k);
            if (typeof self[k] === T_UNDEF || mustSync) {
              // track the property to keep in sync
              // so we can keep it updated
              if (!mustSync)
                propsInSyncWithParent.push(k);
              self[k] = self.parent[k]
            }
          })
        }
        this.update = function (data) {
          // make sure the data passed will not override
          // the component core methods
          data = cleanUpData(data);
          // inherit properties from the parent
          inheritFromParent();
          // normalize the tag properties in case an item object was initially passed
          if (data && typeof item === T_OBJECT) {
            normalizeData(data);
            item = data
          }
          extend(self, data);
          updateOpts();
          self.trigger('update', data);
          update(expressions, self);
          self.trigger('updated')
        };
        this.mixin = function () {
          each(arguments, function (mix) {
            mix = typeof mix === T_STRING ? riot.mixin(mix) : mix;
            each(Object.keys(mix), function (key) {
              // bind methods to self
              if (key != 'init')
                self[key] = isFunction(mix[key]) ? mix[key].bind(self) : mix[key]
            });
            // init method will be called automatically
            if (mix.init)
              mix.init.bind(self)()
          })
        };
        this.mount = function () {
          updateOpts();
          // initialiation
          if (fn)
            fn.call(self, opts);
          // parse layout after init. fn may calculate args for nested custom tags
          parseExpressions(dom, self, expressions);
          // mount the child tags
          toggle(true);
          // update the root adding custom attributes coming from the compiler
          // it fixes also #1087
          if (impl.attrs || hasImpl) {
            walkAttributes(impl.attrs, function (k, v) {
              root.setAttribute(k, v)
            });
            parseExpressions(self.root, self, expressions)
          }
          if (!self.parent || isLoop)
            self.update(item);
          // internal use only, fixes #403
          self.trigger('premount');
          if (isLoop && !hasImpl) {
            // update the root attribute for the looped elements
            self.root = root = dom.firstChild
          } else {
            while (dom.firstChild)
              root.appendChild(dom.firstChild);
            if (root.stub)
              self.root = root = parent.root
          }
          // if it's not a child tag we can trigger its mount event
          if (!self.parent || self.parent.isMounted) {
            self.isMounted = true;
            self.trigger('mount')
          }  // otherwise we need to wait that the parent event gets triggered
          else
            self.parent.one('mount', function () {
              // avoid to trigger the `mount` event for the tags
              // not visible included in an if statement
              if (!isInStub(self.root)) {
                self.parent.isMounted = self.isMounted = true;
                self.trigger('mount')
              }
            })
        };
        this.unmount = function (keepRootTag) {
          var el = root, p = el.parentNode, ptag;
          if (p) {
            if (parent) {
              ptag = getImmediateCustomParentTag(parent);
              // remove this tag from the parent tags object
              // if there are multiple nested tags with same name..
              // remove this element form the array
              if (isArray(ptag.tags[tagName]))
                each(ptag.tags[tagName], function (tag, i) {
                  if (tag._id == self._id)
                    ptag.tags[tagName].splice(i, 1)
                });
              else
                // otherwise just delete the tag instance
                ptag.tags[tagName] = undefined
            } else
              while (el.firstChild)
                el.removeChild(el.firstChild);
            if (!keepRootTag)
              p.removeChild(el);
            else
              // the riot-tag attribute isn't needed anymore, remove it
              p.removeAttribute('riot-tag')
          }
          self.trigger('unmount');
          toggle();
          self.off('*');
          // somehow ie8 does not like `delete root._tag`
          root._tag = null
        };
        function toggle(isMount) {
          // mount/unmount children
          each(childTags, function (child) {
            child[isMount ? 'mount' : 'unmount']()
          });
          // listen/unlisten parent (events flow one way from parent to children)
          if (parent) {
            var evt = isMount ? 'on' : 'off';
            // the loop tags will be always in sync with the parent automatically
            if (isLoop)
              parent[evt]('unmount', self.unmount);
            else
              parent[evt]('update', self.update)[evt]('unmount', self.unmount)
          }
        }
        // named elements available for fn
        parseNamedElements(dom, this, childTags)
      }
      function setEventHandler(name, handler, dom, tag) {
        dom[name] = function (e) {
          var item = tag._item, ptag = tag.parent, el;
          if (!item)
            while (ptag && !item) {
              item = ptag._item;
              ptag = ptag.parent
            }
          // cross browser event fix
          e = e || window.event;
          // ignore error on some browsers
          try {
            e.currentTarget = dom;
            if (!e.target)
              e.target = e.srcElement;
            if (!e.which)
              e.which = e.charCode || e.keyCode
          } catch (ignored) {
          }
          e.item = item;
          // prevent default behaviour (by default)
          if (handler.call(tag, e) !== true && !/radio|check/.test(dom.type)) {
            if (e.preventDefault)
              e.preventDefault();
            e.returnValue = false
          }
          if (!e.preventUpdate) {
            el = item ? getImmediateCustomParentTag(ptag) : tag;
            el.update()
          }
        }
      }
      // used by if- attribute
      function insertTo(root, node, before) {
        if (root) {
          root.insertBefore(before, node);
          root.removeChild(node)
        }
      }
      function update(expressions, tag) {
        each(expressions, function (expr, i) {
          var dom = expr.dom, attrName = expr.attr, value = tmpl(expr.expr, tag), parent = expr.dom.parentNode;
          if (expr.bool)
            value = value ? attrName : false;
          else if (value == null)
            value = '';
          // leave out riot- prefixes from strings inside textarea
          // fix #815: any value -> string
          if (parent && parent.tagName == 'TEXTAREA')
            value = ('' + value).replace(/riot-/g, '');
          // no change
          if (expr.value === value)
            return;
          expr.value = value;
          // text node
          if (!attrName) {
            dom.nodeValue = '' + value;
            // #815 related
            return
          }
          // remove original attribute
          remAttr(dom, attrName);
          // event handler
          if (isFunction(value)) {
            setEventHandler(attrName, value, dom, tag)  // if- conditional
          } else if (attrName == 'if') {
            var stub = expr.stub, add = function () {
                insertTo(stub.parentNode, stub, dom)
              }, remove = function () {
                insertTo(dom.parentNode, dom, stub)
              };
            // add to DOM
            if (value) {
              if (stub) {
                add();
                dom.inStub = false;
                // avoid to trigger the mount event if the tags is not visible yet
                // maybe we can optimize this avoiding to mount the tag at all
                if (!isInStub(dom)) {
                  walk(dom, function (el) {
                    if (el._tag && !el._tag.isMounted)
                      el._tag.isMounted = !!el._tag.trigger('mount')
                  })
                }
              }  // remove from DOM
            } else {
              stub = expr.stub = stub || document.createTextNode('');
              // if the parentNode is defined we can easily replace the tag
              if (dom.parentNode)
                remove();
              else
                // otherwise we need to wait the updated event
                (tag.parent || tag).one('updated', remove);
              dom.inStub = true
            }  // show / hide
          } else if (/^(show|hide)$/.test(attrName)) {
            if (attrName == 'hide')
              value = !value;
            dom.style.display = value ? '' : 'none'  // field value
          } else if (attrName == 'value') {
            dom.value = value  // <img src="{ expr }">
          } else if (startsWith(attrName, RIOT_PREFIX) && attrName != RIOT_TAG) {
            if (value)
              dom.setAttribute(attrName.slice(RIOT_PREFIX.length), value)
          } else {
            if (expr.bool) {
              dom[attrName] = value;
              if (!value)
                return
            }
            if (typeof value !== T_OBJECT)
              dom.setAttribute(attrName, value)
          }
        })
      }
      function each(els, fn) {
        for (var i = 0, len = (els || []).length, el; i < len; i++) {
          el = els[i];
          // return false -> remove current item during loop
          if (el != null && fn(el, i) === false)
            i--
        }
        return els
      }
      function isFunction(v) {
        return typeof v === T_FUNCTION || false  // avoid IE problems
      }
      function remAttr(dom, name) {
        dom.removeAttribute(name)
      }
      function getTag(dom) {
        return dom.tagName && tagImpl[dom.getAttribute(RIOT_TAG) || dom.tagName.toLowerCase()]
      }
      function initChildTag(child, dom, parent) {
        var tag = new Tag(child, {
            root: dom,
            parent: parent
          }, dom.innerHTML), tagName = getTagName(dom), ptag = getImmediateCustomParentTag(parent), cachedTag;
        // fix for the parent attribute in the looped elements
        tag.parent = ptag;
        cachedTag = ptag.tags[tagName];
        // if there are multiple children tags having the same name
        if (cachedTag) {
          // if the parent tags property is not yet an array
          // create it adding the first cached tag
          if (!isArray(cachedTag))
            ptag.tags[tagName] = [cachedTag];
          // add the new nested tag to the array
          if (!~ptag.tags[tagName].indexOf(tag))
            ptag.tags[tagName].push(tag)
        } else {
          ptag.tags[tagName] = tag
        }
        // empty the child node once we got its template
        // to avoid that its children get compiled multiple times
        dom.innerHTML = '';
        return tag
      }
      function getImmediateCustomParentTag(tag) {
        var ptag = tag;
        while (!getTag(ptag.root)) {
          if (!ptag.parent)
            break;
          ptag = ptag.parent
        }
        return ptag
      }
      function getTagName(dom) {
        var child = getTag(dom), namedTag = dom.getAttribute('name'), tagName = namedTag && namedTag.indexOf(brackets(0)) < 0 ? namedTag : child ? child.name : dom.tagName.toLowerCase();
        return tagName
      }
      function extend(src) {
        var obj, args = arguments;
        for (var i = 1; i < args.length; ++i) {
          if (obj = args[i]) {
            for (var key in obj) {
              // eslint-disable-line guard-for-in
              src[key] = obj[key]
            }
          }
        }
        return src
      }
      // with this function we avoid that the current Tag methods get overridden
      function cleanUpData(data) {
        if (!(data instanceof Tag) && !(data && typeof data.trigger == T_FUNCTION))
          return data;
        var o = {};
        for (var key in data) {
          if (!~RESERVED_WORDS_BLACKLIST.indexOf(key))
            o[key] = data[key]
        }
        return o
      }
      function walk(dom, fn) {
        if (dom) {
          if (fn(dom) === false)
            return;
          else {
            dom = dom.firstChild;
            while (dom) {
              walk(dom, fn);
              dom = dom.nextSibling
            }
          }
        }
      }
      // minimize risk: only zero or one _space_ between attr & value
      function walkAttributes(html, fn) {
        var m, re = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
        while (m = re.exec(html)) {
          fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
        }
      }
      function isInStub(dom) {
        while (dom) {
          if (dom.inStub)
            return true;
          dom = dom.parentNode
        }
        return false
      }
      function mkEl(name) {
        return document.createElement(name)
      }
      function replaceYield(tmpl, innerHTML) {
        return tmpl.replace(/<(yield)\/?>(<\/\1>)?/gi, innerHTML || '')
      }
      function $$(selector, ctx) {
        return (ctx || document).querySelectorAll(selector)
      }
      function $(selector, ctx) {
        return (ctx || document).querySelector(selector)
      }
      function inherit(parent) {
        function Child() {
        }
        Child.prototype = parent;
        return new Child
      }
      function setNamed(dom, parent, keys) {
        if (dom._visited)
          return;
        var p, v = dom.getAttribute('id') || dom.getAttribute('name');
        if (v) {
          if (keys.indexOf(v) < 0) {
            p = parent[v];
            if (!p)
              parent[v] = dom;
            else if (isArray(p))
              p.push(dom);
            else
              parent[v] = [
                p,
                dom
              ]
          }
          dom._visited = true
        }
      }
      // faster String startsWith alternative
      function startsWith(src, str) {
        return src.slice(0, str.length) === str
      }
      /*
 Virtual dom is an array of custom tags on the document.
 Updates and unmounts propagate downwards from parent to children.
*/
      var virtualDom = [], tagImpl = {}, styleNode;
      function injectStyle(css) {
        if (riot.render)
          return;
        // skip injection on the server
        if (!styleNode) {
          styleNode = mkEl('style');
          styleNode.setAttribute('type', 'text/css')
        }
        var head = document.head || document.getElementsByTagName('head')[0];
        if (styleNode.styleSheet)
          styleNode.styleSheet.cssText += css;
        else
          styleNode.innerHTML += css;
        if (!styleNode._rendered)
          if (styleNode.styleSheet) {
            document.body.appendChild(styleNode)
          } else {
            var rs = $('style[type=riot]');
            if (rs) {
              rs.parentNode.insertBefore(styleNode, rs);
              rs.parentNode.removeChild(rs)
            } else
              head.appendChild(styleNode)
          }
        styleNode._rendered = true
      }
      function mountTo(root, tagName, opts) {
        var tag = tagImpl[tagName],
          // cache the inner HTML to fix #855
          innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
        // clear the inner html
        root.innerHTML = '';
        if (tag && root)
          tag = new Tag(tag, {
            root: root,
            opts: opts
          }, innerHTML);
        if (tag && tag.mount) {
          tag.mount();
          virtualDom.push(tag);
          return tag.on('unmount', function () {
            virtualDom.splice(virtualDom.indexOf(tag), 1)
          })
        }
      }
      riot.tag = function (name, html, css, attrs, fn) {
        if (isFunction(attrs)) {
          fn = attrs;
          if (/^[\w\-]+\s?=/.test(css)) {
            attrs = css;
            css = ''
          } else
            attrs = ''
        }
        if (css) {
          if (isFunction(css))
            fn = css;
          else
            injectStyle(css)
        }
        tagImpl[name] = {
          name: name,
          tmpl: html,
          attrs: attrs,
          fn: fn
        };
        return name
      };
      riot.mount = function (selector, tagName, opts) {
        var els, allTags, tags = [];
        // helper functions
        function addRiotTags(arr) {
          var list = '';
          each(arr, function (e) {
            list += ', *[' + RIOT_TAG + '="' + e.trim() + '"]'
          });
          return list
        }
        function selectAllTags() {
          var keys = Object.keys(tagImpl);
          return keys + addRiotTags(keys)
        }
        function pushTags(root) {
          var last;
          if (root.tagName) {
            if (tagName && (!(last = root.getAttribute(RIOT_TAG)) || last != tagName))
              root.setAttribute(RIOT_TAG, tagName);
            var tag = mountTo(root, tagName || root.getAttribute(RIOT_TAG) || root.tagName.toLowerCase(), opts);
            if (tag)
              tags.push(tag)
          } else if (root.length) {
            each(root, pushTags)  // assume nodeList
          }
        }
        // ----- mount code -----
        if (typeof tagName === T_OBJECT) {
          opts = tagName;
          tagName = 0
        }
        // crawl the DOM to find the tag
        if (typeof selector === T_STRING) {
          if (selector === '*')
            // select all the tags registered
            // and also the tags found with the riot-tag attribute set
            selector = allTags = selectAllTags();
          else
            // or just the ones named like the selector
            selector += addRiotTags(selector.split(','));
          els = $$(selector)
        } else
          // probably you have passed already a tag or a NodeList
          els = selector;
        // select all the registered and mount them inside their root elements
        if (tagName === '*') {
          // get all custom tags
          tagName = allTags || selectAllTags();
          // if the root els it's just a single tag
          if (els.tagName)
            els = $$(tagName, els);
          else {
            // select all the children for all the different root elements
            var nodeList = [];
            each(els, function (_el) {
              nodeList.push($$(tagName, _el))
            });
            els = nodeList
          }
          // get rid of the tagName
          tagName = 0
        }
        if (els.tagName)
          pushTags(els);
        else
          each(els, pushTags);
        return tags
      };
      // update everything
      riot.update = function () {
        return each(virtualDom, function (tag) {
          tag.update()
        })
      };
      // @deprecated
      riot.mountTo = riot.mount;
      // share methods for other riot parts, e.g. compiler
      riot.util = {
        brackets: brackets,
        tmpl: tmpl
      };
      // support CommonJS, AMD & browser
      /* istanbul ignore next */
      if (typeof exports === T_OBJECT)
        module.exports = riot;
      else if (typeof define === 'function' && define.amd)
        define(function () {
          return window.riot = riot
        });
      else
        window.riot = riot
    }(typeof window != 'undefined' ? window : void 0))
  });
  // source: node_modules/crowdcontrol/lib/view/index.js
  require.define('crowdcontrol/lib/view', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {
      form: require('crowdcontrol/lib/view/form'),
      View: require('crowdcontrol/lib/view/view')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/view/form.js
  require.define('crowdcontrol/lib/view/form', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var Events, FormView, Input, InputCondition, InputConfig, InputView, Promise, ValidatorCondition, View, helpers, isArray, isFunction, isNumber, isObject, log, riot, tokenize, traverse, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Promise = require('broken/lib');
    isArray = require('is-array');
    isFunction = require('is-function');
    isNumber = require('is-number');
    isObject = require('is-object');
    riot = require('riot/riot');
    Events = require('crowdcontrol/lib/events');
    View = require('crowdcontrol/lib/view/view');
    log = require('crowdcontrol/lib/utils/log');
    tokenize = function (str) {
      var dict, j, k, len, ref, token, tokens, v;
      tokens = str.split(' ');
      dict = {};
      for (j = 0, len = tokens.length; j < len; j++) {
        token = tokens[j];
        if (token.indexOf(':') >= 0) {
          ref = token.split(':'), k = ref[0], v = ref[1];
          dict[k] = v
        } else {
          dict[token] = true
        }
      }
      return dict
    };
    InputConfig = function () {
      InputConfig.prototype.name = '';
      InputConfig.prototype['default'] = '';
      InputConfig.prototype.placeholder = '';
      InputConfig.prototype.hints = null;
      function InputConfig(name1, _default, placeholder, hints) {
        this.name = name1;
        this['default'] = _default != null ? _default : '';
        this.placeholder = placeholder != null ? placeholder : '';
        if (hints == null) {
          hints = ''
        }
        this.hints = tokenize(hints)
      }
      return InputConfig
    }();
    Input = function () {
      Input.prototype.tag = '';
      Input.prototype.model = {};
      Input.prototype.validator = function () {
      };
      Input.prototype.obs = null;
      function Input(tag1, model1, validator1) {
        this.tag = tag1;
        this.model = model1;
        this.validator = validator1
      }
      return Input
    }();
    ValidatorCondition = function () {
      function ValidatorCondition(predicate1, validatorFn1) {
        this.predicate = predicate1;
        this.validatorFn = validatorFn1
      }
      return ValidatorCondition
    }();
    InputCondition = function () {
      function InputCondition(predicate1, tagName1) {
        this.predicate = predicate1;
        this.tagName = tagName1
      }
      return InputCondition
    }();
    helpers = {
      tagLookup: [],
      validatorLookup: [],
      defaultTagName: 'form-input',
      errorTag: 'form-error',
      registerValidator: function (predicate, validatorFn) {
        if (isFunction(validatorFn)) {
          return this.validatorLookup.push(new ValidatorCondition(predicate, validatorFn))
        }
      },
      registerTag: function (predicate, tagName) {
        return this.tagLookup.push(new InputCondition(predicate, tagName))
      },
      deleteTag: function (tagName) {
        var i, j, len, lookup, ref, results1;
        ref = this.tagLookup;
        results1 = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          lookup = ref[i];
          if (lookup.tagName === tagName) {
            results1.push(this.tagLookup[i] = null)
          } else {
            results1.push(void 0)
          }
        }
        return results1
      },
      deleteValidator: function (predicate, validatorFn) {
        var i, j, len, lookup, ref, results1;
        ref = this.validatorLookup;
        results1 = [];
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          lookup = ref[i];
          if (lookup.validatorFn === validatorFn) {
            results1.push(this.validatorLookup[i] = null)
          } else {
            results1.push(void 0)
          }
        }
        return results1
      },
      render: function (inputCfgs) {
        var fn1, i, inputCfg, inputs, j, len, validators;
        inputs = {};
        fn1 = function (_this) {
          return function (validators, inputCfg) {
            var found, l, len1, len2, lookup, m, model, ref, ref1, tag, validator, validatorFn;
            ref = _this.validatorLookup;
            for (l = 0, len1 = ref.length; l < len1; l++) {
              lookup = ref[l];
              if (lookup.predicate(inputCfg)) {
                validatorFn = lookup.validatorFn;
                (function (validatorFn) {
                  return validators.push(function (pair) {
                    var model, name, p;
                    model = pair[0], name = pair[1];
                    p = new Promise(function (resolve, reject) {
                      return resolve(pair)
                    });
                    return p.then(function (pair) {
                      return validatorFn.call(inputCfg, pair[0], pair[1])
                    }).then(function (v) {
                      model[name] = v;
                      return new Promise(function (resolve, reject) {
                        return resolve(pair)
                      })
                    })
                  })
                }(validatorFn))
              }
            }
            validators.push(function (pair) {
              var model, name;
              model = pair[0], name = pair[1];
              return new Promise(function (resolve, reject) {
                return resolve(model[name])
              })
            });
            validator = function (model, name) {
              var len2, m, p;
              p = new Promise(function (resolve, reject) {
                return resolve([
                  model,
                  name
                ])
              });
              for (m = 0, len2 = validators.length; m < len2; m++) {
                validatorFn = validators[m];
                p = p.then(validatorFn)
              }
              return p
            };
            found = false;
            ref1 = _this.tagLookup;
            for (m = 0, len2 = ref1.length; m < len2; m++) {
              lookup = ref1[m];
              if (lookup == null) {
                continue
              }
              if (lookup.predicate(inputCfg)) {
                tag = lookup.tagName;
                found = true;
                break
              }
            }
            if (!found) {
              tag = _this.defaultTagName
            }
            model = {
              name: inputCfg.name,
              value: inputCfg['default'],
              placeholder: inputCfg.placeholder,
              cfg: inputCfg
            };
            return inputs[inputCfg.name] = new Input(tag, model, validator)
          }
        }(this);
        for (i = j = 0, len = inputCfgs.length; j < len; i = ++j) {
          inputCfg = inputCfgs[i];
          if (inputCfg == null) {
            continue
          }
          validators = [];
          fn1(validators, inputCfg)
        }
        return inputs
      }
    };
    Events.Input = {
      Result: 'input-result',
      Get: 'input-get',
      Set: 'input-set',
      Change: 'input-change',
      Error: 'input-error',
      ClearError: 'input-clear-error'
    };
    InputView = function (superClass) {
      var obj1;
      extend(InputView, superClass);
      function InputView() {
        return InputView.__super__.constructor.apply(this, arguments)
      }
      InputView.prototype.getValue = function (el) {
        return el.value
      };
      InputView.prototype.errorHtml = '<div class="error-container" if="{ hasError() }">\n  <div class="error-message">{ error }</div>\n</div>';
      InputView.prototype.init = function () {
        return this.html += this.errorHtml
      };
      InputView.prototype.events = (obj1 = {}, obj1['' + Events.Input.Set] = function () {
        return this._set.apply(this, arguments)
      }, obj1['' + Events.Input.Error] = function () {
        return this._error.apply(this, arguments)
      }, obj1['' + Events.Input.ClearError] = function () {
        return this._clearError.apply(this, arguments)
      }, obj1);
      InputView.prototype._clearError = function (name) {
        if (name === this.model.name) {
          this.clearError();
          return this.update()
        }
      };
      InputView.prototype._error = function (name, message) {
        if (name === this.model.name) {
          this.setError(message);
          return this.update()
        }
      };
      InputView.prototype._set = function (name, value) {
        if (name === this.model.name) {
          this.clearError();
          this.model.value = value;
          return this.update()
        }
      };
      InputView.prototype.change = function (event) {
        var value;
        value = this.getValue(event.target);
        if (value === '' || value !== this.model.value) {
          this.obs.trigger(Events.Input.Change, this.model.name, value)
        }
        return this.model.value = value
      };
      InputView.prototype.hasError = function () {
        var error;
        error = this.error;
        return error != null && error.length != null && error.length > 0
      };
      InputView.prototype.setError = function (message) {
        return this.error = message
      };
      InputView.prototype.clearError = function () {
        return this.setError(null)
      };
      InputView.prototype.js = function (opts) {
        return this.model = opts.input.model
      };
      return InputView
    }(View);
    riot.tag('control', '', function (opts) {
      var input;
      input = opts.input;
      if (input != null) {
        opts.obs = input.obs;
        return riot.mount(this.root, input.tag, opts)
      }
    });
    Events.Form = {
      SubmitSuccess: 'form-submit-success',
      SubmitFailed: 'form-submit-failed'
    };
    FormView = function (superClass) {
      var obj1;
      extend(FormView, superClass);
      function FormView() {
        return FormView.__super__.constructor.apply(this, arguments)
      }
      FormView.prototype.inputConfigs = null;
      FormView.prototype.events = (obj1 = {}, obj1['' + Events.Input.Get] = function () {
        return this._result.apply(this, arguments)
      }, obj1['' + Events.Input.Change] = function () {
        return this._change.apply(this, arguments)
      }, obj1);
      FormView.prototype._change = function (name, newValue) {
        var input, lastName, model, ref;
        this.fullyValidated = false;
        ref = this._set(this.model, name, newValue), model = ref[0], lastName = ref[1];
        input = this.inputs[name];
        if (input != null) {
          return input.validator(model, lastName).then(function (_this) {
            return function (value) {
              return _this.obs.trigger(Events.Input.Set, name, value)
            }
          }(this))['catch'](function (_this) {
            return function (err) {
              log('Validation error has occured', err.stack);
              return _this.obs.trigger(Events.Input.Error, name, err.message)
            }
          }(this))
        }
      };
      FormView.prototype._result = function (name) {
        return this.obs.trigger(Events.Input.Result, this._get(this.model, name))
      };
      FormView.prototype._submit = function (event) {
      };
      FormView.prototype.submit = function (event) {
        var input, lastName, model, name, names, promises, ref, ref1;
        if (event != null) {
          event.preventDefault()
        }
        if (this.fullyValidated) {
          this._submit(event);
          return
        }
        names = [];
        promises = [];
        ref = this.inputs;
        for (name in ref) {
          input = ref[name];
          names.push(name);
          ref1 = this._find(this.model, name), model = ref1[0], lastName = ref1[1];
          promises.push(input.validator(model, lastName))
        }
        return Promise.settle(promises).then(function (_this) {
          return function (results) {
            var i, j, len, rejected, result;
            rejected = false;
            for (i = j = 0, len = results.length; j < len; i = ++j) {
              result = results[i];
              if (result.isRejected()) {
                rejected = true;
                _this.obs.trigger(Events.Input.Error, names[i], result.reason().message)
              }
            }
            if (rejected) {
              _this.obs.trigger(Events.Form.SubmitFailed, _this.model);
              return
            }
            _this.fullyValidated = true;
            _this.obs.trigger(Events.Form.SubmitSuccess, _this.model);
            return _this._submit(event)
          }
        }(this))
      };
      FormView.prototype._get = function (model, path) {
        var currentObject, j, len, name, names;
        names = path.split('.');
        if (names.length === 1) {
          return model[path]
        }
        currentObject = model;
        for (j = 0, len = names.length; j < len; j++) {
          name = names[j];
          if (currentObject[name] == null) {
            return void 0
          }
          currentObject = currentObject[name]
        }
        return currentObject[lastName]
      };
      FormView.prototype._set = function (model, path, value) {
        var currentObject, lastName, ref;
        ref = this._find(model, path), currentObject = ref[0], lastName = ref[1];
        currentObject[lastName] = value;
        return [
          currentObject,
          lastName
        ]
      };
      FormView.prototype._find = function (model, path) {
        var currentObject, j, lastName, len, name, names;
        names = path.split('.');
        if (names.length === 1) {
          return [
            model,
            path
          ]
        }
        lastName = names.pop();
        currentObject = model;
        for (j = 0, len = names.length; j < len; j++) {
          name = names[j];
          if (currentObject[name] != null) {
            currentObject = currentObject[name];
            continue
          }
          if (isNumber(name)) {
            currentObject[name] = []
          } else {
            currentObject[name] = {}
          }
          currentObject = currentObject[name]
        }
        return [
          currentObject,
          lastName
        ]
      };
      FormView.prototype.js = function () {
        return this.initFormGroup()
      };
      FormView.prototype.initFormGroup = function () {
        var input, inputs, key;
        if (this.inputConfigs != null) {
          if (this.inputs == null) {
            this.inputs = inputs = helpers.render(this.inputConfigs)
          } else {
            inputs = this.inputs
          }
          for (key in inputs) {
            input = inputs[key];
            input.obs = this.obs
          }
          this.fullyValidated = false;
          return traverse(this.model, function (key, value) {
            if (inputs[key] != null) {
              return inputs[key].model.value = value
            }
          })
        }
      };
      return FormView
    }(View);
    traverse = function (obj, fn, key) {
      var k, results1, v;
      if (key == null) {
        key = ''
      }
      if (isArray(obj) || isObject(obj)) {
        results1 = [];
        for (k in obj) {
          v = obj[k];
          results1.push(traverse(v, fn, key === '' ? k : key + '.' + k))
        }
        return results1
      } else {
        return fn(key, obj)
      }
    };
    module.exports = {
      helpers: helpers,
      FormView: FormView,
      InputView: InputView,
      Input: Input,
      InputConfig: InputConfig,
      tokenize: tokenize
    }  //# sourceMappingURL=form.js.map
  });
  // source: node_modules/is-array/index.js
  require.define('is-array', function (module, exports, __dirname, __filename) {
    /**
 * isArray
 */
    var isArray = Array.isArray;
    /**
 * toString
 */
    var str = Object.prototype.toString;
    /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
    module.exports = isArray || function (val) {
      return !!val && '[object Array]' == str.call(val)
    }
  });
  // source: node_modules/is-number/index.js
  require.define('is-number', function (module, exports, __dirname, __filename) {
    /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
    'use strict';
    var typeOf = require('kind-of');
    module.exports = function isNumber(num) {
      var type = typeOf(num);
      if (type !== 'number' && type !== 'string') {
        return false
      }
      var n = +num;
      return n - n + 1 >= 0 && num !== ''
    }
  });
  // source: node_modules/kind-of/index.js
  require.define('kind-of', function (module, exports, __dirname, __filename) {
    var isBuffer = require('is-buffer');
    var toString = Object.prototype.toString;
    /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
    module.exports = function kindOf(val) {
      // primitivies
      if (typeof val === 'undefined') {
        return 'undefined'
      }
      if (val === null) {
        return 'null'
      }
      if (val === true || val === false || val instanceof Boolean) {
        return 'boolean'
      }
      if (typeof val === 'string' || val instanceof String) {
        return 'string'
      }
      if (typeof val === 'number' || val instanceof Number) {
        return 'number'
      }
      // functions
      if (typeof val === 'function' || val instanceof Function) {
        return 'function'
      }
      // array
      if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
        return 'array'
      }
      // check for instances of RegExp and Date before calling `toString`
      if (val instanceof RegExp) {
        return 'regexp'
      }
      if (val instanceof Date) {
        return 'date'
      }
      // other objects
      var type = toString.call(val);
      if (type === '[object RegExp]') {
        return 'regexp'
      }
      if (type === '[object Date]') {
        return 'date'
      }
      if (type === '[object Arguments]') {
        return 'arguments'
      }
      // buffer
      if (typeof Buffer !== 'undefined' && isBuffer(val)) {
        return 'buffer'
      }
      // es6: Map, WeakMap, Set, WeakSet
      if (type === '[object Set]') {
        return 'set'
      }
      if (type === '[object WeakSet]') {
        return 'weakset'
      }
      if (type === '[object Map]') {
        return 'map'
      }
      if (type === '[object WeakMap]') {
        return 'weakmap'
      }
      if (type === '[object Symbol]') {
        return 'symbol'
      }
      // typed arrays
      if (type === '[object Int8Array]') {
        return 'int8array'
      }
      if (type === '[object Uint8Array]') {
        return 'uint8array'
      }
      if (type === '[object Uint8ClampedArray]') {
        return 'uint8clampedarray'
      }
      if (type === '[object Int16Array]') {
        return 'int16array'
      }
      if (type === '[object Uint16Array]') {
        return 'uint16array'
      }
      if (type === '[object Int32Array]') {
        return 'int32array'
      }
      if (type === '[object Uint32Array]') {
        return 'uint32array'
      }
      if (type === '[object Float32Array]') {
        return 'float32array'
      }
      if (type === '[object Float64Array]') {
        return 'float64array'
      }
      // must be a plain object
      return 'object'
    }
  });
  // source: node_modules/is-buffer/index.js
  require.define('is-buffer', function (module, exports, __dirname, __filename) {
    /**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */
    module.exports = function (obj) {
      return !!(obj != null && (obj._isBuffer || obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)))
    }
  });
  // source: node_modules/is-object/index.js
  require.define('is-object', function (module, exports, __dirname, __filename) {
    'use strict';
    module.exports = function isObject(x) {
      return typeof x === 'object' && x !== null
    }
  });
  // source: node_modules/crowdcontrol/lib/events.js
  require.define('crowdcontrol/lib/events', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {}  //# sourceMappingURL=events.js.map
  });
  // source: node_modules/crowdcontrol/lib/view/view.js
  require.define('crowdcontrol/lib/view/view', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.10.0
    var View, extend, isFunction, riot, utils;
    isFunction = require('is-function');
    extend = require('extend');
    riot = require('riot/riot');
    utils = require('crowdcontrol/lib/utils');
    View = function () {
      View.register = function () {
        return new this
      };
      View.prototype.tag = '';
      View.prototype.html = '';
      View.prototype.css = '';
      View.prototype.attrs = '';
      View.prototype.events = null;
      View.prototype.mixins = null;
      View.prototype.model = null;
      View.prototype.init = function () {
      };
      View.prototype.js = function () {
      };
      function View() {
        var parentProto, proto, temp, view;
        proto = Object.getPrototypeOf(this);
        parentProto = proto;
        temp = {};
        while (parentProto !== View.prototype) {
          parentProto = Object.getPrototypeOf(parentProto);
          proto.events = extend({}, parentProto.events || {}, proto.events);
          extend(temp, parentProto || {}, proto)
        }
        extend(proto, temp);
        view = this;
        this.init();
        riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
          var fn, handler, k, name, obs, optsP, ref, ref1, v;
          optsP = Object.getPrototypeOf(opts);
          for (k in opts) {
            v = opts[k];
            if (optsP[k] != null && v == null) {
              opts[k] = optsP[k]
            }
          }
          if (view != null) {
            ref = Object.getPrototypeOf(view);
            for (k in ref) {
              v = ref[k];
              if (isFunction(v)) {
                (function (_this) {
                  return function (v) {
                    var oldFn;
                    if (_this[k] != null) {
                      oldFn = _this[k];
                      return _this[k] = function () {
                        oldFn.apply(_this, arguments);
                        return v.apply(_this, arguments)
                      }
                    } else {
                      return _this[k] = function () {
                        return v.apply(_this, arguments)
                      }
                    }
                  }
                }(this)(v))
              } else {
                this[k] = v
              }
            }
          }
          this.model = opts.model || this.model;
          if (this.model == null) {
            this.model = {}
          }
          obs = this.obs = opts.obs;
          if (this.obs == null) {
            obs = this.obs = {};
            riot.observable(obs)
          }
          if (view.events != null) {
            ref1 = view.events;
            fn = function (_this) {
              return function (name, handler) {
                return obs.on(name, function () {
                  return handler.apply(_this, arguments)
                })
              }
            }(this);
            for (name in ref1) {
              handler = ref1[name];
              fn(name, handler)
            }
          }
          if (this.js) {
            return this.js(opts)
          }
        })
      }
      return View
    }();
    module.exports = View  //# sourceMappingURL=view.js.map
  });
  // source: node_modules/extend/index.js
  require.define('extend', function (module, exports, __dirname, __filename) {
    'use strict';
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var isArray = function isArray(arr) {
      if (typeof Array.isArray === 'function') {
        return Array.isArray(arr)
      }
      return toStr.call(arr) === '[object Array]'
    };
    var isPlainObject = function isPlainObject(obj) {
      if (!obj || toStr.call(obj) !== '[object Object]') {
        return false
      }
      var hasOwnConstructor = hasOwn.call(obj, 'constructor');
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
      // Not own constructor property must be Object
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false
      }
      // Own properties are enumerated firstly, so to speed up,
      // if last one is own, then all properties are own.
      var key;
      for (key in obj) {
      }
      return typeof key === 'undefined' || hasOwn.call(obj, key)
    };
    module.exports = function extend() {
      var options, name, src, copy, copyIsArray, clone, target = arguments[0], i = 1, length = arguments.length, deep = false;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      } else if (typeof target !== 'object' && typeof target !== 'function' || target == null) {
        target = {}
      }
      for (; i < length; ++i) {
        options = arguments[i];
        // Only deal with non-null/undefined values
        if (options != null) {
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target !== copy) {
              // Recurse if we're merging plain objects or arrays
              if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : []
                } else {
                  clone = src && isPlainObject(src) ? src : {}
                }
                // Never move original objects, clone them
                target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
              } else if (typeof copy !== 'undefined') {
                target[name] = copy
              }
            }
          }
        }
      }
      // Return the modified object
      return target
    }
  });
  // source: node_modules/raf/index.js
  require.define('raf', function (module, exports, __dirname, __filename) {
    var now = require('performance-now/lib/performance-now'), global = typeof window === 'undefined' ? {} : window, vendors = [
        'moz',
        'webkit'
      ], suffix = 'AnimationFrame', raf = global['request' + suffix], caf = global['cancel' + suffix] || global['cancelRequest' + suffix];
    for (var i = 0; i < vendors.length && !raf; i++) {
      raf = global[vendors[i] + 'Request' + suffix];
      caf = global[vendors[i] + 'Cancel' + suffix] || global[vendors[i] + 'CancelRequest' + suffix]
    }
    // Some versions of FF have rAF but not cAF
    if (!raf || !caf) {
      var last = 0, id = 0, queue = [], frameDuration = 1000 / 60;
      raf = function (callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function () {
            var cp = queue.slice(0);
            // Clear queue here to prevent
            // callbacks from appending listeners
            // to the current frame's queue
            queue.length = 0;
            for (var i = 0; i < cp.length; i++) {
              if (!cp[i].cancelled) {
                try {
                  cp[i].callback(last)
                } catch (e) {
                  setTimeout(function () {
                    throw e
                  }, 0)
                }
              }
            }
          }, Math.round(next))
        }
        queue.push({
          handle: ++id,
          callback: callback,
          cancelled: false
        });
        return id
      };
      caf = function (handle) {
        for (var i = 0; i < queue.length; i++) {
          if (queue[i].handle === handle) {
            queue[i].cancelled = true
          }
        }
      }
    }
    module.exports = function (fn) {
      // Wrap in a new function to prevent
      // `cancel` potentially being assigned
      // to the native rAF function
      return raf.call(global, fn)
    };
    module.exports.cancel = function () {
      caf.apply(global, arguments)
    }
  });
  // source: node_modules/performance-now/lib/performance-now.js
  require.define('performance-now/lib/performance-now', function (module, exports, __dirname, __filename) {
    // Generated by CoffeeScript 1.7.1
    (function () {
      var getNanoSeconds, hrtime, loadTime;
      if (typeof performance !== 'undefined' && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now()
        }
      } else if (typeof process !== 'undefined' && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - loadTime) / 1000000
        };
        hrtime = process.hrtime;
        getNanoSeconds = function () {
          var hr;
          hr = hrtime();
          return hr[0] * 1000000000 + hr[1]
        };
        loadTime = getNanoSeconds()
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime
        };
        loadTime = Date.now()
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime
        };
        loadTime = new Date().getTime()
      }
    }.call(this))
  });
  // source: vendor/js/select2.js
  require.define('./Users/zk/work/crowdstart/checkout/vendor/js/select2.js', function (module, exports, __dirname, __filename) {
    /*!
 * Select2 4.0.0
 * https://select2.github.io
 *
 * Released under the MIT license
 * https://github.com/select2/select2/blob/master/LICENSE.md
 */
    (function (factory) {
      if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define(['jquery'], factory)
      } else {
        // Browser globals
        factory(jQuery)
      }
    }(function (jQuery) {
      // This is needed so we can catch the AMD loader configuration and use it
      // The inner file should be wrapped (by `banner.start.js`) in a function that
      // returns the AMD loader references.
      var S2 = function () {
        // Restore the Select2 AMD loader so it can be used
        // Needed mostly in the language files, where the loader is not inserted
        if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
          var S2 = jQuery.fn.select2.amd
        }
        var S2;
        (function () {
          if (!S2 || !S2.requirejs) {
            if (!S2) {
              S2 = {}
            } else {
              require = S2
            }
            /**
 * @license almond 0.2.9 Copyright (c) 2011-2014, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
            //Going sloppy to avoid 'use strict' string cost, but strict practices should
            //be followed.
            /*jslint sloppy: true */
            /*global setTimeout: false */
            var requirejs, require, define;
            (function (undef) {
              var main, req, makeMap, handlers, defined = {}, waiting = {}, config = {}, defining = {}, hasOwn = Object.prototype.hasOwnProperty, aps = [].slice, jsSuffixRegExp = /\.js$/;
              function hasProp(obj, prop) {
                return hasOwn.call(obj, prop)
              }
              /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
              function normalize(name, baseName) {
                var nameParts, nameSegment, mapValue, foundMap, lastIndex, foundI, foundStarMap, starI, i, j, part, baseParts = baseName && baseName.split('/'), map = config.map, starMap = map && map['*'] || {};
                //Adjust any relative paths.
                if (name && name.charAt(0) === '.') {
                  //If have a base name, try to normalize against it,
                  //otherwise, assume it is a top-level require that will
                  //be relative to baseUrl in the end.
                  if (baseName) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that "directory" and not name of the baseName's
                    //module. For instance, baseName of "one/two/three", maps to
                    //"one/two/three.js", but we want the directory, "one/two" for
                    //this normalization.
                    baseParts = baseParts.slice(0, baseParts.length - 1);
                    name = name.split('/');
                    lastIndex = name.length - 1;
                    // Node .js allowance:
                    if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                      name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '')
                    }
                    name = baseParts.concat(name);
                    //start trimDots
                    for (i = 0; i < name.length; i += 1) {
                      part = name[i];
                      if (part === '.') {
                        name.splice(i, 1);
                        i -= 1
                      } else if (part === '..') {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                          //End of the line. Keep at least one non-dot
                          //path segment at the front so it can be mapped
                          //correctly to disk. Otherwise, there is likely
                          //no path mapping for a path starting with '..'.
                          //This can still fail, but catches the most reasonable
                          //uses of ..
                          break
                        } else if (i > 0) {
                          name.splice(i - 1, 2);
                          i -= 2
                        }
                      }
                    }
                    //end trimDots
                    name = name.join('/')
                  } else if (name.indexOf('./') === 0) {
                    // No baseName, so this is ID is resolved relative
                    // to baseUrl, pull off the leading dot.
                    name = name.substring(2)
                  }
                }
                //Apply map config if available.
                if ((baseParts || starMap) && map) {
                  nameParts = name.split('/');
                  for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');
                    if (baseParts) {
                      //Find the longest baseName segment match in the config.
                      //So, do joins on the biggest to smallest lengths of baseParts.
                      for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];
                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                          mapValue = mapValue[nameSegment];
                          if (mapValue) {
                            //Match, update name to the new value.
                            foundMap = mapValue;
                            foundI = i;
                            break
                          }
                        }
                      }
                    }
                    if (foundMap) {
                      break
                    }
                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && starMap[nameSegment]) {
                      foundStarMap = starMap[nameSegment];
                      starI = i
                    }
                  }
                  if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI
                  }
                  if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/')
                  }
                }
                return name
              }
              function makeRequire(relName, forceSync) {
                return function () {
                  //A version of a require function that passes a moduleName
                  //value for items that may need to
                  //look up paths relative to the moduleName
                  return req.apply(undef, aps.call(arguments, 0).concat([
                    relName,
                    forceSync
                  ]))
                }
              }
              function makeNormalize(relName) {
                return function (name) {
                  return normalize(name, relName)
                }
              }
              function makeLoad(depName) {
                return function (value) {
                  defined[depName] = value
                }
              }
              function callDep(name) {
                if (hasProp(waiting, name)) {
                  var args = waiting[name];
                  delete waiting[name];
                  defining[name] = true;
                  main.apply(undef, args)
                }
                if (!hasProp(defined, name) && !hasProp(defining, name)) {
                  throw new Error('No ' + name)
                }
                return defined[name]
              }
              //Turns a plugin!resource to [plugin, resource]
              //with the plugin being undefined if the name
              //did not have a plugin prefix.
              function splitPrefix(name) {
                var prefix, index = name ? name.indexOf('!') : -1;
                if (index > -1) {
                  prefix = name.substring(0, index);
                  name = name.substring(index + 1, name.length)
                }
                return [
                  prefix,
                  name
                ]
              }
              /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
              makeMap = function (name, relName) {
                var plugin, parts = splitPrefix(name), prefix = parts[0];
                name = parts[1];
                if (prefix) {
                  prefix = normalize(prefix, relName);
                  plugin = callDep(prefix)
                }
                //Normalize according
                if (prefix) {
                  if (plugin && plugin.normalize) {
                    name = plugin.normalize(name, makeNormalize(relName))
                  } else {
                    name = normalize(name, relName)
                  }
                } else {
                  name = normalize(name, relName);
                  parts = splitPrefix(name);
                  prefix = parts[0];
                  name = parts[1];
                  if (prefix) {
                    plugin = callDep(prefix)
                  }
                }
                //Using ridiculous property names for space reasons
                return {
                  f: prefix ? prefix + '!' + name : name,
                  //fullName
                  n: name,
                  pr: prefix,
                  p: plugin
                }
              };
              function makeConfig(name) {
                return function () {
                  return config && config.config && config.config[name] || {}
                }
              }
              handlers = {
                require: function (name) {
                  return makeRequire(name)
                },
                exports: function (name) {
                  var e = defined[name];
                  if (typeof e !== 'undefined') {
                    return e
                  } else {
                    return defined[name] = {}
                  }
                },
                module: function (name) {
                  return {
                    id: name,
                    uri: '',
                    exports: defined[name],
                    config: makeConfig(name)
                  }
                }
              };
              main = function (name, deps, callback, relName) {
                var cjsModule, depName, ret, map, i, args = [], callbackType = typeof callback, usingExports;
                //Use name if no relName
                relName = relName || name;
                //Call the callback to define the module, if necessary.
                if (callbackType === 'undefined' || callbackType === 'function') {
                  //Pull out the defined dependencies and pass the ordered
                  //values to the callback.
                  //Default to [require, exports, module] if no deps
                  deps = !deps.length && callback.length ? [
                    'require',
                    'exports',
                    'module'
                  ] : deps;
                  for (i = 0; i < deps.length; i += 1) {
                    map = makeMap(deps[i], relName);
                    depName = map.f;
                    //Fast path CommonJS standard dependencies.
                    if (depName === 'require') {
                      args[i] = handlers.require(name)
                    } else if (depName === 'exports') {
                      //CommonJS module spec 1.1
                      args[i] = handlers.exports(name);
                      usingExports = true
                    } else if (depName === 'module') {
                      //CommonJS module spec 1.1
                      cjsModule = args[i] = handlers.module(name)
                    } else if (hasProp(defined, depName) || hasProp(waiting, depName) || hasProp(defining, depName)) {
                      args[i] = callDep(depName)
                    } else if (map.p) {
                      map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                      args[i] = defined[depName]
                    } else {
                      throw new Error(name + ' missing ' + depName)
                    }
                  }
                  ret = callback ? callback.apply(defined[name], args) : undefined;
                  if (name) {
                    //If setting exports via "module" is in play,
                    //favor that over return value and exports. After that,
                    //favor a non-undefined return value over exports use.
                    if (cjsModule && cjsModule.exports !== undef && cjsModule.exports !== defined[name]) {
                      defined[name] = cjsModule.exports
                    } else if (ret !== undef || !usingExports) {
                      //Use the return value from the function.
                      defined[name] = ret
                    }
                  }
                } else if (name) {
                  //May just be an object definition for the module. Only
                  //worry about defining if have a module name.
                  defined[name] = callback
                }
              };
              requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
                if (typeof deps === 'string') {
                  if (handlers[deps]) {
                    //callback in this case is really relName
                    return handlers[deps](callback)
                  }
                  //Just return the module wanted. In this scenario, the
                  //deps arg is the module name, and second arg (if passed)
                  //is just the relName.
                  //Normalize module name, if it contains . or ..
                  return callDep(makeMap(deps, callback).f)
                } else if (!deps.splice) {
                  //deps is a config object, not an array.
                  config = deps;
                  if (config.deps) {
                    req(config.deps, config.callback)
                  }
                  if (!callback) {
                    return
                  }
                  if (callback.splice) {
                    //callback is an array, which means it is a dependency list.
                    //Adjust args if there are dependencies
                    deps = callback;
                    callback = relName;
                    relName = null
                  } else {
                    deps = undef
                  }
                }
                //Support require(['a'])
                callback = callback || function () {
                };
                //If relName is a function, it is an errback handler,
                //so remove it.
                if (typeof relName === 'function') {
                  relName = forceSync;
                  forceSync = alt
                }
                //Simulate async callback;
                if (forceSync) {
                  main(undef, deps, callback, relName)
                } else {
                  //Using a non-zero value because of concern for what old browsers
                  //do, and latest browsers "upgrade" to 4 if lower value is used:
                  //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
                  //If want a value immediately, use require('id') instead -- something
                  //that works in almond on the global level, but not guaranteed and
                  //unlikely to work in other AMD implementations.
                  setTimeout(function () {
                    main(undef, deps, callback, relName)
                  }, 4)
                }
                return req
              };
              /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
              req.config = function (cfg) {
                return req(cfg)
              };
              /**
     * Expose module registry for debugging and tooling
     */
              requirejs._defined = defined;
              define = function (name, deps, callback) {
                //This module may not have dependencies
                if (!deps.splice) {
                  //deps is not an array, so probably means
                  //an object literal or factory function for
                  //the value. Adjust args.
                  callback = deps;
                  deps = []
                }
                if (!hasProp(defined, name) && !hasProp(waiting, name)) {
                  waiting[name] = [
                    name,
                    deps,
                    callback
                  ]
                }
              };
              define.amd = { jQuery: true }
            }());
            S2.requirejs = requirejs;
            S2.require = require;
            S2.define = define
          }
        }());
        S2.define('almond', function () {
        });
        /* global jQuery:false, $:false */
        S2.define('jquery', [], function () {
          var _$ = jQuery || $;
          if (_$ == null && console && console.error) {
            console.error('Select2: An instance of jQuery or a jQuery-compatible library was not ' + 'found. Make sure that you are including jQuery before Select2 on your ' + 'web page.')
          }
          return _$
        });
        S2.define('select2/utils', ['jquery'], function ($) {
          var Utils = {};
          Utils.Extend = function (ChildClass, SuperClass) {
            var __hasProp = {}.hasOwnProperty;
            function BaseConstructor() {
              this.constructor = ChildClass
            }
            for (var key in SuperClass) {
              if (__hasProp.call(SuperClass, key)) {
                ChildClass[key] = SuperClass[key]
              }
            }
            BaseConstructor.prototype = SuperClass.prototype;
            ChildClass.prototype = new BaseConstructor;
            ChildClass.__super__ = SuperClass.prototype;
            return ChildClass
          };
          function getMethods(theClass) {
            var proto = theClass.prototype;
            var methods = [];
            for (var methodName in proto) {
              var m = proto[methodName];
              if (typeof m !== 'function') {
                continue
              }
              if (methodName === 'constructor') {
                continue
              }
              methods.push(methodName)
            }
            return methods
          }
          Utils.Decorate = function (SuperClass, DecoratorClass) {
            var decoratedMethods = getMethods(DecoratorClass);
            var superMethods = getMethods(SuperClass);
            function DecoratedClass() {
              var unshift = Array.prototype.unshift;
              var argCount = DecoratorClass.prototype.constructor.length;
              var calledConstructor = SuperClass.prototype.constructor;
              if (argCount > 0) {
                unshift.call(arguments, SuperClass.prototype.constructor);
                calledConstructor = DecoratorClass.prototype.constructor
              }
              calledConstructor.apply(this, arguments)
            }
            DecoratorClass.displayName = SuperClass.displayName;
            function ctr() {
              this.constructor = DecoratedClass
            }
            DecoratedClass.prototype = new ctr;
            for (var m = 0; m < superMethods.length; m++) {
              var superMethod = superMethods[m];
              DecoratedClass.prototype[superMethod] = SuperClass.prototype[superMethod]
            }
            var calledMethod = function (methodName) {
              // Stub out the original method if it's not decorating an actual method
              var originalMethod = function () {
              };
              if (methodName in DecoratedClass.prototype) {
                originalMethod = DecoratedClass.prototype[methodName]
              }
              var decoratedMethod = DecoratorClass.prototype[methodName];
              return function () {
                var unshift = Array.prototype.unshift;
                unshift.call(arguments, originalMethod);
                return decoratedMethod.apply(this, arguments)
              }
            };
            for (var d = 0; d < decoratedMethods.length; d++) {
              var decoratedMethod = decoratedMethods[d];
              DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod)
            }
            return DecoratedClass
          };
          var Observable = function () {
            this.listeners = {}
          };
          Observable.prototype.on = function (event, callback) {
            this.listeners = this.listeners || {};
            if (event in this.listeners) {
              this.listeners[event].push(callback)
            } else {
              this.listeners[event] = [callback]
            }
          };
          Observable.prototype.trigger = function (event) {
            var slice = Array.prototype.slice;
            this.listeners = this.listeners || {};
            if (event in this.listeners) {
              this.invoke(this.listeners[event], slice.call(arguments, 1))
            }
            if ('*' in this.listeners) {
              this.invoke(this.listeners['*'], arguments)
            }
          };
          Observable.prototype.invoke = function (listeners, params) {
            for (var i = 0, len = listeners.length; i < len; i++) {
              listeners[i].apply(this, params)
            }
          };
          Utils.Observable = Observable;
          Utils.generateChars = function (length) {
            var chars = '';
            for (var i = 0; i < length; i++) {
              var randomChar = Math.floor(Math.random() * 36);
              chars += randomChar.toString(36)
            }
            return chars
          };
          Utils.bind = function (func, context) {
            return function () {
              func.apply(context, arguments)
            }
          };
          Utils._convertData = function (data) {
            for (var originalKey in data) {
              var keys = originalKey.split('-');
              var dataLevel = data;
              if (keys.length === 1) {
                continue
              }
              for (var k = 0; k < keys.length; k++) {
                var key = keys[k];
                // Lowercase the first letter
                // By default, dash-separated becomes camelCase
                key = key.substring(0, 1).toLowerCase() + key.substring(1);
                if (!(key in dataLevel)) {
                  dataLevel[key] = {}
                }
                if (k == keys.length - 1) {
                  dataLevel[key] = data[originalKey]
                }
                dataLevel = dataLevel[key]
              }
              delete data[originalKey]
            }
            return data
          };
          Utils.hasScroll = function (index, el) {
            // Adapted from the function created by @ShadowScripter
            // and adapted by @BillBarry on the Stack Exchange Code Review website.
            // The original code can be found at
            // http://codereview.stackexchange.com/q/13338
            // and was designed to be used with the Sizzle selector engine.
            var $el = $(el);
            var overflowX = el.style.overflowX;
            var overflowY = el.style.overflowY;
            //Check both x and y declarations
            if (overflowX === overflowY && (overflowY === 'hidden' || overflowY === 'visible')) {
              return false
            }
            if (overflowX === 'scroll' || overflowY === 'scroll') {
              return true
            }
            return $el.innerHeight() < el.scrollHeight || $el.innerWidth() < el.scrollWidth
          };
          Utils.escapeMarkup = function (markup) {
            var replaceMap = {
              '\\': '&#92;',
              '&': '&amp;',
              '<': '&lt;',
              '>': '&gt;',
              '"': '&quot;',
              "'": '&#39;',
              '/': '&#47;'
            };
            // Do not try to escape the markup if it's not a string
            if (typeof markup !== 'string') {
              return markup
            }
            return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
              return replaceMap[match]
            })
          };
          // Append an array of jQuery nodes to a given element.
          Utils.appendMany = function ($element, $nodes) {
            // jQuery 1.7.x does not support $.fn.append() with an array
            // Fall back to a jQuery object collection using $.fn.add()
            if ($.fn.jquery.substr(0, 3) === '1.7') {
              var $jqNodes = $();
              $.map($nodes, function (node) {
                $jqNodes = $jqNodes.add(node)
              });
              $nodes = $jqNodes
            }
            $element.append($nodes)
          };
          return Utils
        });
        S2.define('select2/results', [
          'jquery',
          './utils'
        ], function ($, Utils) {
          function Results($element, options, dataAdapter) {
            this.$element = $element;
            this.data = dataAdapter;
            this.options = options;
            Results.__super__.constructor.call(this)
          }
          Utils.Extend(Results, Utils.Observable);
          Results.prototype.render = function () {
            var $results = $('<ul class="select2-results__options" role="tree"></ul>');
            if (this.options.get('multiple')) {
              $results.attr('aria-multiselectable', 'true')
            }
            this.$results = $results;
            return $results
          };
          Results.prototype.clear = function () {
            this.$results.empty()
          };
          Results.prototype.displayMessage = function (params) {
            var escapeMarkup = this.options.get('escapeMarkup');
            this.clear();
            this.hideLoading();
            var $message = $('<li role="treeitem" class="select2-results__option"></li>');
            var message = this.options.get('translations').get(params.message);
            $message.append(escapeMarkup(message(params.args)));
            this.$results.append($message)
          };
          Results.prototype.append = function (data) {
            this.hideLoading();
            var $options = [];
            if (data.results == null || data.results.length === 0) {
              if (this.$results.children().length === 0) {
                this.trigger('results:message', { message: 'noResults' })
              }
              return
            }
            data.results = this.sort(data.results);
            for (var d = 0; d < data.results.length; d++) {
              var item = data.results[d];
              var $option = this.option(item);
              $options.push($option)
            }
            this.$results.append($options)
          };
          Results.prototype.position = function ($results, $dropdown) {
            var $resultsContainer = $dropdown.find('.select2-results');
            $resultsContainer.append($results)
          };
          Results.prototype.sort = function (data) {
            var sorter = this.options.get('sorter');
            return sorter(data)
          };
          Results.prototype.setClasses = function () {
            var self = this;
            this.data.current(function (selected) {
              var selectedIds = $.map(selected, function (s) {
                return s.id.toString()
              });
              var $options = self.$results.find('.select2-results__option[aria-selected]');
              $options.each(function () {
                var $option = $(this);
                var item = $.data(this, 'data');
                // id needs to be converted to a string when comparing
                var id = '' + item.id;
                if (item.element != null && item.element.selected || item.element == null && $.inArray(id, selectedIds) > -1) {
                  $option.attr('aria-selected', 'true')
                } else {
                  $option.attr('aria-selected', 'false')
                }
              });
              var $selected = $options.filter('[aria-selected=true]');
              // Check if there are any selected options
              if ($selected.length > 0) {
                // If there are selected options, highlight the first
                $selected.first().trigger('mouseenter')
              } else {
                // If there are no selected options, highlight the first option
                // in the dropdown
                $options.first().trigger('mouseenter')
              }
            })
          };
          Results.prototype.showLoading = function (params) {
            this.hideLoading();
            var loadingMore = this.options.get('translations').get('searching');
            var loading = {
              disabled: true,
              loading: true,
              text: loadingMore(params)
            };
            var $loading = this.option(loading);
            $loading.className += ' loading-results';
            this.$results.prepend($loading)
          };
          Results.prototype.hideLoading = function () {
            this.$results.find('.loading-results').remove()
          };
          Results.prototype.option = function (data) {
            var option = document.createElement('li');
            option.className = 'select2-results__option';
            var attrs = {
              'role': 'treeitem',
              'aria-selected': 'false'
            };
            if (data.disabled) {
              delete attrs['aria-selected'];
              attrs['aria-disabled'] = 'true'
            }
            if (data.id == null) {
              delete attrs['aria-selected']
            }
            if (data._resultId != null) {
              option.id = data._resultId
            }
            if (data.title) {
              option.title = data.title
            }
            if (data.children) {
              attrs.role = 'group';
              attrs['aria-label'] = data.text;
              delete attrs['aria-selected']
            }
            for (var attr in attrs) {
              var val = attrs[attr];
              option.setAttribute(attr, val)
            }
            if (data.children) {
              var $option = $(option);
              var label = document.createElement('strong');
              label.className = 'select2-results__group';
              var $label = $(label);
              this.template(data, label);
              var $children = [];
              for (var c = 0; c < data.children.length; c++) {
                var child = data.children[c];
                var $child = this.option(child);
                $children.push($child)
              }
              var $childrenContainer = $('<ul></ul>', { 'class': 'select2-results__options select2-results__options--nested' });
              $childrenContainer.append($children);
              $option.append(label);
              $option.append($childrenContainer)
            } else {
              this.template(data, option)
            }
            $.data(option, 'data', data);
            return option
          };
          Results.prototype.bind = function (container, $container) {
            var self = this;
            var id = container.id + '-results';
            this.$results.attr('id', id);
            container.on('results:all', function (params) {
              self.clear();
              self.append(params.data);
              if (container.isOpen()) {
                self.setClasses()
              }
            });
            container.on('results:append', function (params) {
              self.append(params.data);
              if (container.isOpen()) {
                self.setClasses()
              }
            });
            container.on('query', function (params) {
              self.showLoading(params)
            });
            container.on('select', function () {
              if (!container.isOpen()) {
                return
              }
              self.setClasses()
            });
            container.on('unselect', function () {
              if (!container.isOpen()) {
                return
              }
              self.setClasses()
            });
            container.on('open', function () {
              // When the dropdown is open, aria-expended="true"
              self.$results.attr('aria-expanded', 'true');
              self.$results.attr('aria-hidden', 'false');
              self.setClasses();
              self.ensureHighlightVisible()
            });
            container.on('close', function () {
              // When the dropdown is closed, aria-expended="false"
              self.$results.attr('aria-expanded', 'false');
              self.$results.attr('aria-hidden', 'true');
              self.$results.removeAttr('aria-activedescendant')
            });
            container.on('results:toggle', function () {
              var $highlighted = self.getHighlightedResults();
              if ($highlighted.length === 0) {
                return
              }
              $highlighted.trigger('mouseup')
            });
            container.on('results:select', function () {
              var $highlighted = self.getHighlightedResults();
              if ($highlighted.length === 0) {
                return
              }
              var data = $highlighted.data('data');
              if ($highlighted.attr('aria-selected') == 'true') {
                self.trigger('close')
              } else {
                self.trigger('select', { data: data })
              }
            });
            container.on('results:previous', function () {
              var $highlighted = self.getHighlightedResults();
              var $options = self.$results.find('[aria-selected]');
              var currentIndex = $options.index($highlighted);
              // If we are already at te top, don't move further
              if (currentIndex === 0) {
                return
              }
              var nextIndex = currentIndex - 1;
              // If none are highlighted, highlight the first
              if ($highlighted.length === 0) {
                nextIndex = 0
              }
              var $next = $options.eq(nextIndex);
              $next.trigger('mouseenter');
              var currentOffset = self.$results.offset().top;
              var nextTop = $next.offset().top;
              var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);
              if (nextIndex === 0) {
                self.$results.scrollTop(0)
              } else if (nextTop - currentOffset < 0) {
                self.$results.scrollTop(nextOffset)
              }
            });
            container.on('results:next', function () {
              var $highlighted = self.getHighlightedResults();
              var $options = self.$results.find('[aria-selected]');
              var currentIndex = $options.index($highlighted);
              var nextIndex = currentIndex + 1;
              // If we are at the last option, stay there
              if (nextIndex >= $options.length) {
                return
              }
              var $next = $options.eq(nextIndex);
              $next.trigger('mouseenter');
              var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
              var nextBottom = $next.offset().top + $next.outerHeight(false);
              var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;
              if (nextIndex === 0) {
                self.$results.scrollTop(0)
              } else if (nextBottom > currentOffset) {
                self.$results.scrollTop(nextOffset)
              }
            });
            container.on('results:focus', function (params) {
              params.element.addClass('select2-results__option--highlighted')
            });
            container.on('results:message', function (params) {
              self.displayMessage(params)
            });
            if ($.fn.mousewheel) {
              this.$results.on('mousewheel', function (e) {
                var top = self.$results.scrollTop();
                var bottom = self.$results.get(0).scrollHeight - self.$results.scrollTop() + e.deltaY;
                var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
                var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();
                if (isAtTop) {
                  self.$results.scrollTop(0);
                  e.preventDefault();
                  e.stopPropagation()
                } else if (isAtBottom) {
                  self.$results.scrollTop(self.$results.get(0).scrollHeight - self.$results.height());
                  e.preventDefault();
                  e.stopPropagation()
                }
              })
            }
            this.$results.on('mouseup', '.select2-results__option[aria-selected]', function (evt) {
              var $this = $(this);
              var data = $this.data('data');
              if ($this.attr('aria-selected') === 'true') {
                if (self.options.get('multiple')) {
                  self.trigger('unselect', {
                    originalEvent: evt,
                    data: data
                  })
                } else {
                  self.trigger('close')
                }
                return
              }
              self.trigger('select', {
                originalEvent: evt,
                data: data
              })
            });
            this.$results.on('mouseenter', '.select2-results__option[aria-selected]', function (evt) {
              var data = $(this).data('data');
              self.getHighlightedResults().removeClass('select2-results__option--highlighted');
              self.trigger('results:focus', {
                data: data,
                element: $(this)
              })
            })
          };
          Results.prototype.getHighlightedResults = function () {
            var $highlighted = this.$results.find('.select2-results__option--highlighted');
            return $highlighted
          };
          Results.prototype.destroy = function () {
            this.$results.remove()
          };
          Results.prototype.ensureHighlightVisible = function () {
            var $highlighted = this.getHighlightedResults();
            if ($highlighted.length === 0) {
              return
            }
            var $options = this.$results.find('[aria-selected]');
            var currentIndex = $options.index($highlighted);
            var currentOffset = this.$results.offset().top;
            var nextTop = $highlighted.offset().top;
            var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);
            var offsetDelta = nextTop - currentOffset;
            nextOffset -= $highlighted.outerHeight(false) * 2;
            if (currentIndex <= 2) {
              this.$results.scrollTop(0)
            } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
              this.$results.scrollTop(nextOffset)
            }
          };
          Results.prototype.template = function (result, container) {
            var template = this.options.get('templateResult');
            var escapeMarkup = this.options.get('escapeMarkup');
            var content = template(result);
            if (content == null) {
              container.style.display = 'none'
            } else if (typeof content === 'string') {
              container.innerHTML = escapeMarkup(content)
            } else {
              $(container).append(content)
            }
          };
          return Results
        });
        S2.define('select2/keys', [], function () {
          var KEYS = {
            BACKSPACE: 8,
            TAB: 9,
            ENTER: 13,
            SHIFT: 16,
            CTRL: 17,
            ALT: 18,
            ESC: 27,
            SPACE: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            DELETE: 46
          };
          return KEYS
        });
        S2.define('select2/selection/base', [
          'jquery',
          '../utils',
          '../keys'
        ], function ($, Utils, KEYS) {
          function BaseSelection($element, options) {
            this.$element = $element;
            this.options = options;
            BaseSelection.__super__.constructor.call(this)
          }
          Utils.Extend(BaseSelection, Utils.Observable);
          BaseSelection.prototype.render = function () {
            var $selection = $('<span class="select2-selection" role="combobox" ' + 'aria-autocomplete="list" aria-haspopup="true" aria-expanded="false">' + '</span>');
            this._tabindex = 0;
            if (this.$element.data('old-tabindex') != null) {
              this._tabindex = this.$element.data('old-tabindex')
            } else if (this.$element.attr('tabindex') != null) {
              this._tabindex = this.$element.attr('tabindex')
            }
            $selection.attr('title', this.$element.attr('title'));
            $selection.attr('tabindex', this._tabindex);
            this.$selection = $selection;
            return $selection
          };
          BaseSelection.prototype.bind = function (container, $container) {
            var self = this;
            var id = container.id + '-container';
            var resultsId = container.id + '-results';
            this.container = container;
            this.$selection.on('focus', function (evt) {
              self.trigger('focus', evt)
            });
            this.$selection.on('blur', function (evt) {
              self.trigger('blur', evt)
            });
            this.$selection.on('keydown', function (evt) {
              self.trigger('keypress', evt);
              if (evt.which === KEYS.SPACE) {
                evt.preventDefault()
              }
            });
            container.on('results:focus', function (params) {
              self.$selection.attr('aria-activedescendant', params.data._resultId)
            });
            container.on('selection:update', function (params) {
              self.update(params.data)
            });
            container.on('open', function () {
              // When the dropdown is open, aria-expanded="true"
              self.$selection.attr('aria-expanded', 'true');
              self.$selection.attr('aria-owns', resultsId);
              self._attachCloseHandler(container)
            });
            container.on('close', function () {
              // When the dropdown is closed, aria-expanded="false"
              self.$selection.attr('aria-expanded', 'false');
              self.$selection.removeAttr('aria-activedescendant');
              self.$selection.removeAttr('aria-owns');
              self.$selection.focus();
              self._detachCloseHandler(container)
            });
            container.on('enable', function () {
              self.$selection.attr('tabindex', self._tabindex)
            });
            container.on('disable', function () {
              self.$selection.attr('tabindex', '-1')
            })
          };
          BaseSelection.prototype._attachCloseHandler = function (container) {
            var self = this;
            $(document.body).on('mousedown.select2.' + container.id, function (e) {
              var $target = $(e.target);
              var $select = $target.closest('.select2');
              var $all = $('.select2.select2-container--open');
              $all.each(function () {
                var $this = $(this);
                if (this == $select[0]) {
                  return
                }
                var $element = $this.data('element');
                $element.select2('close')
              })
            })
          };
          BaseSelection.prototype._detachCloseHandler = function (container) {
            $(document.body).off('mousedown.select2.' + container.id)
          };
          BaseSelection.prototype.position = function ($selection, $container) {
            var $selectionContainer = $container.find('.selection');
            $selectionContainer.append($selection)
          };
          BaseSelection.prototype.destroy = function () {
            this._detachCloseHandler(this.container)
          };
          BaseSelection.prototype.update = function (data) {
            throw new Error('The `update` method must be defined in child classes.')
          };
          return BaseSelection
        });
        S2.define('select2/selection/single', [
          'jquery',
          './base',
          '../utils',
          '../keys'
        ], function ($, BaseSelection, Utils, KEYS) {
          function SingleSelection() {
            SingleSelection.__super__.constructor.apply(this, arguments)
          }
          Utils.Extend(SingleSelection, BaseSelection);
          SingleSelection.prototype.render = function () {
            var $selection = SingleSelection.__super__.render.call(this);
            $selection.addClass('select2-selection--single');
            $selection.html('<span class="select2-selection__rendered"></span>' + '<span class="select2-selection__arrow" role="presentation">' + '<b role="presentation"></b>' + '</span>');
            return $selection
          };
          SingleSelection.prototype.bind = function (container, $container) {
            var self = this;
            SingleSelection.__super__.bind.apply(this, arguments);
            var id = container.id + '-container';
            this.$selection.find('.select2-selection__rendered').attr('id', id);
            this.$selection.attr('aria-labelledby', id);
            this.$selection.on('mousedown', function (evt) {
              // Only respond to left clicks
              if (evt.which !== 1) {
                return
              }
              self.trigger('toggle', { originalEvent: evt })
            });
            this.$selection.on('focus', function (evt) {
            });
            this.$selection.on('blur', function (evt) {
            });
            container.on('selection:update', function (params) {
              self.update(params.data)
            })
          };
          SingleSelection.prototype.clear = function () {
            this.$selection.find('.select2-selection__rendered').empty()
          };
          SingleSelection.prototype.display = function (data) {
            var template = this.options.get('templateSelection');
            var escapeMarkup = this.options.get('escapeMarkup');
            return escapeMarkup(template(data))
          };
          SingleSelection.prototype.selectionContainer = function () {
            return $('<span></span>')
          };
          SingleSelection.prototype.update = function (data) {
            if (data.length === 0) {
              this.clear();
              return
            }
            var selection = data[0];
            var formatted = this.display(selection);
            var $rendered = this.$selection.find('.select2-selection__rendered');
            $rendered.empty().append(formatted);
            $rendered.prop('title', selection.title || selection.text)
          };
          return SingleSelection
        });
        S2.define('select2/selection/multiple', [
          'jquery',
          './base',
          '../utils'
        ], function ($, BaseSelection, Utils) {
          function MultipleSelection($element, options) {
            MultipleSelection.__super__.constructor.apply(this, arguments)
          }
          Utils.Extend(MultipleSelection, BaseSelection);
          MultipleSelection.prototype.render = function () {
            var $selection = MultipleSelection.__super__.render.call(this);
            $selection.addClass('select2-selection--multiple');
            $selection.html('<ul class="select2-selection__rendered"></ul>');
            return $selection
          };
          MultipleSelection.prototype.bind = function (container, $container) {
            var self = this;
            MultipleSelection.__super__.bind.apply(this, arguments);
            this.$selection.on('click', function (evt) {
              self.trigger('toggle', { originalEvent: evt })
            });
            this.$selection.on('click', '.select2-selection__choice__remove', function (evt) {
              var $remove = $(this);
              var $selection = $remove.parent();
              var data = $selection.data('data');
              self.trigger('unselect', {
                originalEvent: evt,
                data: data
              })
            })
          };
          MultipleSelection.prototype.clear = function () {
            this.$selection.find('.select2-selection__rendered').empty()
          };
          MultipleSelection.prototype.display = function (data) {
            var template = this.options.get('templateSelection');
            var escapeMarkup = this.options.get('escapeMarkup');
            return escapeMarkup(template(data))
          };
          MultipleSelection.prototype.selectionContainer = function () {
            var $container = $('<li class="select2-selection__choice">' + '<span class="select2-selection__choice__remove" role="presentation">' + '&times;' + '</span>' + '</li>');
            return $container
          };
          MultipleSelection.prototype.update = function (data) {
            this.clear();
            if (data.length === 0) {
              return
            }
            var $selections = [];
            for (var d = 0; d < data.length; d++) {
              var selection = data[d];
              var formatted = this.display(selection);
              var $selection = this.selectionContainer();
              $selection.append(formatted);
              $selection.prop('title', selection.title || selection.text);
              $selection.data('data', selection);
              $selections.push($selection)
            }
            var $rendered = this.$selection.find('.select2-selection__rendered');
            Utils.appendMany($rendered, $selections)
          };
          return MultipleSelection
        });
        S2.define('select2/selection/placeholder', ['../utils'], function (Utils) {
          function Placeholder(decorated, $element, options) {
            this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
            decorated.call(this, $element, options)
          }
          Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
            if (typeof placeholder === 'string') {
              placeholder = {
                id: '',
                text: placeholder
              }
            }
            return placeholder
          };
          Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
            var $placeholder = this.selectionContainer();
            $placeholder.html(this.display(placeholder));
            $placeholder.addClass('select2-selection__placeholder').removeClass('select2-selection__choice');
            return $placeholder
          };
          Placeholder.prototype.update = function (decorated, data) {
            var singlePlaceholder = data.length == 1 && data[0].id != this.placeholder.id;
            var multipleSelections = data.length > 1;
            if (multipleSelections || singlePlaceholder) {
              return decorated.call(this, data)
            }
            this.clear();
            var $placeholder = this.createPlaceholder(this.placeholder);
            this.$selection.find('.select2-selection__rendered').append($placeholder)
          };
          return Placeholder
        });
        S2.define('select2/selection/allowClear', [
          'jquery',
          '../keys'
        ], function ($, KEYS) {
          function AllowClear() {
          }
          AllowClear.prototype.bind = function (decorated, container, $container) {
            var self = this;
            decorated.call(this, container, $container);
            if (this.placeholder == null) {
              if (this.options.get('debug') && window.console && console.error) {
                console.error('Select2: The `allowClear` option should be used in combination ' + 'with the `placeholder` option.')
              }
            }
            this.$selection.on('mousedown', '.select2-selection__clear', function (evt) {
              self._handleClear(evt)
            });
            container.on('keypress', function (evt) {
              self._handleKeyboardClear(evt, container)
            })
          };
          AllowClear.prototype._handleClear = function (_, evt) {
            // Ignore the event if it is disabled
            if (this.options.get('disabled')) {
              return
            }
            var $clear = this.$selection.find('.select2-selection__clear');
            // Ignore the event if nothing has been selected
            if ($clear.length === 0) {
              return
            }
            evt.stopPropagation();
            var data = $clear.data('data');
            for (var d = 0; d < data.length; d++) {
              var unselectData = { data: data[d] };
              // Trigger the `unselect` event, so people can prevent it from being
              // cleared.
              this.trigger('unselect', unselectData);
              // If the event was prevented, don't clear it out.
              if (unselectData.prevented) {
                return
              }
            }
            this.$element.val(this.placeholder.id).trigger('change');
            this.trigger('toggle')
          };
          AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
            if (container.isOpen()) {
              return
            }
            if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
              this._handleClear(evt)
            }
          };
          AllowClear.prototype.update = function (decorated, data) {
            decorated.call(this, data);
            if (this.$selection.find('.select2-selection__placeholder').length > 0 || data.length === 0) {
              return
            }
            var $remove = $('<span class="select2-selection__clear">' + '&times;' + '</span>');
            $remove.data('data', data);
            this.$selection.find('.select2-selection__rendered').prepend($remove)
          };
          return AllowClear
        });
        S2.define('select2/selection/search', [
          'jquery',
          '../utils',
          '../keys'
        ], function ($, Utils, KEYS) {
          function Search(decorated, $element, options) {
            decorated.call(this, $element, options)
          }
          Search.prototype.render = function (decorated) {
            var $search = $('<li class="select2-search select2-search--inline">' + '<input class="select2-search__field" type="search" tabindex="-1"' + ' autocomplete="off" autocorrect="off" autocapitalize="off"' + ' spellcheck="false" role="textbox" />' + '</li>');
            this.$searchContainer = $search;
            this.$search = $search.find('input');
            var $rendered = decorated.call(this);
            return $rendered
          };
          Search.prototype.bind = function (decorated, container, $container) {
            var self = this;
            decorated.call(this, container, $container);
            container.on('open', function () {
              self.$search.attr('tabindex', 0);
              self.$search.focus()
            });
            container.on('close', function () {
              self.$search.attr('tabindex', -1);
              self.$search.val('');
              self.$search.focus()
            });
            container.on('enable', function () {
              self.$search.prop('disabled', false)
            });
            container.on('disable', function () {
              self.$search.prop('disabled', true)
            });
            this.$selection.on('focusin', '.select2-search--inline', function (evt) {
              self.trigger('focus', evt)
            });
            this.$selection.on('focusout', '.select2-search--inline', function (evt) {
              self.trigger('blur', evt)
            });
            this.$selection.on('keydown', '.select2-search--inline', function (evt) {
              evt.stopPropagation();
              self.trigger('keypress', evt);
              self._keyUpPrevented = evt.isDefaultPrevented();
              var key = evt.which;
              if (key === KEYS.BACKSPACE && self.$search.val() === '') {
                var $previousChoice = self.$searchContainer.prev('.select2-selection__choice');
                if ($previousChoice.length > 0) {
                  var item = $previousChoice.data('data');
                  self.searchRemoveChoice(item);
                  evt.preventDefault()
                }
              }
            });
            // Workaround for browsers which do not support the `input` event
            // This will prevent double-triggering of events for browsers which support
            // both the `keyup` and `input` events.
            this.$selection.on('input', '.select2-search--inline', function (evt) {
              // Unbind the duplicated `keyup` event
              self.$selection.off('keyup.search')
            });
            this.$selection.on('keyup.search input', '.select2-search--inline', function (evt) {
              self.handleSearch(evt)
            })
          };
          Search.prototype.createPlaceholder = function (decorated, placeholder) {
            this.$search.attr('placeholder', placeholder.text)
          };
          Search.prototype.update = function (decorated, data) {
            this.$search.attr('placeholder', '');
            decorated.call(this, data);
            this.$selection.find('.select2-selection__rendered').append(this.$searchContainer);
            this.resizeSearch()
          };
          Search.prototype.handleSearch = function () {
            this.resizeSearch();
            if (!this._keyUpPrevented) {
              var input = this.$search.val();
              this.trigger('query', { term: input })
            }
            this._keyUpPrevented = false
          };
          Search.prototype.searchRemoveChoice = function (decorated, item) {
            this.trigger('unselect', { data: item });
            this.trigger('open');
            this.$search.val(item.text + ' ')
          };
          Search.prototype.resizeSearch = function () {
            this.$search.css('width', '25px');
            var width = '';
            if (this.$search.attr('placeholder') !== '') {
              width = this.$selection.find('.select2-selection__rendered').innerWidth()
            } else {
              var minimumWidth = this.$search.val().length + 1;
              width = minimumWidth * 0.75 + 'em'
            }
            this.$search.css('width', width)
          };
          return Search
        });
        S2.define('select2/selection/eventRelay', ['jquery'], function ($) {
          function EventRelay() {
          }
          EventRelay.prototype.bind = function (decorated, container, $container) {
            var self = this;
            var relayEvents = [
              'open',
              'opening',
              'close',
              'closing',
              'select',
              'selecting',
              'unselect',
              'unselecting'
            ];
            var preventableEvents = [
              'opening',
              'closing',
              'selecting',
              'unselecting'
            ];
            decorated.call(this, container, $container);
            container.on('*', function (name, params) {
              // Ignore events that should not be relayed
              if ($.inArray(name, relayEvents) === -1) {
                return
              }
              // The parameters should always be an object
              params = params || {};
              // Generate the jQuery event for the Select2 event
              var evt = $.Event('select2:' + name, { params: params });
              self.$element.trigger(evt);
              // Only handle preventable events if it was one
              if ($.inArray(name, preventableEvents) === -1) {
                return
              }
              params.prevented = evt.isDefaultPrevented()
            })
          };
          return EventRelay
        });
        S2.define('select2/translation', [
          'jquery',
          'require'
        ], function ($, require) {
          function Translation(dict) {
            this.dict = dict || {}
          }
          Translation.prototype.all = function () {
            return this.dict
          };
          Translation.prototype.get = function (key) {
            return this.dict[key]
          };
          Translation.prototype.extend = function (translation) {
            this.dict = $.extend({}, translation.all(), this.dict)
          };
          // Static functions
          Translation._cache = {};
          Translation.loadPath = function (path) {
            if (!(path in Translation._cache)) {
              var translations = require(path);
              Translation._cache[path] = translations
            }
            return new Translation(Translation._cache[path])
          };
          return Translation
        });
        S2.define('select2/diacritics', [], function () {
          var diacritics = {
            'Ⓐ': 'A',
            'Ａ': 'A',
            'À': 'A',
            'Á': 'A',
            'Â': 'A',
            'Ầ': 'A',
            'Ấ': 'A',
            'Ẫ': 'A',
            'Ẩ': 'A',
            'Ã': 'A',
            'Ā': 'A',
            'Ă': 'A',
            'Ằ': 'A',
            'Ắ': 'A',
            'Ẵ': 'A',
            'Ẳ': 'A',
            'Ȧ': 'A',
            'Ǡ': 'A',
            'Ä': 'A',
            'Ǟ': 'A',
            'Ả': 'A',
            'Å': 'A',
            'Ǻ': 'A',
            'Ǎ': 'A',
            'Ȁ': 'A',
            'Ȃ': 'A',
            'Ạ': 'A',
            'Ậ': 'A',
            'Ặ': 'A',
            'Ḁ': 'A',
            'Ą': 'A',
            'Ⱥ': 'A',
            'Ɐ': 'A',
            'Ꜳ': 'AA',
            'Æ': 'AE',
            'Ǽ': 'AE',
            'Ǣ': 'AE',
            'Ꜵ': 'AO',
            'Ꜷ': 'AU',
            'Ꜹ': 'AV',
            'Ꜻ': 'AV',
            'Ꜽ': 'AY',
            'Ⓑ': 'B',
            'Ｂ': 'B',
            'Ḃ': 'B',
            'Ḅ': 'B',
            'Ḇ': 'B',
            'Ƀ': 'B',
            'Ƃ': 'B',
            'Ɓ': 'B',
            'Ⓒ': 'C',
            'Ｃ': 'C',
            'Ć': 'C',
            'Ĉ': 'C',
            'Ċ': 'C',
            'Č': 'C',
            'Ç': 'C',
            'Ḉ': 'C',
            'Ƈ': 'C',
            'Ȼ': 'C',
            'Ꜿ': 'C',
            'Ⓓ': 'D',
            'Ｄ': 'D',
            'Ḋ': 'D',
            'Ď': 'D',
            'Ḍ': 'D',
            'Ḑ': 'D',
            'Ḓ': 'D',
            'Ḏ': 'D',
            'Đ': 'D',
            'Ƌ': 'D',
            'Ɗ': 'D',
            'Ɖ': 'D',
            'Ꝺ': 'D',
            'Ǳ': 'DZ',
            'Ǆ': 'DZ',
            'ǲ': 'Dz',
            'ǅ': 'Dz',
            'Ⓔ': 'E',
            'Ｅ': 'E',
            'È': 'E',
            'É': 'E',
            'Ê': 'E',
            'Ề': 'E',
            'Ế': 'E',
            'Ễ': 'E',
            'Ể': 'E',
            'Ẽ': 'E',
            'Ē': 'E',
            'Ḕ': 'E',
            'Ḗ': 'E',
            'Ĕ': 'E',
            'Ė': 'E',
            'Ë': 'E',
            'Ẻ': 'E',
            'Ě': 'E',
            'Ȅ': 'E',
            'Ȇ': 'E',
            'Ẹ': 'E',
            'Ệ': 'E',
            'Ȩ': 'E',
            'Ḝ': 'E',
            'Ę': 'E',
            'Ḙ': 'E',
            'Ḛ': 'E',
            'Ɛ': 'E',
            'Ǝ': 'E',
            'Ⓕ': 'F',
            'Ｆ': 'F',
            'Ḟ': 'F',
            'Ƒ': 'F',
            'Ꝼ': 'F',
            'Ⓖ': 'G',
            'Ｇ': 'G',
            'Ǵ': 'G',
            'Ĝ': 'G',
            'Ḡ': 'G',
            'Ğ': 'G',
            'Ġ': 'G',
            'Ǧ': 'G',
            'Ģ': 'G',
            'Ǥ': 'G',
            'Ɠ': 'G',
            'Ꞡ': 'G',
            'Ᵹ': 'G',
            'Ꝿ': 'G',
            'Ⓗ': 'H',
            'Ｈ': 'H',
            'Ĥ': 'H',
            'Ḣ': 'H',
            'Ḧ': 'H',
            'Ȟ': 'H',
            'Ḥ': 'H',
            'Ḩ': 'H',
            'Ḫ': 'H',
            'Ħ': 'H',
            'Ⱨ': 'H',
            'Ⱶ': 'H',
            'Ɥ': 'H',
            'Ⓘ': 'I',
            'Ｉ': 'I',
            'Ì': 'I',
            'Í': 'I',
            'Î': 'I',
            'Ĩ': 'I',
            'Ī': 'I',
            'Ĭ': 'I',
            'İ': 'I',
            'Ï': 'I',
            'Ḯ': 'I',
            'Ỉ': 'I',
            'Ǐ': 'I',
            'Ȉ': 'I',
            'Ȋ': 'I',
            'Ị': 'I',
            'Į': 'I',
            'Ḭ': 'I',
            'Ɨ': 'I',
            'Ⓙ': 'J',
            'Ｊ': 'J',
            'Ĵ': 'J',
            'Ɉ': 'J',
            'Ⓚ': 'K',
            'Ｋ': 'K',
            'Ḱ': 'K',
            'Ǩ': 'K',
            'Ḳ': 'K',
            'Ķ': 'K',
            'Ḵ': 'K',
            'Ƙ': 'K',
            'Ⱪ': 'K',
            'Ꝁ': 'K',
            'Ꝃ': 'K',
            'Ꝅ': 'K',
            'Ꞣ': 'K',
            'Ⓛ': 'L',
            'Ｌ': 'L',
            'Ŀ': 'L',
            'Ĺ': 'L',
            'Ľ': 'L',
            'Ḷ': 'L',
            'Ḹ': 'L',
            'Ļ': 'L',
            'Ḽ': 'L',
            'Ḻ': 'L',
            'Ł': 'L',
            'Ƚ': 'L',
            'Ɫ': 'L',
            'Ⱡ': 'L',
            'Ꝉ': 'L',
            'Ꝇ': 'L',
            'Ꞁ': 'L',
            'Ǉ': 'LJ',
            'ǈ': 'Lj',
            'Ⓜ': 'M',
            'Ｍ': 'M',
            'Ḿ': 'M',
            'Ṁ': 'M',
            'Ṃ': 'M',
            'Ɱ': 'M',
            'Ɯ': 'M',
            'Ⓝ': 'N',
            'Ｎ': 'N',
            'Ǹ': 'N',
            'Ń': 'N',
            'Ñ': 'N',
            'Ṅ': 'N',
            'Ň': 'N',
            'Ṇ': 'N',
            'Ņ': 'N',
            'Ṋ': 'N',
            'Ṉ': 'N',
            'Ƞ': 'N',
            'Ɲ': 'N',
            'Ꞑ': 'N',
            'Ꞥ': 'N',
            'Ǌ': 'NJ',
            'ǋ': 'Nj',
            'Ⓞ': 'O',
            'Ｏ': 'O',
            'Ò': 'O',
            'Ó': 'O',
            'Ô': 'O',
            'Ồ': 'O',
            'Ố': 'O',
            'Ỗ': 'O',
            'Ổ': 'O',
            'Õ': 'O',
            'Ṍ': 'O',
            'Ȭ': 'O',
            'Ṏ': 'O',
            'Ō': 'O',
            'Ṑ': 'O',
            'Ṓ': 'O',
            'Ŏ': 'O',
            'Ȯ': 'O',
            'Ȱ': 'O',
            'Ö': 'O',
            'Ȫ': 'O',
            'Ỏ': 'O',
            'Ő': 'O',
            'Ǒ': 'O',
            'Ȍ': 'O',
            'Ȏ': 'O',
            'Ơ': 'O',
            'Ờ': 'O',
            'Ớ': 'O',
            'Ỡ': 'O',
            'Ở': 'O',
            'Ợ': 'O',
            'Ọ': 'O',
            'Ộ': 'O',
            'Ǫ': 'O',
            'Ǭ': 'O',
            'Ø': 'O',
            'Ǿ': 'O',
            'Ɔ': 'O',
            'Ɵ': 'O',
            'Ꝋ': 'O',
            'Ꝍ': 'O',
            'Ƣ': 'OI',
            'Ꝏ': 'OO',
            'Ȣ': 'OU',
            'Ⓟ': 'P',
            'Ｐ': 'P',
            'Ṕ': 'P',
            'Ṗ': 'P',
            'Ƥ': 'P',
            'Ᵽ': 'P',
            'Ꝑ': 'P',
            'Ꝓ': 'P',
            'Ꝕ': 'P',
            'Ⓠ': 'Q',
            'Ｑ': 'Q',
            'Ꝗ': 'Q',
            'Ꝙ': 'Q',
            'Ɋ': 'Q',
            'Ⓡ': 'R',
            'Ｒ': 'R',
            'Ŕ': 'R',
            'Ṙ': 'R',
            'Ř': 'R',
            'Ȑ': 'R',
            'Ȓ': 'R',
            'Ṛ': 'R',
            'Ṝ': 'R',
            'Ŗ': 'R',
            'Ṟ': 'R',
            'Ɍ': 'R',
            'Ɽ': 'R',
            'Ꝛ': 'R',
            'Ꞧ': 'R',
            'Ꞃ': 'R',
            'Ⓢ': 'S',
            'Ｓ': 'S',
            'ẞ': 'S',
            'Ś': 'S',
            'Ṥ': 'S',
            'Ŝ': 'S',
            'Ṡ': 'S',
            'Š': 'S',
            'Ṧ': 'S',
            'Ṣ': 'S',
            'Ṩ': 'S',
            'Ș': 'S',
            'Ş': 'S',
            'Ȿ': 'S',
            'Ꞩ': 'S',
            'Ꞅ': 'S',
            'Ⓣ': 'T',
            'Ｔ': 'T',
            'Ṫ': 'T',
            'Ť': 'T',
            'Ṭ': 'T',
            'Ț': 'T',
            'Ţ': 'T',
            'Ṱ': 'T',
            'Ṯ': 'T',
            'Ŧ': 'T',
            'Ƭ': 'T',
            'Ʈ': 'T',
            'Ⱦ': 'T',
            'Ꞇ': 'T',
            'Ꜩ': 'TZ',
            'Ⓤ': 'U',
            'Ｕ': 'U',
            'Ù': 'U',
            'Ú': 'U',
            'Û': 'U',
            'Ũ': 'U',
            'Ṹ': 'U',
            'Ū': 'U',
            'Ṻ': 'U',
            'Ŭ': 'U',
            'Ü': 'U',
            'Ǜ': 'U',
            'Ǘ': 'U',
            'Ǖ': 'U',
            'Ǚ': 'U',
            'Ủ': 'U',
            'Ů': 'U',
            'Ű': 'U',
            'Ǔ': 'U',
            'Ȕ': 'U',
            'Ȗ': 'U',
            'Ư': 'U',
            'Ừ': 'U',
            'Ứ': 'U',
            'Ữ': 'U',
            'Ử': 'U',
            'Ự': 'U',
            'Ụ': 'U',
            'Ṳ': 'U',
            'Ų': 'U',
            'Ṷ': 'U',
            'Ṵ': 'U',
            'Ʉ': 'U',
            'Ⓥ': 'V',
            'Ｖ': 'V',
            'Ṽ': 'V',
            'Ṿ': 'V',
            'Ʋ': 'V',
            'Ꝟ': 'V',
            'Ʌ': 'V',
            'Ꝡ': 'VY',
            'Ⓦ': 'W',
            'Ｗ': 'W',
            'Ẁ': 'W',
            'Ẃ': 'W',
            'Ŵ': 'W',
            'Ẇ': 'W',
            'Ẅ': 'W',
            'Ẉ': 'W',
            'Ⱳ': 'W',
            'Ⓧ': 'X',
            'Ｘ': 'X',
            'Ẋ': 'X',
            'Ẍ': 'X',
            'Ⓨ': 'Y',
            'Ｙ': 'Y',
            'Ỳ': 'Y',
            'Ý': 'Y',
            'Ŷ': 'Y',
            'Ỹ': 'Y',
            'Ȳ': 'Y',
            'Ẏ': 'Y',
            'Ÿ': 'Y',
            'Ỷ': 'Y',
            'Ỵ': 'Y',
            'Ƴ': 'Y',
            'Ɏ': 'Y',
            'Ỿ': 'Y',
            'Ⓩ': 'Z',
            'Ｚ': 'Z',
            'Ź': 'Z',
            'Ẑ': 'Z',
            'Ż': 'Z',
            'Ž': 'Z',
            'Ẓ': 'Z',
            'Ẕ': 'Z',
            'Ƶ': 'Z',
            'Ȥ': 'Z',
            'Ɀ': 'Z',
            'Ⱬ': 'Z',
            'Ꝣ': 'Z',
            'ⓐ': 'a',
            'ａ': 'a',
            'ẚ': 'a',
            'à': 'a',
            'á': 'a',
            'â': 'a',
            'ầ': 'a',
            'ấ': 'a',
            'ẫ': 'a',
            'ẩ': 'a',
            'ã': 'a',
            'ā': 'a',
            'ă': 'a',
            'ằ': 'a',
            'ắ': 'a',
            'ẵ': 'a',
            'ẳ': 'a',
            'ȧ': 'a',
            'ǡ': 'a',
            'ä': 'a',
            'ǟ': 'a',
            'ả': 'a',
            'å': 'a',
            'ǻ': 'a',
            'ǎ': 'a',
            'ȁ': 'a',
            'ȃ': 'a',
            'ạ': 'a',
            'ậ': 'a',
            'ặ': 'a',
            'ḁ': 'a',
            'ą': 'a',
            'ⱥ': 'a',
            'ɐ': 'a',
            'ꜳ': 'aa',
            'æ': 'ae',
            'ǽ': 'ae',
            'ǣ': 'ae',
            'ꜵ': 'ao',
            'ꜷ': 'au',
            'ꜹ': 'av',
            'ꜻ': 'av',
            'ꜽ': 'ay',
            'ⓑ': 'b',
            'ｂ': 'b',
            'ḃ': 'b',
            'ḅ': 'b',
            'ḇ': 'b',
            'ƀ': 'b',
            'ƃ': 'b',
            'ɓ': 'b',
            'ⓒ': 'c',
            'ｃ': 'c',
            'ć': 'c',
            'ĉ': 'c',
            'ċ': 'c',
            'č': 'c',
            'ç': 'c',
            'ḉ': 'c',
            'ƈ': 'c',
            'ȼ': 'c',
            'ꜿ': 'c',
            'ↄ': 'c',
            'ⓓ': 'd',
            'ｄ': 'd',
            'ḋ': 'd',
            'ď': 'd',
            'ḍ': 'd',
            'ḑ': 'd',
            'ḓ': 'd',
            'ḏ': 'd',
            'đ': 'd',
            'ƌ': 'd',
            'ɖ': 'd',
            'ɗ': 'd',
            'ꝺ': 'd',
            'ǳ': 'dz',
            'ǆ': 'dz',
            'ⓔ': 'e',
            'ｅ': 'e',
            'è': 'e',
            'é': 'e',
            'ê': 'e',
            'ề': 'e',
            'ế': 'e',
            'ễ': 'e',
            'ể': 'e',
            'ẽ': 'e',
            'ē': 'e',
            'ḕ': 'e',
            'ḗ': 'e',
            'ĕ': 'e',
            'ė': 'e',
            'ë': 'e',
            'ẻ': 'e',
            'ě': 'e',
            'ȅ': 'e',
            'ȇ': 'e',
            'ẹ': 'e',
            'ệ': 'e',
            'ȩ': 'e',
            'ḝ': 'e',
            'ę': 'e',
            'ḙ': 'e',
            'ḛ': 'e',
            'ɇ': 'e',
            'ɛ': 'e',
            'ǝ': 'e',
            'ⓕ': 'f',
            'ｆ': 'f',
            'ḟ': 'f',
            'ƒ': 'f',
            'ꝼ': 'f',
            'ⓖ': 'g',
            'ｇ': 'g',
            'ǵ': 'g',
            'ĝ': 'g',
            'ḡ': 'g',
            'ğ': 'g',
            'ġ': 'g',
            'ǧ': 'g',
            'ģ': 'g',
            'ǥ': 'g',
            'ɠ': 'g',
            'ꞡ': 'g',
            'ᵹ': 'g',
            'ꝿ': 'g',
            'ⓗ': 'h',
            'ｈ': 'h',
            'ĥ': 'h',
            'ḣ': 'h',
            'ḧ': 'h',
            'ȟ': 'h',
            'ḥ': 'h',
            'ḩ': 'h',
            'ḫ': 'h',
            'ẖ': 'h',
            'ħ': 'h',
            'ⱨ': 'h',
            'ⱶ': 'h',
            'ɥ': 'h',
            'ƕ': 'hv',
            'ⓘ': 'i',
            'ｉ': 'i',
            'ì': 'i',
            'í': 'i',
            'î': 'i',
            'ĩ': 'i',
            'ī': 'i',
            'ĭ': 'i',
            'ï': 'i',
            'ḯ': 'i',
            'ỉ': 'i',
            'ǐ': 'i',
            'ȉ': 'i',
            'ȋ': 'i',
            'ị': 'i',
            'į': 'i',
            'ḭ': 'i',
            'ɨ': 'i',
            'ı': 'i',
            'ⓙ': 'j',
            'ｊ': 'j',
            'ĵ': 'j',
            'ǰ': 'j',
            'ɉ': 'j',
            'ⓚ': 'k',
            'ｋ': 'k',
            'ḱ': 'k',
            'ǩ': 'k',
            'ḳ': 'k',
            'ķ': 'k',
            'ḵ': 'k',
            'ƙ': 'k',
            'ⱪ': 'k',
            'ꝁ': 'k',
            'ꝃ': 'k',
            'ꝅ': 'k',
            'ꞣ': 'k',
            'ⓛ': 'l',
            'ｌ': 'l',
            'ŀ': 'l',
            'ĺ': 'l',
            'ľ': 'l',
            'ḷ': 'l',
            'ḹ': 'l',
            'ļ': 'l',
            'ḽ': 'l',
            'ḻ': 'l',
            'ſ': 'l',
            'ł': 'l',
            'ƚ': 'l',
            'ɫ': 'l',
            'ⱡ': 'l',
            'ꝉ': 'l',
            'ꞁ': 'l',
            'ꝇ': 'l',
            'ǉ': 'lj',
            'ⓜ': 'm',
            'ｍ': 'm',
            'ḿ': 'm',
            'ṁ': 'm',
            'ṃ': 'm',
            'ɱ': 'm',
            'ɯ': 'm',
            'ⓝ': 'n',
            'ｎ': 'n',
            'ǹ': 'n',
            'ń': 'n',
            'ñ': 'n',
            'ṅ': 'n',
            'ň': 'n',
            'ṇ': 'n',
            'ņ': 'n',
            'ṋ': 'n',
            'ṉ': 'n',
            'ƞ': 'n',
            'ɲ': 'n',
            'ŉ': 'n',
            'ꞑ': 'n',
            'ꞥ': 'n',
            'ǌ': 'nj',
            'ⓞ': 'o',
            'ｏ': 'o',
            'ò': 'o',
            'ó': 'o',
            'ô': 'o',
            'ồ': 'o',
            'ố': 'o',
            'ỗ': 'o',
            'ổ': 'o',
            'õ': 'o',
            'ṍ': 'o',
            'ȭ': 'o',
            'ṏ': 'o',
            'ō': 'o',
            'ṑ': 'o',
            'ṓ': 'o',
            'ŏ': 'o',
            'ȯ': 'o',
            'ȱ': 'o',
            'ö': 'o',
            'ȫ': 'o',
            'ỏ': 'o',
            'ő': 'o',
            'ǒ': 'o',
            'ȍ': 'o',
            'ȏ': 'o',
            'ơ': 'o',
            'ờ': 'o',
            'ớ': 'o',
            'ỡ': 'o',
            'ở': 'o',
            'ợ': 'o',
            'ọ': 'o',
            'ộ': 'o',
            'ǫ': 'o',
            'ǭ': 'o',
            'ø': 'o',
            'ǿ': 'o',
            'ɔ': 'o',
            'ꝋ': 'o',
            'ꝍ': 'o',
            'ɵ': 'o',
            'ƣ': 'oi',
            'ȣ': 'ou',
            'ꝏ': 'oo',
            'ⓟ': 'p',
            'ｐ': 'p',
            'ṕ': 'p',
            'ṗ': 'p',
            'ƥ': 'p',
            'ᵽ': 'p',
            'ꝑ': 'p',
            'ꝓ': 'p',
            'ꝕ': 'p',
            'ⓠ': 'q',
            'ｑ': 'q',
            'ɋ': 'q',
            'ꝗ': 'q',
            'ꝙ': 'q',
            'ⓡ': 'r',
            'ｒ': 'r',
            'ŕ': 'r',
            'ṙ': 'r',
            'ř': 'r',
            'ȑ': 'r',
            'ȓ': 'r',
            'ṛ': 'r',
            'ṝ': 'r',
            'ŗ': 'r',
            'ṟ': 'r',
            'ɍ': 'r',
            'ɽ': 'r',
            'ꝛ': 'r',
            'ꞧ': 'r',
            'ꞃ': 'r',
            'ⓢ': 's',
            'ｓ': 's',
            'ß': 's',
            'ś': 's',
            'ṥ': 's',
            'ŝ': 's',
            'ṡ': 's',
            'š': 's',
            'ṧ': 's',
            'ṣ': 's',
            'ṩ': 's',
            'ș': 's',
            'ş': 's',
            'ȿ': 's',
            'ꞩ': 's',
            'ꞅ': 's',
            'ẛ': 's',
            'ⓣ': 't',
            'ｔ': 't',
            'ṫ': 't',
            'ẗ': 't',
            'ť': 't',
            'ṭ': 't',
            'ț': 't',
            'ţ': 't',
            'ṱ': 't',
            'ṯ': 't',
            'ŧ': 't',
            'ƭ': 't',
            'ʈ': 't',
            'ⱦ': 't',
            'ꞇ': 't',
            'ꜩ': 'tz',
            'ⓤ': 'u',
            'ｕ': 'u',
            'ù': 'u',
            'ú': 'u',
            'û': 'u',
            'ũ': 'u',
            'ṹ': 'u',
            'ū': 'u',
            'ṻ': 'u',
            'ŭ': 'u',
            'ü': 'u',
            'ǜ': 'u',
            'ǘ': 'u',
            'ǖ': 'u',
            'ǚ': 'u',
            'ủ': 'u',
            'ů': 'u',
            'ű': 'u',
            'ǔ': 'u',
            'ȕ': 'u',
            'ȗ': 'u',
            'ư': 'u',
            'ừ': 'u',
            'ứ': 'u',
            'ữ': 'u',
            'ử': 'u',
            'ự': 'u',
            'ụ': 'u',
            'ṳ': 'u',
            'ų': 'u',
            'ṷ': 'u',
            'ṵ': 'u',
            'ʉ': 'u',
            'ⓥ': 'v',
            'ｖ': 'v',
            'ṽ': 'v',
            'ṿ': 'v',
            'ʋ': 'v',
            'ꝟ': 'v',
            'ʌ': 'v',
            'ꝡ': 'vy',
            'ⓦ': 'w',
            'ｗ': 'w',
            'ẁ': 'w',
            'ẃ': 'w',
            'ŵ': 'w',
            'ẇ': 'w',
            'ẅ': 'w',
            'ẘ': 'w',
            'ẉ': 'w',
            'ⱳ': 'w',
            'ⓧ': 'x',
            'ｘ': 'x',
            'ẋ': 'x',
            'ẍ': 'x',
            'ⓨ': 'y',
            'ｙ': 'y',
            'ỳ': 'y',
            'ý': 'y',
            'ŷ': 'y',
            'ỹ': 'y',
            'ȳ': 'y',
            'ẏ': 'y',
            'ÿ': 'y',
            'ỷ': 'y',
            'ẙ': 'y',
            'ỵ': 'y',
            'ƴ': 'y',
            'ɏ': 'y',
            'ỿ': 'y',
            'ⓩ': 'z',
            'ｚ': 'z',
            'ź': 'z',
            'ẑ': 'z',
            'ż': 'z',
            'ž': 'z',
            'ẓ': 'z',
            'ẕ': 'z',
            'ƶ': 'z',
            'ȥ': 'z',
            'ɀ': 'z',
            'ⱬ': 'z',
            'ꝣ': 'z',
            'Ά': 'Α',
            'Έ': 'Ε',
            'Ή': 'Η',
            'Ί': 'Ι',
            'Ϊ': 'Ι',
            'Ό': 'Ο',
            'Ύ': 'Υ',
            'Ϋ': 'Υ',
            'Ώ': 'Ω',
            'ά': 'α',
            'έ': 'ε',
            'ή': 'η',
            'ί': 'ι',
            'ϊ': 'ι',
            'ΐ': 'ι',
            'ό': 'ο',
            'ύ': 'υ',
            'ϋ': 'υ',
            'ΰ': 'υ',
            'ω': 'ω',
            'ς': 'σ'
          };
          return diacritics
        });
        S2.define('select2/data/base', ['../utils'], function (Utils) {
          function BaseAdapter($element, options) {
            BaseAdapter.__super__.constructor.call(this)
          }
          Utils.Extend(BaseAdapter, Utils.Observable);
          BaseAdapter.prototype.current = function (callback) {
            throw new Error('The `current` method must be defined in child classes.')
          };
          BaseAdapter.prototype.query = function (params, callback) {
            throw new Error('The `query` method must be defined in child classes.')
          };
          BaseAdapter.prototype.bind = function (container, $container) {
          };
          BaseAdapter.prototype.destroy = function () {
          };
          BaseAdapter.prototype.generateResultId = function (container, data) {
            var id = container.id + '-result-';
            id += Utils.generateChars(4);
            if (data.id != null) {
              id += '-' + data.id.toString()
            } else {
              id += '-' + Utils.generateChars(4)
            }
            return id
          };
          return BaseAdapter
        });
        S2.define('select2/data/select', [
          './base',
          '../utils',
          'jquery'
        ], function (BaseAdapter, Utils, $) {
          function SelectAdapter($element, options) {
            this.$element = $element;
            this.options = options;
            SelectAdapter.__super__.constructor.call(this)
          }
          Utils.Extend(SelectAdapter, BaseAdapter);
          SelectAdapter.prototype.current = function (callback) {
            var data = [];
            var self = this;
            this.$element.find(':selected').each(function () {
              var $option = $(this);
              var option = self.item($option);
              data.push(option)
            });
            callback(data)
          };
          SelectAdapter.prototype.select = function (data) {
            var self = this;
            data.selected = true;
            // If data.element is a DOM node, use it instead
            if ($(data.element).is('option')) {
              data.element.selected = true;
              this.$element.trigger('change');
              return
            }
            if (this.$element.prop('multiple')) {
              this.current(function (currentData) {
                var val = [];
                data = [data];
                data.push.apply(data, currentData);
                for (var d = 0; d < data.length; d++) {
                  var id = data[d].id;
                  if ($.inArray(id, val) === -1) {
                    val.push(id)
                  }
                }
                self.$element.val(val);
                self.$element.trigger('change')
              })
            } else {
              var val = data.id;
              this.$element.val(val);
              this.$element.trigger('change')
            }
          };
          SelectAdapter.prototype.unselect = function (data) {
            var self = this;
            if (!this.$element.prop('multiple')) {
              return
            }
            data.selected = false;
            if ($(data.element).is('option')) {
              data.element.selected = false;
              this.$element.trigger('change');
              return
            }
            this.current(function (currentData) {
              var val = [];
              for (var d = 0; d < currentData.length; d++) {
                var id = currentData[d].id;
                if (id !== data.id && $.inArray(id, val) === -1) {
                  val.push(id)
                }
              }
              self.$element.val(val);
              self.$element.trigger('change')
            })
          };
          SelectAdapter.prototype.bind = function (container, $container) {
            var self = this;
            this.container = container;
            container.on('select', function (params) {
              self.select(params.data)
            });
            container.on('unselect', function (params) {
              self.unselect(params.data)
            })
          };
          SelectAdapter.prototype.destroy = function () {
            // Remove anything added to child elements
            this.$element.find('*').each(function () {
              // Remove any custom data set by Select2
              $.removeData(this, 'data')
            })
          };
          SelectAdapter.prototype.query = function (params, callback) {
            var data = [];
            var self = this;
            var $options = this.$element.children();
            $options.each(function () {
              var $option = $(this);
              if (!$option.is('option') && !$option.is('optgroup')) {
                return
              }
              var option = self.item($option);
              var matches = self.matches(params, option);
              if (matches !== null) {
                data.push(matches)
              }
            });
            callback({ results: data })
          };
          SelectAdapter.prototype.addOptions = function ($options) {
            Utils.appendMany(this.$element, $options)
          };
          SelectAdapter.prototype.option = function (data) {
            var option;
            if (data.children) {
              option = document.createElement('optgroup');
              option.label = data.text
            } else {
              option = document.createElement('option');
              if (option.textContent !== undefined) {
                option.textContent = data.text
              } else {
                option.innerText = data.text
              }
            }
            if (data.id) {
              option.value = data.id
            }
            if (data.disabled) {
              option.disabled = true
            }
            if (data.selected) {
              option.selected = true
            }
            if (data.title) {
              option.title = data.title
            }
            var $option = $(option);
            var normalizedData = this._normalizeItem(data);
            normalizedData.element = option;
            // Override the option's data with the combined data
            $.data(option, 'data', normalizedData);
            return $option
          };
          SelectAdapter.prototype.item = function ($option) {
            var data = {};
            data = $.data($option[0], 'data');
            if (data != null) {
              return data
            }
            if ($option.is('option')) {
              data = {
                id: $option.val(),
                text: $option.text(),
                disabled: $option.prop('disabled'),
                selected: $option.prop('selected'),
                title: $option.prop('title')
              }
            } else if ($option.is('optgroup')) {
              data = {
                text: $option.prop('label'),
                children: [],
                title: $option.prop('title')
              };
              var $children = $option.children('option');
              var children = [];
              for (var c = 0; c < $children.length; c++) {
                var $child = $($children[c]);
                var child = this.item($child);
                children.push(child)
              }
              data.children = children
            }
            data = this._normalizeItem(data);
            data.element = $option[0];
            $.data($option[0], 'data', data);
            return data
          };
          SelectAdapter.prototype._normalizeItem = function (item) {
            if (!$.isPlainObject(item)) {
              item = {
                id: item,
                text: item
              }
            }
            item = $.extend({}, { text: '' }, item);
            var defaults = {
              selected: false,
              disabled: false
            };
            if (item.id != null) {
              item.id = item.id.toString()
            }
            if (item.text != null) {
              item.text = item.text.toString()
            }
            if (item._resultId == null && item.id && this.container != null) {
              item._resultId = this.generateResultId(this.container, item)
            }
            return $.extend({}, defaults, item)
          };
          SelectAdapter.prototype.matches = function (params, data) {
            var matcher = this.options.get('matcher');
            return matcher(params, data)
          };
          return SelectAdapter
        });
        S2.define('select2/data/array', [
          './select',
          '../utils',
          'jquery'
        ], function (SelectAdapter, Utils, $) {
          function ArrayAdapter($element, options) {
            var data = options.get('data') || [];
            ArrayAdapter.__super__.constructor.call(this, $element, options);
            this.addOptions(this.convertToOptions(data))
          }
          Utils.Extend(ArrayAdapter, SelectAdapter);
          ArrayAdapter.prototype.select = function (data) {
            var $option = this.$element.find('option').filter(function (i, elm) {
              return elm.value == data.id.toString()
            });
            if ($option.length === 0) {
              $option = this.option(data);
              this.addOptions($option)
            }
            ArrayAdapter.__super__.select.call(this, data)
          };
          ArrayAdapter.prototype.convertToOptions = function (data) {
            var self = this;
            var $existing = this.$element.find('option');
            var existingIds = $existing.map(function () {
              return self.item($(this)).id
            }).get();
            var $options = [];
            // Filter out all items except for the one passed in the argument
            function onlyItem(item) {
              return function () {
                return $(this).val() == item.id
              }
            }
            for (var d = 0; d < data.length; d++) {
              var item = this._normalizeItem(data[d]);
              // Skip items which were pre-loaded, only merge the data
              if ($.inArray(item.id, existingIds) >= 0) {
                var $existingOption = $existing.filter(onlyItem(item));
                var existingData = this.item($existingOption);
                var newData = $.extend(true, {}, existingData, item);
                var $newOption = this.option(existingData);
                $existingOption.replaceWith($newOption);
                continue
              }
              var $option = this.option(item);
              if (item.children) {
                var $children = this.convertToOptions(item.children);
                Utils.appendMany($option, $children)
              }
              $options.push($option)
            }
            return $options
          };
          return ArrayAdapter
        });
        S2.define('select2/data/ajax', [
          './array',
          '../utils',
          'jquery'
        ], function (ArrayAdapter, Utils, $) {
          function AjaxAdapter($element, options) {
            this.ajaxOptions = this._applyDefaults(options.get('ajax'));
            if (this.ajaxOptions.processResults != null) {
              this.processResults = this.ajaxOptions.processResults
            }
            ArrayAdapter.__super__.constructor.call(this, $element, options)
          }
          Utils.Extend(AjaxAdapter, ArrayAdapter);
          AjaxAdapter.prototype._applyDefaults = function (options) {
            var defaults = {
              data: function (params) {
                return { q: params.term }
              },
              transport: function (params, success, failure) {
                var $request = $.ajax(params);
                $request.then(success);
                $request.fail(failure);
                return $request
              }
            };
            return $.extend({}, defaults, options, true)
          };
          AjaxAdapter.prototype.processResults = function (results) {
            return results
          };
          AjaxAdapter.prototype.query = function (params, callback) {
            var matches = [];
            var self = this;
            if (this._request != null) {
              // JSONP requests cannot always be aborted
              if ($.isFunction(this._request.abort)) {
                this._request.abort()
              }
              this._request = null
            }
            var options = $.extend({ type: 'GET' }, this.ajaxOptions);
            if (typeof options.url === 'function') {
              options.url = options.url(params)
            }
            if (typeof options.data === 'function') {
              options.data = options.data(params)
            }
            function request() {
              var $request = options.transport(options, function (data) {
                var results = self.processResults(data, params);
                if (self.options.get('debug') && window.console && console.error) {
                  // Check to make sure that the response included a `results` key.
                  if (!results || !results.results || !$.isArray(results.results)) {
                    console.error('Select2: The AJAX results did not return an array in the ' + '`results` key of the response.')
                  }
                }
                callback(results)
              }, function () {
              });
              self._request = $request
            }
            if (this.ajaxOptions.delay && params.term !== '') {
              if (this._queryTimeout) {
                window.clearTimeout(this._queryTimeout)
              }
              this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay)
            } else {
              request()
            }
          };
          return AjaxAdapter
        });
        S2.define('select2/data/tags', ['jquery'], function ($) {
          function Tags(decorated, $element, options) {
            var tags = options.get('tags');
            var createTag = options.get('createTag');
            if (createTag !== undefined) {
              this.createTag = createTag
            }
            decorated.call(this, $element, options);
            if ($.isArray(tags)) {
              for (var t = 0; t < tags.length; t++) {
                var tag = tags[t];
                var item = this._normalizeItem(tag);
                var $option = this.option(item);
                this.$element.append($option)
              }
            }
          }
          Tags.prototype.query = function (decorated, params, callback) {
            var self = this;
            this._removeOldTags();
            if (params.term == null || params.page != null) {
              decorated.call(this, params, callback);
              return
            }
            function wrapper(obj, child) {
              var data = obj.results;
              for (var i = 0; i < data.length; i++) {
                var option = data[i];
                var checkChildren = option.children != null && !wrapper({ results: option.children }, true);
                var checkText = option.text === params.term;
                if (checkText || checkChildren) {
                  if (child) {
                    return false
                  }
                  obj.data = data;
                  callback(obj);
                  return
                }
              }
              if (child) {
                return true
              }
              var tag = self.createTag(params);
              if (tag != null) {
                var $option = self.option(tag);
                $option.attr('data-select2-tag', true);
                self.addOptions([$option]);
                self.insertTag(data, tag)
              }
              obj.results = data;
              callback(obj)
            }
            decorated.call(this, params, wrapper)
          };
          Tags.prototype.createTag = function (decorated, params) {
            var term = $.trim(params.term);
            if (term === '') {
              return null
            }
            return {
              id: term,
              text: term
            }
          };
          Tags.prototype.insertTag = function (_, data, tag) {
            data.unshift(tag)
          };
          Tags.prototype._removeOldTags = function (_) {
            var tag = this._lastTag;
            var $options = this.$element.find('option[data-select2-tag]');
            $options.each(function () {
              if (this.selected) {
                return
              }
              $(this).remove()
            })
          };
          return Tags
        });
        S2.define('select2/data/tokenizer', ['jquery'], function ($) {
          function Tokenizer(decorated, $element, options) {
            var tokenizer = options.get('tokenizer');
            if (tokenizer !== undefined) {
              this.tokenizer = tokenizer
            }
            decorated.call(this, $element, options)
          }
          Tokenizer.prototype.bind = function (decorated, container, $container) {
            decorated.call(this, container, $container);
            this.$search = container.dropdown.$search || container.selection.$search || $container.find('.select2-search__field')
          };
          Tokenizer.prototype.query = function (decorated, params, callback) {
            var self = this;
            function select(data) {
              self.select(data)
            }
            params.term = params.term || '';
            var tokenData = this.tokenizer(params, this.options, select);
            if (tokenData.term !== params.term) {
              // Replace the search term if we have the search box
              if (this.$search.length) {
                this.$search.val(tokenData.term);
                this.$search.focus()
              }
              params.term = tokenData.term
            }
            decorated.call(this, params, callback)
          };
          Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
            var separators = options.get('tokenSeparators') || [];
            var term = params.term;
            var i = 0;
            var createTag = this.createTag || function (params) {
              return {
                id: params.term,
                text: params.term
              }
            };
            while (i < term.length) {
              var termChar = term[i];
              if ($.inArray(termChar, separators) === -1) {
                i++;
                continue
              }
              var part = term.substr(0, i);
              var partParams = $.extend({}, params, { term: part });
              var data = createTag(partParams);
              callback(data);
              // Reset the term to not include the tokenized portion
              term = term.substr(i + 1) || '';
              i = 0
            }
            return { term: term }
          };
          return Tokenizer
        });
        S2.define('select2/data/minimumInputLength', [], function () {
          function MinimumInputLength(decorated, $e, options) {
            this.minimumInputLength = options.get('minimumInputLength');
            decorated.call(this, $e, options)
          }
          MinimumInputLength.prototype.query = function (decorated, params, callback) {
            params.term = params.term || '';
            if (params.term.length < this.minimumInputLength) {
              this.trigger('results:message', {
                message: 'inputTooShort',
                args: {
                  minimum: this.minimumInputLength,
                  input: params.term,
                  params: params
                }
              });
              return
            }
            decorated.call(this, params, callback)
          };
          return MinimumInputLength
        });
        S2.define('select2/data/maximumInputLength', [], function () {
          function MaximumInputLength(decorated, $e, options) {
            this.maximumInputLength = options.get('maximumInputLength');
            decorated.call(this, $e, options)
          }
          MaximumInputLength.prototype.query = function (decorated, params, callback) {
            params.term = params.term || '';
            if (this.maximumInputLength > 0 && params.term.length > this.maximumInputLength) {
              this.trigger('results:message', {
                message: 'inputTooLong',
                args: {
                  maximum: this.maximumInputLength,
                  input: params.term,
                  params: params
                }
              });
              return
            }
            decorated.call(this, params, callback)
          };
          return MaximumInputLength
        });
        S2.define('select2/data/maximumSelectionLength', [], function () {
          function MaximumSelectionLength(decorated, $e, options) {
            this.maximumSelectionLength = options.get('maximumSelectionLength');
            decorated.call(this, $e, options)
          }
          MaximumSelectionLength.prototype.query = function (decorated, params, callback) {
            var self = this;
            this.current(function (currentData) {
              var count = currentData != null ? currentData.length : 0;
              if (self.maximumSelectionLength > 0 && count >= self.maximumSelectionLength) {
                self.trigger('results:message', {
                  message: 'maximumSelected',
                  args: { maximum: self.maximumSelectionLength }
                });
                return
              }
              decorated.call(self, params, callback)
            })
          };
          return MaximumSelectionLength
        });
        S2.define('select2/dropdown', [
          'jquery',
          './utils'
        ], function ($, Utils) {
          function Dropdown($element, options) {
            this.$element = $element;
            this.options = options;
            Dropdown.__super__.constructor.call(this)
          }
          Utils.Extend(Dropdown, Utils.Observable);
          Dropdown.prototype.render = function () {
            var $dropdown = $('<span class="select2-dropdown">' + '<span class="select2-results"></span>' + '</span>');
            $dropdown.attr('dir', this.options.get('dir'));
            this.$dropdown = $dropdown;
            return $dropdown
          };
          Dropdown.prototype.position = function ($dropdown, $container) {
          };
          Dropdown.prototype.destroy = function () {
            // Remove the dropdown from the DOM
            this.$dropdown.remove()
          };
          return Dropdown
        });
        S2.define('select2/dropdown/search', [
          'jquery',
          '../utils'
        ], function ($, Utils) {
          function Search() {
          }
          Search.prototype.render = function (decorated) {
            var $rendered = decorated.call(this);
            var $search = $('<span class="select2-search select2-search--dropdown">' + '<input class="select2-search__field" type="search" tabindex="-1"' + ' autocomplete="off" autocorrect="off" autocapitalize="off"' + ' spellcheck="false" role="textbox" />' + '</span>');
            this.$searchContainer = $search;
            this.$search = $search.find('input');
            $rendered.prepend($search);
            return $rendered
          };
          Search.prototype.bind = function (decorated, container, $container) {
            var self = this;
            decorated.call(this, container, $container);
            this.$search.on('keydown', function (evt) {
              self.trigger('keypress', evt);
              self._keyUpPrevented = evt.isDefaultPrevented()
            });
            // Workaround for browsers which do not support the `input` event
            // This will prevent double-triggering of events for browsers which support
            // both the `keyup` and `input` events.
            this.$search.on('input', function (evt) {
              // Unbind the duplicated `keyup` event
              $(this).off('keyup')
            });
            this.$search.on('keyup input', function (evt) {
              self.handleSearch(evt)
            });
            container.on('open', function () {
              self.$search.attr('tabindex', 0);
              self.$search.focus();
              window.setTimeout(function () {
                self.$search.focus()
              }, 0)
            });
            container.on('close', function () {
              self.$search.attr('tabindex', -1);
              self.$search.val('')
            });
            container.on('results:all', function (params) {
              if (params.query.term == null || params.query.term === '') {
                var showSearch = self.showSearch(params);
                if (showSearch) {
                  self.$searchContainer.removeClass('select2-search--hide')
                } else {
                  self.$searchContainer.addClass('select2-search--hide')
                }
              }
            })
          };
          Search.prototype.handleSearch = function (evt) {
            if (!this._keyUpPrevented) {
              var input = this.$search.val();
              this.trigger('query', { term: input })
            }
            this._keyUpPrevented = false
          };
          Search.prototype.showSearch = function (_, params) {
            return true
          };
          return Search
        });
        S2.define('select2/dropdown/hidePlaceholder', [], function () {
          function HidePlaceholder(decorated, $element, options, dataAdapter) {
            this.placeholder = this.normalizePlaceholder(options.get('placeholder'));
            decorated.call(this, $element, options, dataAdapter)
          }
          HidePlaceholder.prototype.append = function (decorated, data) {
            data.results = this.removePlaceholder(data.results);
            decorated.call(this, data)
          };
          HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
            if (typeof placeholder === 'string') {
              placeholder = {
                id: '',
                text: placeholder
              }
            }
            return placeholder
          };
          HidePlaceholder.prototype.removePlaceholder = function (_, data) {
            var modifiedData = data.slice(0);
            for (var d = data.length - 1; d >= 0; d--) {
              var item = data[d];
              if (this.placeholder.id === item.id) {
                modifiedData.splice(d, 1)
              }
            }
            return modifiedData
          };
          return HidePlaceholder
        });
        S2.define('select2/dropdown/infiniteScroll', ['jquery'], function ($) {
          function InfiniteScroll(decorated, $element, options, dataAdapter) {
            this.lastParams = {};
            decorated.call(this, $element, options, dataAdapter);
            this.$loadingMore = this.createLoadingMore();
            this.loading = false
          }
          InfiniteScroll.prototype.append = function (decorated, data) {
            this.$loadingMore.remove();
            this.loading = false;
            decorated.call(this, data);
            if (this.showLoadingMore(data)) {
              this.$results.append(this.$loadingMore)
            }
          };
          InfiniteScroll.prototype.bind = function (decorated, container, $container) {
            var self = this;
            decorated.call(this, container, $container);
            container.on('query', function (params) {
              self.lastParams = params;
              self.loading = true
            });
            container.on('query:append', function (params) {
              self.lastParams = params;
              self.loading = true
            });
            this.$results.on('scroll', function () {
              var isLoadMoreVisible = $.contains(document.documentElement, self.$loadingMore[0]);
              if (self.loading || !isLoadMoreVisible) {
                return
              }
              var currentOffset = self.$results.offset().top + self.$results.outerHeight(false);
              var loadingMoreOffset = self.$loadingMore.offset().top + self.$loadingMore.outerHeight(false);
              if (currentOffset + 50 >= loadingMoreOffset) {
                self.loadMore()
              }
            })
          };
          InfiniteScroll.prototype.loadMore = function () {
            this.loading = true;
            var params = $.extend({}, { page: 1 }, this.lastParams);
            params.page++;
            this.trigger('query:append', params)
          };
          InfiniteScroll.prototype.showLoadingMore = function (_, data) {
            return data.pagination && data.pagination.more
          };
          InfiniteScroll.prototype.createLoadingMore = function () {
            var $option = $('<li class="option load-more" role="treeitem"></li>');
            var message = this.options.get('translations').get('loadingMore');
            $option.html(message(this.lastParams));
            return $option
          };
          return InfiniteScroll
        });
        S2.define('select2/dropdown/attachBody', [
          'jquery',
          '../utils'
        ], function ($, Utils) {
          function AttachBody(decorated, $element, options) {
            this.$dropdownParent = options.get('dropdownParent') || document.body;
            decorated.call(this, $element, options)
          }
          AttachBody.prototype.bind = function (decorated, container, $container) {
            var self = this;
            var setupResultsEvents = false;
            decorated.call(this, container, $container);
            container.on('open', function () {
              self._showDropdown();
              self._attachPositioningHandler(container);
              if (!setupResultsEvents) {
                setupResultsEvents = true;
                container.on('results:all', function () {
                  self._positionDropdown();
                  self._resizeDropdown()
                });
                container.on('results:append', function () {
                  self._positionDropdown();
                  self._resizeDropdown()
                })
              }
            });
            container.on('close', function () {
              self._hideDropdown();
              self._detachPositioningHandler(container)
            });
            this.$dropdownContainer.on('mousedown', function (evt) {
              evt.stopPropagation()
            })
          };
          AttachBody.prototype.position = function (decorated, $dropdown, $container) {
            // Clone all of the container classes
            $dropdown.attr('class', $container.attr('class'));
            $dropdown.removeClass('select2');
            $dropdown.addClass('select2-container--open');
            $dropdown.css({
              position: 'absolute',
              top: -999999
            });
            this.$container = $container
          };
          AttachBody.prototype.render = function (decorated) {
            var $container = $('<span></span>');
            var $dropdown = decorated.call(this);
            $container.append($dropdown);
            this.$dropdownContainer = $container;
            return $container
          };
          AttachBody.prototype._hideDropdown = function (decorated) {
            this.$dropdownContainer.detach()
          };
          AttachBody.prototype._attachPositioningHandler = function (container) {
            var self = this;
            var scrollEvent = 'scroll.select2.' + container.id;
            var resizeEvent = 'resize.select2.' + container.id;
            var orientationEvent = 'orientationchange.select2.' + container.id;
            var $watchers = this.$container.parents().filter(Utils.hasScroll);
            $watchers.each(function () {
              $(this).data('select2-scroll-position', {
                x: $(this).scrollLeft(),
                y: $(this).scrollTop()
              })
            });
            $watchers.on(scrollEvent, function (ev) {
              var position = $(this).data('select2-scroll-position');
              $(this).scrollTop(position.y)
            });
            $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent, function (e) {
              self._positionDropdown();
              self._resizeDropdown()
            })
          };
          AttachBody.prototype._detachPositioningHandler = function (container) {
            var scrollEvent = 'scroll.select2.' + container.id;
            var resizeEvent = 'resize.select2.' + container.id;
            var orientationEvent = 'orientationchange.select2.' + container.id;
            var $watchers = this.$container.parents().filter(Utils.hasScroll);
            $watchers.off(scrollEvent);
            $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent)
          };
          AttachBody.prototype._positionDropdown = function () {
            var $window = $(window);
            var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
            var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');
            var newDirection = null;
            var position = this.$container.position();
            var offset = this.$container.offset();
            offset.bottom = offset.top + this.$container.outerHeight(false);
            var container = { height: this.$container.outerHeight(false) };
            container.top = offset.top;
            container.bottom = offset.top + container.height;
            var dropdown = { height: this.$dropdown.outerHeight(false) };
            var viewport = {
              top: $window.scrollTop(),
              bottom: $window.scrollTop() + $window.height()
            };
            var enoughRoomAbove = viewport.top < offset.top - dropdown.height;
            var enoughRoomBelow = viewport.bottom > offset.bottom + dropdown.height;
            var css = {
              left: offset.left,
              top: container.bottom
            };
            if (!isCurrentlyAbove && !isCurrentlyBelow) {
              newDirection = 'below'
            }
            if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
              newDirection = 'above'
            } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
              newDirection = 'below'
            }
            if (newDirection == 'above' || isCurrentlyAbove && newDirection !== 'below') {
              css.top = container.top - dropdown.height
            }
            if (newDirection != null) {
              this.$dropdown.removeClass('select2-dropdown--below select2-dropdown--above').addClass('select2-dropdown--' + newDirection);
              this.$container.removeClass('select2-container--below select2-container--above').addClass('select2-container--' + newDirection)
            }
            this.$dropdownContainer.css(css)
          };
          AttachBody.prototype._resizeDropdown = function () {
            this.$dropdownContainer.width();
            var css = { width: this.$container.outerWidth(false) + 'px' };
            if (this.options.get('dropdownAutoWidth')) {
              css.minWidth = css.width;
              css.width = 'auto'
            }
            this.$dropdown.css(css)
          };
          AttachBody.prototype._showDropdown = function (decorated) {
            this.$dropdownContainer.appendTo(this.$dropdownParent);
            this._positionDropdown();
            this._resizeDropdown()
          };
          return AttachBody
        });
        S2.define('select2/dropdown/minimumResultsForSearch', [], function () {
          function countResults(data) {
            var count = 0;
            for (var d = 0; d < data.length; d++) {
              var item = data[d];
              if (item.children) {
                count += countResults(item.children)
              } else {
                count++
              }
            }
            return count
          }
          function MinimumResultsForSearch(decorated, $element, options, dataAdapter) {
            this.minimumResultsForSearch = options.get('minimumResultsForSearch');
            if (this.minimumResultsForSearch < 0) {
              this.minimumResultsForSearch = Infinity
            }
            decorated.call(this, $element, options, dataAdapter)
          }
          MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
            if (countResults(params.data.results) < this.minimumResultsForSearch) {
              return false
            }
            return decorated.call(this, params)
          };
          return MinimumResultsForSearch
        });
        S2.define('select2/dropdown/selectOnClose', [], function () {
          function SelectOnClose() {
          }
          SelectOnClose.prototype.bind = function (decorated, container, $container) {
            var self = this;
            decorated.call(this, container, $container);
            container.on('close', function () {
              self._handleSelectOnClose()
            })
          };
          SelectOnClose.prototype._handleSelectOnClose = function () {
            var $highlightedResults = this.getHighlightedResults();
            if ($highlightedResults.length < 1) {
              return
            }
            this.trigger('select', { data: $highlightedResults.data('data') })
          };
          return SelectOnClose
        });
        S2.define('select2/dropdown/closeOnSelect', [], function () {
          function CloseOnSelect() {
          }
          CloseOnSelect.prototype.bind = function (decorated, container, $container) {
            var self = this;
            decorated.call(this, container, $container);
            container.on('select', function (evt) {
              self._selectTriggered(evt)
            });
            container.on('unselect', function (evt) {
              self._selectTriggered(evt)
            })
          };
          CloseOnSelect.prototype._selectTriggered = function (_, evt) {
            var originalEvent = evt.originalEvent;
            // Don't close if the control key is being held
            if (originalEvent && originalEvent.ctrlKey) {
              return
            }
            this.trigger('close')
          };
          return CloseOnSelect
        });
        S2.define('select2/i18n/en', [], function () {
          // English
          return {
            errorLoading: function () {
              return 'The results could not be loaded.'
            },
            inputTooLong: function (args) {
              var overChars = args.input.length - args.maximum;
              var message = 'Please delete ' + overChars + ' character';
              if (overChars != 1) {
                message += 's'
              }
              return message
            },
            inputTooShort: function (args) {
              var remainingChars = args.minimum - args.input.length;
              var message = 'Please enter ' + remainingChars + ' or more characters';
              return message
            },
            loadingMore: function () {
              return 'Loading more results…'
            },
            maximumSelected: function (args) {
              var message = 'You can only select ' + args.maximum + ' item';
              if (args.maximum != 1) {
                message += 's'
              }
              return message
            },
            noResults: function () {
              return 'No results found'
            },
            searching: function () {
              return 'Searching…'
            }
          }
        });
        S2.define('select2/defaults', [
          'jquery',
          'require',
          './results',
          './selection/single',
          './selection/multiple',
          './selection/placeholder',
          './selection/allowClear',
          './selection/search',
          './selection/eventRelay',
          './utils',
          './translation',
          './diacritics',
          './data/select',
          './data/array',
          './data/ajax',
          './data/tags',
          './data/tokenizer',
          './data/minimumInputLength',
          './data/maximumInputLength',
          './data/maximumSelectionLength',
          './dropdown',
          './dropdown/search',
          './dropdown/hidePlaceholder',
          './dropdown/infiniteScroll',
          './dropdown/attachBody',
          './dropdown/minimumResultsForSearch',
          './dropdown/selectOnClose',
          './dropdown/closeOnSelect',
          './i18n/en'
        ], function ($, require, ResultsList, SingleSelection, MultipleSelection, Placeholder, AllowClear, SelectionSearch, EventRelay, Utils, Translation, DIACRITICS, SelectData, ArrayData, AjaxData, Tags, Tokenizer, MinimumInputLength, MaximumInputLength, MaximumSelectionLength, Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll, AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect, EnglishTranslation) {
          function Defaults() {
            this.reset()
          }
          Defaults.prototype.apply = function (options) {
            options = $.extend({}, this.defaults, options);
            if (options.dataAdapter == null) {
              if (options.ajax != null) {
                options.dataAdapter = AjaxData
              } else if (options.data != null) {
                options.dataAdapter = ArrayData
              } else {
                options.dataAdapter = SelectData
              }
              if (options.minimumInputLength > 0) {
                options.dataAdapter = Utils.Decorate(options.dataAdapter, MinimumInputLength)
              }
              if (options.maximumInputLength > 0) {
                options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumInputLength)
              }
              if (options.maximumSelectionLength > 0) {
                options.dataAdapter = Utils.Decorate(options.dataAdapter, MaximumSelectionLength)
              }
              if (options.tags) {
                options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags)
              }
              if (options.tokenSeparators != null || options.tokenizer != null) {
                options.dataAdapter = Utils.Decorate(options.dataAdapter, Tokenizer)
              }
              if (options.query != null) {
                var Query = require(options.amdBase + 'compat/query');
                options.dataAdapter = Utils.Decorate(options.dataAdapter, Query)
              }
              if (options.initSelection != null) {
                var InitSelection = require(options.amdBase + 'compat/initSelection');
                options.dataAdapter = Utils.Decorate(options.dataAdapter, InitSelection)
              }
            }
            if (options.resultsAdapter == null) {
              options.resultsAdapter = ResultsList;
              if (options.ajax != null) {
                options.resultsAdapter = Utils.Decorate(options.resultsAdapter, InfiniteScroll)
              }
              if (options.placeholder != null) {
                options.resultsAdapter = Utils.Decorate(options.resultsAdapter, HidePlaceholder)
              }
              if (options.selectOnClose) {
                options.resultsAdapter = Utils.Decorate(options.resultsAdapter, SelectOnClose)
              }
            }
            if (options.dropdownAdapter == null) {
              if (options.multiple) {
                options.dropdownAdapter = Dropdown
              } else {
                var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);
                options.dropdownAdapter = SearchableDropdown
              }
              if (options.minimumResultsForSearch !== 0) {
                options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, MinimumResultsForSearch)
              }
              if (options.closeOnSelect) {
                options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, CloseOnSelect)
              }
              if (options.dropdownCssClass != null || options.dropdownCss != null || options.adaptDropdownCssClass != null) {
                var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');
                options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, DropdownCSS)
              }
              options.dropdownAdapter = Utils.Decorate(options.dropdownAdapter, AttachBody)
            }
            if (options.selectionAdapter == null) {
              if (options.multiple) {
                options.selectionAdapter = MultipleSelection
              } else {
                options.selectionAdapter = SingleSelection
              }
              // Add the placeholder mixin if a placeholder was specified
              if (options.placeholder != null) {
                options.selectionAdapter = Utils.Decorate(options.selectionAdapter, Placeholder)
              }
              if (options.allowClear) {
                options.selectionAdapter = Utils.Decorate(options.selectionAdapter, AllowClear)
              }
              if (options.multiple) {
                options.selectionAdapter = Utils.Decorate(options.selectionAdapter, SelectionSearch)
              }
              if (options.containerCssClass != null || options.containerCss != null || options.adaptContainerCssClass != null) {
                var ContainerCSS = require(options.amdBase + 'compat/containerCss');
                options.selectionAdapter = Utils.Decorate(options.selectionAdapter, ContainerCSS)
              }
              options.selectionAdapter = Utils.Decorate(options.selectionAdapter, EventRelay)
            }
            if (typeof options.language === 'string') {
              // Check if the language is specified with a region
              if (options.language.indexOf('-') > 0) {
                // Extract the region information if it is included
                var languageParts = options.language.split('-');
                var baseLanguage = languageParts[0];
                options.language = [
                  options.language,
                  baseLanguage
                ]
              } else {
                options.language = [options.language]
              }
            }
            if ($.isArray(options.language)) {
              var languages = new Translation;
              options.language.push('en');
              var languageNames = options.language;
              for (var l = 0; l < languageNames.length; l++) {
                var name = languageNames[l];
                var language = {};
                try {
                  // Try to load it with the original name
                  language = Translation.loadPath(name)
                } catch (e) {
                  try {
                    // If we couldn't load it, check if it wasn't the full path
                    name = this.defaults.amdLanguageBase + name;
                    language = Translation.loadPath(name)
                  } catch (ex) {
                    // The translation could not be loaded at all. Sometimes this is
                    // because of a configuration problem, other times this can be
                    // because of how Select2 helps load all possible translation files.
                    if (options.debug && window.console && console.warn) {
                      console.warn('Select2: The language file for "' + name + '" could not be ' + 'automatically loaded. A fallback will be used instead.')
                    }
                    continue
                  }
                }
                languages.extend(language)
              }
              options.translations = languages
            } else {
              var baseTranslation = Translation.loadPath(this.defaults.amdLanguageBase + 'en');
              var customTranslation = new Translation(options.language);
              customTranslation.extend(baseTranslation);
              options.translations = customTranslation
            }
            return options
          };
          Defaults.prototype.reset = function () {
            function stripDiacritics(text) {
              // Used 'uni range + named function' from http://jsperf.com/diacritics/18
              function match(a) {
                return DIACRITICS[a] || a
              }
              return text.replace(/[^\u0000-\u007E]/g, match)
            }
            function matcher(params, data) {
              // Always return the object if there is nothing to compare
              if ($.trim(params.term) === '') {
                return data
              }
              // Do a recursive check for options with children
              if (data.children && data.children.length > 0) {
                // Clone the data object if there are children
                // This is required as we modify the object to remove any non-matches
                var match = $.extend(true, {}, data);
                // Check each child of the option
                for (var c = data.children.length - 1; c >= 0; c--) {
                  var child = data.children[c];
                  var matches = matcher(params, child);
                  // If there wasn't a match, remove the object in the array
                  if (matches == null) {
                    match.children.splice(c, 1)
                  }
                }
                // If any children matched, return the new object
                if (match.children.length > 0) {
                  return match
                }
                // If there were no matching children, check just the plain object
                return matcher(params, match)
              }
              var original = stripDiacritics(data.text).toUpperCase();
              var term = stripDiacritics(params.term).toUpperCase();
              // Check if the text contains the term
              if (original.indexOf(term) > -1) {
                return data
              }
              // If it doesn't contain the term, don't return anything
              return null
            }
            this.defaults = {
              amdBase: './',
              amdLanguageBase: './i18n/',
              closeOnSelect: true,
              debug: false,
              dropdownAutoWidth: false,
              escapeMarkup: Utils.escapeMarkup,
              language: EnglishTranslation,
              matcher: matcher,
              minimumInputLength: 0,
              maximumInputLength: 0,
              maximumSelectionLength: 0,
              minimumResultsForSearch: 0,
              selectOnClose: false,
              sorter: function (data) {
                return data
              },
              templateResult: function (result) {
                return result.text
              },
              templateSelection: function (selection) {
                return selection.text
              },
              theme: 'default',
              width: 'resolve'
            }
          };
          Defaults.prototype.set = function (key, value) {
            var camelKey = $.camelCase(key);
            var data = {};
            data[camelKey] = value;
            var convertedData = Utils._convertData(data);
            $.extend(this.defaults, convertedData)
          };
          var defaults = new Defaults;
          return defaults
        });
        S2.define('select2/options', [
          'require',
          'jquery',
          './defaults',
          './utils'
        ], function (require, $, Defaults, Utils) {
          function Options(options, $element) {
            this.options = options;
            if ($element != null) {
              this.fromElement($element)
            }
            this.options = Defaults.apply(this.options);
            if ($element && $element.is('input')) {
              var InputCompat = require(this.get('amdBase') + 'compat/inputData');
              this.options.dataAdapter = Utils.Decorate(this.options.dataAdapter, InputCompat)
            }
          }
          Options.prototype.fromElement = function ($e) {
            var excludedData = ['select2'];
            if (this.options.multiple == null) {
              this.options.multiple = $e.prop('multiple')
            }
            if (this.options.disabled == null) {
              this.options.disabled = $e.prop('disabled')
            }
            if (this.options.language == null) {
              if ($e.prop('lang')) {
                this.options.language = $e.prop('lang').toLowerCase()
              } else if ($e.closest('[lang]').prop('lang')) {
                this.options.language = $e.closest('[lang]').prop('lang')
              }
            }
            if (this.options.dir == null) {
              if ($e.prop('dir')) {
                this.options.dir = $e.prop('dir')
              } else if ($e.closest('[dir]').prop('dir')) {
                this.options.dir = $e.closest('[dir]').prop('dir')
              } else {
                this.options.dir = 'ltr'
              }
            }
            $e.prop('disabled', this.options.disabled);
            $e.prop('multiple', this.options.multiple);
            if ($e.data('select2Tags')) {
              if (this.options.debug && window.console && console.warn) {
                console.warn('Select2: The `data-select2-tags` attribute has been changed to ' + 'use the `data-data` and `data-tags="true"` attributes and will be ' + 'removed in future versions of Select2.')
              }
              $e.data('data', $e.data('select2Tags'));
              $e.data('tags', true)
            }
            if ($e.data('ajaxUrl')) {
              if (this.options.debug && window.console && console.warn) {
                console.warn('Select2: The `data-ajax-url` attribute has been changed to ' + '`data-ajax--url` and support for the old attribute will be removed' + ' in future versions of Select2.')
              }
              $e.attr('ajax--url', $e.data('ajaxUrl'));
              $e.data('ajax--url', $e.data('ajaxUrl'))
            }
            var dataset = {};
            // Prefer the element's `dataset` attribute if it exists
            // jQuery 1.x does not correctly handle data attributes with multiple dashes
            if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
              dataset = $.extend(true, {}, $e[0].dataset, $e.data())
            } else {
              dataset = $e.data()
            }
            var data = $.extend(true, {}, dataset);
            data = Utils._convertData(data);
            for (var key in data) {
              if ($.inArray(key, excludedData) > -1) {
                continue
              }
              if ($.isPlainObject(this.options[key])) {
                $.extend(this.options[key], data[key])
              } else {
                this.options[key] = data[key]
              }
            }
            return this
          };
          Options.prototype.get = function (key) {
            return this.options[key]
          };
          Options.prototype.set = function (key, val) {
            this.options[key] = val
          };
          return Options
        });
        S2.define('select2/core', [
          'jquery',
          './options',
          './utils',
          './keys'
        ], function ($, Options, Utils, KEYS) {
          var Select2 = function ($element, options) {
            if ($element.data('select2') != null) {
              $element.data('select2').destroy()
            }
            this.$element = $element;
            this.id = this._generateId($element);
            options = options || {};
            this.options = new Options(options, $element);
            Select2.__super__.constructor.call(this);
            // Set up the tabindex
            var tabindex = $element.attr('tabindex') || 0;
            $element.data('old-tabindex', tabindex);
            $element.attr('tabindex', '-1');
            // Set up containers and adapters
            var DataAdapter = this.options.get('dataAdapter');
            this.dataAdapter = new DataAdapter($element, this.options);
            var $container = this.render();
            this._placeContainer($container);
            var SelectionAdapter = this.options.get('selectionAdapter');
            this.selection = new SelectionAdapter($element, this.options);
            this.$selection = this.selection.render();
            this.selection.position(this.$selection, $container);
            var DropdownAdapter = this.options.get('dropdownAdapter');
            this.dropdown = new DropdownAdapter($element, this.options);
            this.$dropdown = this.dropdown.render();
            this.dropdown.position(this.$dropdown, $container);
            var ResultsAdapter = this.options.get('resultsAdapter');
            this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
            this.$results = this.results.render();
            this.results.position(this.$results, this.$dropdown);
            // Bind events
            var self = this;
            // Bind the container to all of the adapters
            this._bindAdapters();
            // Register any DOM event handlers
            this._registerDomEvents();
            // Register any internal event handlers
            this._registerDataEvents();
            this._registerSelectionEvents();
            this._registerDropdownEvents();
            this._registerResultsEvents();
            this._registerEvents();
            // Set the initial state
            this.dataAdapter.current(function (initialData) {
              self.trigger('selection:update', { data: initialData })
            });
            // Hide the original select
            $element.addClass('select2-hidden-accessible');
            $element.attr('aria-hidden', 'true');
            // Synchronize any monitored attributes
            this._syncAttributes();
            $element.data('select2', this)
          };
          Utils.Extend(Select2, Utils.Observable);
          Select2.prototype._generateId = function ($element) {
            var id = '';
            if ($element.attr('id') != null) {
              id = $element.attr('id')
            } else if ($element.attr('name') != null) {
              id = $element.attr('name') + '-' + Utils.generateChars(2)
            } else {
              id = Utils.generateChars(4)
            }
            id = 'select2-' + id;
            return id
          };
          Select2.prototype._placeContainer = function ($container) {
            $container.insertAfter(this.$element);
            var width = this._resolveWidth(this.$element, this.options.get('width'));
            if (width != null) {
              $container.css('width', width)
            }
          };
          Select2.prototype._resolveWidth = function ($element, method) {
            var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;
            if (method == 'resolve') {
              var styleWidth = this._resolveWidth($element, 'style');
              if (styleWidth != null) {
                return styleWidth
              }
              return this._resolveWidth($element, 'element')
            }
            if (method == 'element') {
              var elementWidth = $element.outerWidth(false);
              if (elementWidth <= 0) {
                return 'auto'
              }
              return elementWidth + 'px'
            }
            if (method == 'style') {
              var style = $element.attr('style');
              if (typeof style !== 'string') {
                return null
              }
              var attrs = style.split(';');
              for (var i = 0, l = attrs.length; i < l; i = i + 1) {
                var attr = attrs[i].replace(/\s/g, '');
                var matches = attr.match(WIDTH);
                if (matches !== null && matches.length >= 1) {
                  return matches[1]
                }
              }
              return null
            }
            return method
          };
          Select2.prototype._bindAdapters = function () {
            this.dataAdapter.bind(this, this.$container);
            this.selection.bind(this, this.$container);
            this.dropdown.bind(this, this.$container);
            this.results.bind(this, this.$container)
          };
          Select2.prototype._registerDomEvents = function () {
            var self = this;
            this.$element.on('change.select2', function () {
              self.dataAdapter.current(function (data) {
                self.trigger('selection:update', { data: data })
              })
            });
            this._sync = Utils.bind(this._syncAttributes, this);
            if (this.$element[0].attachEvent) {
              this.$element[0].attachEvent('onpropertychange', this._sync)
            }
            var observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;
            if (observer != null) {
              this._observer = new observer(function (mutations) {
                $.each(mutations, self._sync)
              });
              this._observer.observe(this.$element[0], {
                attributes: true,
                subtree: false
              })
            } else if (this.$element[0].addEventListener) {
              this.$element[0].addEventListener('DOMAttrModified', self._sync, false)
            }
          };
          Select2.prototype._registerDataEvents = function () {
            var self = this;
            this.dataAdapter.on('*', function (name, params) {
              self.trigger(name, params)
            })
          };
          Select2.prototype._registerSelectionEvents = function () {
            var self = this;
            var nonRelayEvents = ['toggle'];
            this.selection.on('toggle', function () {
              self.toggleDropdown()
            });
            this.selection.on('*', function (name, params) {
              if ($.inArray(name, nonRelayEvents) !== -1) {
                return
              }
              self.trigger(name, params)
            })
          };
          Select2.prototype._registerDropdownEvents = function () {
            var self = this;
            this.dropdown.on('*', function (name, params) {
              self.trigger(name, params)
            })
          };
          Select2.prototype._registerResultsEvents = function () {
            var self = this;
            this.results.on('*', function (name, params) {
              self.trigger(name, params)
            })
          };
          Select2.prototype._registerEvents = function () {
            var self = this;
            this.on('open', function () {
              self.$container.addClass('select2-container--open')
            });
            this.on('close', function () {
              self.$container.removeClass('select2-container--open')
            });
            this.on('enable', function () {
              self.$container.removeClass('select2-container--disabled')
            });
            this.on('disable', function () {
              self.$container.addClass('select2-container--disabled')
            });
            this.on('focus', function () {
              self.$container.addClass('select2-container--focus')
            });
            this.on('blur', function () {
              self.$container.removeClass('select2-container--focus')
            });
            this.on('query', function (params) {
              if (!self.isOpen()) {
                self.trigger('open')
              }
              this.dataAdapter.query(params, function (data) {
                self.trigger('results:all', {
                  data: data,
                  query: params
                })
              })
            });
            this.on('query:append', function (params) {
              this.dataAdapter.query(params, function (data) {
                self.trigger('results:append', {
                  data: data,
                  query: params
                })
              })
            });
            this.on('keypress', function (evt) {
              var key = evt.which;
              if (self.isOpen()) {
                if (key === KEYS.ENTER) {
                  self.trigger('results:select');
                  evt.preventDefault()
                } else if (key === KEYS.SPACE && evt.ctrlKey) {
                  self.trigger('results:toggle');
                  evt.preventDefault()
                } else if (key === KEYS.UP) {
                  self.trigger('results:previous');
                  evt.preventDefault()
                } else if (key === KEYS.DOWN) {
                  self.trigger('results:next');
                  evt.preventDefault()
                } else if (key === KEYS.ESC || key === KEYS.TAB) {
                  self.close();
                  evt.preventDefault()
                }
              } else {
                if (key === KEYS.ENTER || key === KEYS.SPACE || (key === KEYS.DOWN || key === KEYS.UP) && evt.altKey) {
                  self.open();
                  evt.preventDefault()
                }
              }
            })
          };
          Select2.prototype._syncAttributes = function () {
            this.options.set('disabled', this.$element.prop('disabled'));
            if (this.options.get('disabled')) {
              if (this.isOpen()) {
                this.close()
              }
              this.trigger('disable')
            } else {
              this.trigger('enable')
            }
          };
          /**
   * Override the trigger method to automatically trigger pre-events when
   * there are events that can be prevented.
   */
          Select2.prototype.trigger = function (name, args) {
            var actualTrigger = Select2.__super__.trigger;
            var preTriggerMap = {
              'open': 'opening',
              'close': 'closing',
              'select': 'selecting',
              'unselect': 'unselecting'
            };
            if (name in preTriggerMap) {
              var preTriggerName = preTriggerMap[name];
              var preTriggerArgs = {
                prevented: false,
                name: name,
                args: args
              };
              actualTrigger.call(this, preTriggerName, preTriggerArgs);
              if (preTriggerArgs.prevented) {
                args.prevented = true;
                return
              }
            }
            actualTrigger.call(this, name, args)
          };
          Select2.prototype.toggleDropdown = function () {
            if (this.options.get('disabled')) {
              return
            }
            if (this.isOpen()) {
              this.close()
            } else {
              this.open()
            }
          };
          Select2.prototype.open = function () {
            if (this.isOpen()) {
              return
            }
            this.trigger('query', {});
            this.trigger('open')
          };
          Select2.prototype.close = function () {
            if (!this.isOpen()) {
              return
            }
            this.trigger('close')
          };
          Select2.prototype.isOpen = function () {
            return this.$container.hasClass('select2-container--open')
          };
          Select2.prototype.enable = function (args) {
            if (this.options.get('debug') && window.console && console.warn) {
              console.warn('Select2: The `select2("enable")` method has been deprecated and will' + ' be removed in later Select2 versions. Use $element.prop("disabled")' + ' instead.')
            }
            if (args == null || args.length === 0) {
              args = [true]
            }
            var disabled = !args[0];
            this.$element.prop('disabled', disabled)
          };
          Select2.prototype.data = function () {
            if (this.options.get('debug') && arguments.length > 0 && window.console && console.warn) {
              console.warn('Select2: Data can no longer be set using `select2("data")`. You ' + 'should consider setting the value instead using `$element.val()`.')
            }
            var data = [];
            this.dataAdapter.current(function (currentData) {
              data = currentData
            });
            return data
          };
          Select2.prototype.val = function (args) {
            if (this.options.get('debug') && window.console && console.warn) {
              console.warn('Select2: The `select2("val")` method has been deprecated and will be' + ' removed in later Select2 versions. Use $element.val() instead.')
            }
            if (args == null || args.length === 0) {
              return this.$element.val()
            }
            var newVal = args[0];
            if ($.isArray(newVal)) {
              newVal = $.map(newVal, function (obj) {
                return obj.toString()
              })
            }
            this.$element.val(newVal).trigger('change')
          };
          Select2.prototype.destroy = function () {
            this.$container.remove();
            if (this.$element[0].detachEvent) {
              this.$element[0].detachEvent('onpropertychange', this._sync)
            }
            if (this._observer != null) {
              this._observer.disconnect();
              this._observer = null
            } else if (this.$element[0].removeEventListener) {
              this.$element[0].removeEventListener('DOMAttrModified', this._sync, false)
            }
            this._sync = null;
            this.$element.off('.select2');
            this.$element.attr('tabindex', this.$element.data('old-tabindex'));
            this.$element.removeClass('select2-hidden-accessible');
            this.$element.attr('aria-hidden', 'false');
            this.$element.removeData('select2');
            this.dataAdapter.destroy();
            this.selection.destroy();
            this.dropdown.destroy();
            this.results.destroy();
            this.dataAdapter = null;
            this.selection = null;
            this.dropdown = null;
            this.results = null
          };
          Select2.prototype.render = function () {
            var $container = $('<span class="select2 select2-container">' + '<span class="selection"></span>' + '<span class="dropdown-wrapper" aria-hidden="true"></span>' + '</span>');
            $container.attr('dir', this.options.get('dir'));
            this.$container = $container;
            this.$container.addClass('select2-container--' + this.options.get('theme'));
            $container.data('element', this.$element);
            return $container
          };
          return Select2
        });
        S2.define('jquery.select2', [
          'jquery',
          'require',
          './select2/core',
          './select2/defaults'
        ], function ($, require, Select2, Defaults) {
          if ($.fn.select2 == null) {
            // All methods that should return the element
            var thisMethods = [
              'open',
              'close',
              'destroy'
            ];
            $.fn.select2 = function (options) {
              options = options || {};
              if (typeof options === 'object') {
                this.each(function () {
                  var instanceOptions = $.extend({}, options, true);
                  var instance = new Select2($(this), instanceOptions)
                });
                return this
              } else if (typeof options === 'string') {
                var instance = this.data('select2');
                if (instance == null && window.console && console.error) {
                  console.error("The select2('" + options + "') method was called on an " + 'element that is not using Select2.')
                }
                var args = Array.prototype.slice.call(arguments, 1);
                var ret = instance[options](args);
                // Check if we should be returning `this`
                if ($.inArray(options, thisMethods) > -1) {
                  return this
                }
                return ret
              } else {
                throw new Error('Invalid arguments for Select2: ' + options)
              }
            }
          }
          if ($.fn.select2.defaults == null) {
            $.fn.select2.defaults = Defaults
          }
          return Select2
        });
        S2.define('jquery.mousewheel', ['jquery'], function ($) {
          // Used to shim jQuery.mousewheel for non-full builds.
          return $
        });
        // Return the AMD loader configuration so it can be used outside of this file
        return {
          define: S2.define,
          require: S2.require
        }
      }();
      // Autoload the jQuery bindings
      // We know that all of the modules exist above this, so we're safe
      var select2 = S2.require('jquery.select2');
      // Hold the AMD module references on the jQuery function that was just loaded
      // This allows Select2 to use the internal loader outside of this file, such
      // as in the language files.
      jQuery.fn.select2.amd = S2;
      // Return the Select2 instance for anyone who is importing it.
      return select2
    }))
  });
  // source: node_modules/style-inject/index.js
  require.define('style-inject', function (module, exports, __dirname, __filename) {
    module.exports = function styleInject(css) {
      css = css || '';
      var head = document.head || document.getElementsByTagName('head')[0];
      var style = document.createElement('style');
      style.type = 'text/css';
      if (style.styleSheet) {
        style.styleSheet.cssText = css
      } else {
        style.appendChild(document.createTextNode(css))
      }
      head.appendChild(style)
    }
  });
  // source: vendor/css/select2.css
  require.define('./Users/zk/work/crowdstart/checkout.js/vendor/css/select2', function (module, exports, __dirname, __filename) {
    module.exports = '.select2-container {\n  box-sizing: border-box;\n  display: inline-block;\n  margin: 0;\n  position: relative;\n  vertical-align: middle; }\n  .select2-container .select2-selection--single {\n    box-sizing: border-box;\n    cursor: pointer;\n    display: block;\n    height: 28px;\n    user-select: none;\n    -webkit-user-select: none; }\n    .select2-container .select2-selection--single .select2-selection__rendered {\n      display: block;\n      padding-left: 8px;\n      padding-right: 20px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      white-space: nowrap; }\n  .select2-container[dir="rtl"] .select2-selection--single .select2-selection__rendered {\n    padding-right: 8px;\n    padding-left: 20px; }\n  .select2-container .select2-selection--multiple {\n    box-sizing: border-box;\n    cursor: pointer;\n    display: block;\n    min-height: 32px;\n    user-select: none;\n    -webkit-user-select: none; }\n    .select2-container .select2-selection--multiple .select2-selection__rendered {\n      display: inline-block;\n      overflow: hidden;\n      padding-left: 8px;\n      text-overflow: ellipsis;\n      white-space: nowrap; }\n  .select2-container .select2-search--inline {\n    float: left; }\n    .select2-container .select2-search--inline .select2-search__field {\n      box-sizing: border-box;\n      border: none;\n      font-size: 100%;\n      margin-top: 5px; }\n      .select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button {\n        -webkit-appearance: none; }\n\n.select2-dropdown {\n  background-color: white;\n  border: 1px solid #aaa;\n  border-radius: 4px;\n  box-sizing: border-box;\n  display: block;\n  position: absolute;\n  left: -100000px;\n  width: 100%;\n  z-index: 1051; }\n\n.select2-results {\n  display: block; }\n\n.select2-results__options {\n  list-style: none;\n  margin: 0;\n  padding: 0; }\n\n.select2-results__option {\n  padding: 6px;\n  user-select: none;\n  -webkit-user-select: none; }\n  .select2-results__option[aria-selected] {\n    cursor: pointer; }\n\n.select2-container--open .select2-dropdown {\n  left: 0; }\n\n.select2-container--open .select2-dropdown--above {\n  border-bottom: none;\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0; }\n\n.select2-container--open .select2-dropdown--below {\n  border-top: none;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0; }\n\n.select2-search--dropdown {\n  display: block;\n  padding: 4px; }\n  .select2-search--dropdown .select2-search__field {\n    padding: 4px;\n    width: 100%;\n    box-sizing: border-box; }\n    .select2-search--dropdown .select2-search__field::-webkit-search-cancel-button {\n      -webkit-appearance: none; }\n  .select2-search--dropdown.select2-search--hide {\n    display: none; }\n\n.select2-close-mask {\n  border: 0;\n  margin: 0;\n  padding: 0;\n  display: block;\n  position: fixed;\n  left: 0;\n  top: 0;\n  min-height: 100%;\n  min-width: 100%;\n  height: auto;\n  width: auto;\n  opacity: 0;\n  z-index: 99;\n  background-color: #fff;\n  filter: alpha(opacity=0); }\n\n.select2-hidden-accessible {\n  border: 0 !important;\n  clip: rect(0 0 0 0) !important;\n  height: 1px !important;\n  margin: -1px !important;\n  overflow: hidden !important;\n  padding: 0 !important;\n  position: absolute !important;\n  width: 1px !important; }\n\n.select2-container--default .select2-selection--single {\n  background-color: #fff;\n  border: 1px solid #aaa;\n  border-radius: 4px; }\n  .select2-container--default .select2-selection--single .select2-selection__rendered {\n    color: #444;\n    line-height: 28px; }\n  .select2-container--default .select2-selection--single .select2-selection__clear {\n    cursor: pointer;\n    float: right;\n    font-weight: bold; }\n  .select2-container--default .select2-selection--single .select2-selection__placeholder {\n    color: #999; }\n  .select2-container--default .select2-selection--single .select2-selection__arrow {\n    height: 26px;\n    position: absolute;\n    top: 1px;\n    right: 1px;\n    width: 20px; }\n    .select2-container--default .select2-selection--single .select2-selection__arrow b {\n      border-color: #888 transparent transparent transparent;\n      border-style: solid;\n      border-width: 5px 4px 0 4px;\n      height: 0;\n      left: 50%;\n      margin-left: -4px;\n      margin-top: -2px;\n      position: absolute;\n      top: 50%;\n      width: 0; }\n.select2-container--default[dir="rtl"] .select2-selection--single .select2-selection__clear {\n  float: left; }\n.select2-container--default[dir="rtl"] .select2-selection--single .select2-selection__arrow {\n  left: 1px;\n  right: auto; }\n.select2-container--default.select2-container--disabled .select2-selection--single {\n  background-color: #eee;\n  cursor: default; }\n  .select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear {\n    display: none; }\n.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow b {\n  border-color: transparent transparent #888 transparent;\n  border-width: 0 4px 5px 4px; }\n.select2-container--default .select2-selection--multiple {\n  background-color: white;\n  border: 1px solid #aaa;\n  border-radius: 4px;\n  cursor: text; }\n  .select2-container--default .select2-selection--multiple .select2-selection__rendered {\n    box-sizing: border-box;\n    list-style: none;\n    margin: 0;\n    padding: 0 5px;\n    width: 100%; }\n  .select2-container--default .select2-selection--multiple .select2-selection__placeholder {\n    color: #999;\n    margin-top: 5px;\n    float: left; }\n  .select2-container--default .select2-selection--multiple .select2-selection__clear {\n    cursor: pointer;\n    float: right;\n    font-weight: bold;\n    margin-top: 5px;\n    margin-right: 10px; }\n  .select2-container--default .select2-selection--multiple .select2-selection__choice {\n    background-color: #e4e4e4;\n    border: 1px solid #aaa;\n    border-radius: 4px;\n    cursor: default;\n    float: left;\n    margin-right: 5px;\n    margin-top: 5px;\n    padding: 0 5px; }\n  .select2-container--default .select2-selection--multiple .select2-selection__choice__remove {\n    color: #999;\n    cursor: pointer;\n    display: inline-block;\n    font-weight: bold;\n    margin-right: 2px; }\n    .select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover {\n      color: #333; }\n.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice, .select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__placeholder {\n  float: right; }\n.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice {\n  margin-left: 5px;\n  margin-right: auto; }\n.select2-container--default[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove {\n  margin-left: 2px;\n  margin-right: auto; }\n.select2-container--default.select2-container--focus .select2-selection--multiple {\n  border: solid black 1px;\n  outline: 0; }\n.select2-container--default.select2-container--disabled .select2-selection--multiple {\n  background-color: #eee;\n  cursor: default; }\n.select2-container--default.select2-container--disabled .select2-selection__choice__remove {\n  display: none; }\n.select2-container--default.select2-container--open.select2-container--above .select2-selection--single, .select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0; }\n.select2-container--default.select2-container--open.select2-container--below .select2-selection--single, .select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple {\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0; }\n.select2-container--default .select2-search--dropdown .select2-search__field {\n  border: 1px solid #aaa; }\n.select2-container--default .select2-search--inline .select2-search__field {\n  background: transparent;\n  border: none;\n  outline: 0; }\n.select2-container--default .select2-results > .select2-results__options {\n  max-height: 200px;\n  overflow-y: auto; }\n.select2-container--default .select2-results__option[role=group] {\n  padding: 0; }\n.select2-container--default .select2-results__option[aria-disabled=true] {\n  color: #999; }\n.select2-container--default .select2-results__option[aria-selected=true] {\n  background-color: #ddd; }\n.select2-container--default .select2-results__option .select2-results__option {\n  padding-left: 1em; }\n  .select2-container--default .select2-results__option .select2-results__option .select2-results__group {\n    padding-left: 0; }\n  .select2-container--default .select2-results__option .select2-results__option .select2-results__option {\n    margin-left: -1em;\n    padding-left: 2em; }\n    .select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option {\n      margin-left: -2em;\n      padding-left: 3em; }\n      .select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {\n        margin-left: -3em;\n        padding-left: 4em; }\n        .select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {\n          margin-left: -4em;\n          padding-left: 5em; }\n          .select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option {\n            margin-left: -5em;\n            padding-left: 6em; }\n.select2-container--default .select2-results__option--highlighted[aria-selected] {\n  background-color: #5897fb;\n  color: white; }\n.select2-container--default .select2-results__group {\n  cursor: default;\n  display: block;\n  padding: 6px; }\n\n.select2-container--classic .select2-selection--single {\n  background-color: #f6f6f6;\n  border: 1px solid #aaa;\n  border-radius: 4px;\n  outline: 0;\n  background-image: -webkit-linear-gradient(top, #ffffff 50%, #eeeeee 100%);\n  background-image: -o-linear-gradient(top, #ffffff 50%, #eeeeee 100%);\n  background-image: linear-gradient(to bottom, #ffffff 50%, #eeeeee 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#FFFFFFFF\', endColorstr=\'#FFEEEEEE\', GradientType=0); }\n  .select2-container--classic .select2-selection--single:focus {\n    border: 1px solid #5897fb; }\n  .select2-container--classic .select2-selection--single .select2-selection__rendered {\n    color: #444;\n    line-height: 28px; }\n  .select2-container--classic .select2-selection--single .select2-selection__clear {\n    cursor: pointer;\n    float: right;\n    font-weight: bold;\n    margin-right: 10px; }\n  .select2-container--classic .select2-selection--single .select2-selection__placeholder {\n    color: #999; }\n  .select2-container--classic .select2-selection--single .select2-selection__arrow {\n    background-color: #ddd;\n    border: none;\n    border-left: 1px solid #aaa;\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n    height: 26px;\n    position: absolute;\n    top: 1px;\n    right: 1px;\n    width: 20px;\n    background-image: -webkit-linear-gradient(top, #eeeeee 50%, #cccccc 100%);\n    background-image: -o-linear-gradient(top, #eeeeee 50%, #cccccc 100%);\n    background-image: linear-gradient(to bottom, #eeeeee 50%, #cccccc 100%);\n    background-repeat: repeat-x;\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#FFEEEEEE\', endColorstr=\'#FFCCCCCC\', GradientType=0); }\n    .select2-container--classic .select2-selection--single .select2-selection__arrow b {\n      border-color: #888 transparent transparent transparent;\n      border-style: solid;\n      border-width: 5px 4px 0 4px;\n      height: 0;\n      left: 50%;\n      margin-left: -4px;\n      margin-top: -2px;\n      position: absolute;\n      top: 50%;\n      width: 0; }\n.select2-container--classic[dir="rtl"] .select2-selection--single .select2-selection__clear {\n  float: left; }\n.select2-container--classic[dir="rtl"] .select2-selection--single .select2-selection__arrow {\n  border: none;\n  border-right: 1px solid #aaa;\n  border-radius: 0;\n  border-top-left-radius: 4px;\n  border-bottom-left-radius: 4px;\n  left: 1px;\n  right: auto; }\n.select2-container--classic.select2-container--open .select2-selection--single {\n  border: 1px solid #5897fb; }\n  .select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow {\n    background: transparent;\n    border: none; }\n    .select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow b {\n      border-color: transparent transparent #888 transparent;\n      border-width: 0 4px 5px 4px; }\n.select2-container--classic.select2-container--open.select2-container--above .select2-selection--single {\n  border-top: none;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n  background-image: -webkit-linear-gradient(top, #ffffff 0%, #eeeeee 50%);\n  background-image: -o-linear-gradient(top, #ffffff 0%, #eeeeee 50%);\n  background-image: linear-gradient(to bottom, #ffffff 0%, #eeeeee 50%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#FFFFFFFF\', endColorstr=\'#FFEEEEEE\', GradientType=0); }\n.select2-container--classic.select2-container--open.select2-container--below .select2-selection--single {\n  border-bottom: none;\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  background-image: -webkit-linear-gradient(top, #eeeeee 50%, #ffffff 100%);\n  background-image: -o-linear-gradient(top, #eeeeee 50%, #ffffff 100%);\n  background-image: linear-gradient(to bottom, #eeeeee 50%, #ffffff 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\'#FFEEEEEE\', endColorstr=\'#FFFFFFFF\', GradientType=0); }\n.select2-container--classic .select2-selection--multiple {\n  background-color: white;\n  border: 1px solid #aaa;\n  border-radius: 4px;\n  cursor: text;\n  outline: 0; }\n  .select2-container--classic .select2-selection--multiple:focus {\n    border: 1px solid #5897fb; }\n  .select2-container--classic .select2-selection--multiple .select2-selection__rendered {\n    list-style: none;\n    margin: 0;\n    padding: 0 5px; }\n  .select2-container--classic .select2-selection--multiple .select2-selection__clear {\n    display: none; }\n  .select2-container--classic .select2-selection--multiple .select2-selection__choice {\n    background-color: #e4e4e4;\n    border: 1px solid #aaa;\n    border-radius: 4px;\n    cursor: default;\n    float: left;\n    margin-right: 5px;\n    margin-top: 5px;\n    padding: 0 5px; }\n  .select2-container--classic .select2-selection--multiple .select2-selection__choice__remove {\n    color: #888;\n    cursor: pointer;\n    display: inline-block;\n    font-weight: bold;\n    margin-right: 2px; }\n    .select2-container--classic .select2-selection--multiple .select2-selection__choice__remove:hover {\n      color: #555; }\n.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice {\n  float: right; }\n.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice {\n  margin-left: 5px;\n  margin-right: auto; }\n.select2-container--classic[dir="rtl"] .select2-selection--multiple .select2-selection__choice__remove {\n  margin-left: 2px;\n  margin-right: auto; }\n.select2-container--classic.select2-container--open .select2-selection--multiple {\n  border: 1px solid #5897fb; }\n.select2-container--classic.select2-container--open.select2-container--above .select2-selection--multiple {\n  border-top: none;\n  border-top-left-radius: 0;\n  border-top-right-radius: 0; }\n.select2-container--classic.select2-container--open.select2-container--below .select2-selection--multiple {\n  border-bottom: none;\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0; }\n.select2-container--classic .select2-search--dropdown .select2-search__field {\n  border: 1px solid #aaa;\n  outline: 0; }\n.select2-container--classic .select2-search--inline .select2-search__field {\n  outline: 0; }\n.select2-container--classic .select2-dropdown {\n  background-color: white;\n  border: 1px solid transparent; }\n.select2-container--classic .select2-dropdown--above {\n  border-bottom: none; }\n.select2-container--classic .select2-dropdown--below {\n  border-top: none; }\n.select2-container--classic .select2-results > .select2-results__options {\n  max-height: 200px;\n  overflow-y: auto; }\n.select2-container--classic .select2-results__option[role=group] {\n  padding: 0; }\n.select2-container--classic .select2-results__option[aria-disabled=true] {\n  color: grey; }\n.select2-container--classic .select2-results__option--highlighted[aria-selected] {\n  background-color: #3875d7;\n  color: white; }\n.select2-container--classic .select2-results__group {\n  cursor: default;\n  display: block;\n  padding: 6px; }\n.select2-container--classic.select2-container--open .select2-dropdown {\n  border-color: #5897fb; }\n'
  });
  // source: src/utils/theme.coffee
  require.define('./utils/theme', function (module, exports, __dirname, __filename) {
    var $style, riot, theme;
    riot = require('riot/riot');
    $style = $('<style>');
    $('head').append($style);
    theme = {
      currentTheme: {},
      setTheme: function (newTheme) {
        $.extend(theme.currentTheme, newTheme);
        return $style.html('/* Colors */\n.crowdstart-checkout {\n  background-color: ' + theme.currentTheme.background + ' !important;\n}\n\n.crowdstart-checkout a {\n  color: ' + theme.currentTheme.dark + ';\n}\n\n.crowdstart-checkout a:visited {\n  color: ' + theme.currentTheme.dark + ';\n}\n\n.crowdstart-promocode-button {\n  background-color: ' + theme.currentTheme.promoCodeBackground + ' !important;\n  color: ' + theme.currentTheme.promoCodeForeground + ' !important;\n}\n\n.crowdstart-button {\n  background-color: ' + theme.currentTheme.calloutBackground + ' !important;\n  color: ' + theme.currentTheme.calloutForeground + ' !important;\n}\n\n.crowdstart-checkout {\n  color: ' + theme.currentTheme.dark + ' !important;\n}\n\n.crowdstart-form-control input,\n.select2-container input {\n  border: 1px solid ' + theme.currentTheme.medium + ' !important;\n}\n\n.select2, .select2 *, .select2-selection {\n  color: ' + theme.currentTheme.dark + ' !important;\n  border-color: ' + theme.currentTheme.medium + ' !important;\n  background-color: transparent !important;\n}\n\n.select2-container--default\n.select2-selection--single\n.select2-selection__arrow b {\n  border-color: ' + theme.currentTheme.dark + ' transparent transparent transparent !important;\n}\n\n.select2-container--default {\n  background-color: transparent !important;\n  border-color: ' + theme.currentTheme.medium + ' !important;\n}\n\n.select2-dropdown {\n  background-color: ' + theme.currentTheme.background + ' !important;\n  border-color: ' + theme.currentTheme.medium + ' !important;\n}\n\n.crowdstart-sep {\n  border-bottom: 1px solid ' + theme.currentTheme.medium + ' !important;\n}\n\n.crowdstart-thankyou a {\n  color: ' + theme.currentTheme.dark + ' !important;\n}\n\n.crowdstart-thankyou a:visited {\n  color: ' + theme.currentTheme.dark + ' !important;\n}\n\ninput.crowdstart-error {\n  border-color: ' + theme.currentTheme.error + ' !important;\n}\n\n.crowdstart-message::before {\n  background-color: ' + theme.currentTheme.error + ' !important;\n}\n\n.crowdstart-message {\n  color: ' + theme.currentTheme.light + ' !important;\n  background-color: ' + theme.currentTheme.error + ' !important;\n}\n\n.crowdstart-show-promocode {\n  color: ' + theme.currentTheme.showPromoCode + ' !important;\n}\n\n.crowdstart-loader {\n  border-top: 1.1em solid ' + theme.currentTheme.spinnerTrail + ' !important;\n  border-right: 1.1em solid ' + theme.currentTheme.spinnerTrail + ' !important;\n  border-bottom: 1.1em solid ' + theme.currentTheme.spinnerTrail + ' !important;\n  border-left: 1.1em solid ' + theme.currentTheme.spinner + ' !important;\n}\n\n.crowdstart-progress li {\n  color: ' + theme.currentTheme.dark + ' !important;\n}\n\n.crowdstart-progress li:before {\n  color: ' + theme.currentTheme.light + ' !important;\n  background-color: ' + theme.currentTheme.dark + ' !important;\n}\n\n.crowdstart-progress li:after {\n  background: ' + theme.currentTheme.dark + ' !important;\n}\n\n.crowdstart-progress li.active {\n  color: ' + theme.currentTheme.progress + ' !important;\n}\n\n.crowdstart-progress li.active:before,  .crowdstart-progress li.active:after{\n  background: ' + theme.currentTheme.progress + ' !important;\n  color: ' + theme.currentTheme.light + ' !important;\n}\n\n.crowdstart-checkbox-control input[type="checkbox"] + label .crowdstart-checkbox {\n  border: 1px solid ' + theme.currentTheme.medium + ' !important;\n}\n\n.crowdstart-checkbox-short-part {\n  background-color: ' + theme.currentTheme.dark + ' !important;\n}\n\n.crowdstart-checkbox-long-part {\n  background-color: ' + theme.currentTheme.dark + ' !important;\n}\n\n.select2-results__option--highlighted {\n  color: ' + theme.currentTheme.light + ' !important !important;\n}\n/* End Colors */\n\n/* Border Radius */\n.crowdstart-checkout {\n  border-radius: ' + theme.currentTheme.borderRadius + 'px !important;\n}\n\n.crowdstart-form-control input,\n.select2-container input {\n  border-radius: ' + theme.currentTheme.borderRadius + 'px !important;\n}\n\n.select2-dropdown {\n  border-radius: ' + theme.currentTheme.borderRadius + 'px !important;\n}\n\n.select2-selection {\n  border-radius: ' + theme.currentTheme.borderRadius + 'px !important;\n}\n\n.crowdstart-promocode-button {\n  border-radius: ' + theme.currentTheme.borderRadius + 'px !important;\n}\n\n.crowdstart-checkout-button, .crowdstart-error-button {\n  border-radius: ' + theme.currentTheme.borderRadius + 'px !important;\n}\n\n.crowdstart-progress li:before {\n  border-radius: ' + (theme.currentTheme.borderRadius > 0 ? 3 : 0) + 'px !important;\n}\n/* End Border Radius */\n\n/* Font Family */\n.crowdstart-checkout {\n  font-family: ' + theme.currentTheme.fontFamily + ';\n}\n\n.select2 *, .select2-results *, .select2-container * {\n  font-family: ' + theme.currentTheme.fontFamily + ';\n}\n\n.social__icon, [class^="social__icon"] {\n  border-radius: ' + (theme.currentTheme.borderRadius > 0 ? '100%' : '0px') + ' !important;\n}\n\n/* End Font Family */\n\n/* Lock Icon */\n\n.icon-lock .lock-top-1, .icon-lock .lock-body {\n  background-color: ' + theme.currentTheme.dark + ' !important;\n}\n\n.icon-lock .lock-top-2, .icon-lock .lock-hole {\n  background-color: ' + theme.currentTheme.background + ' !important;\n}\n\n/* End Lock Icon */\n\n/* Tabs */\n\ntabs:before,\ntabs:after {\n  border-bottom: 1px solid ' + theme.currentTheme.medium + ' !important;\n}\n\ntabs > * {\n  border-bottom: 1px solid ' + theme.currentTheme.medium + ' !important;\n}\n\n.crowdstart-tab.crowdstart-tab-selected {\n  border: 1px solid ' + theme.currentTheme.medium + ' !important;\n  border-bottom: 0 !important;\n}\n\n/* End Tabs */')
      }
    };
    theme.setTheme({
      background: 'white',
      light: 'white',
      dark: 'lightslategray',
      medium: '#DDDDDD',
      error: 'red',
      promoCodeForeground: 'white',
      promoCodeBackground: 'lightslategray',
      calloutForeground: 'white',
      calloutBackground: '#27AE60',
      showPromoCode: 'steelblue',
      progress: '#27AE60',
      spinner: 'rgb(255,255,255)',
      spinnerTrail: 'rgba(255,255,255,0.2)',
      fontFamily: "'Helvetica Neue', Helvetica, Arial, sans-serif",
      borderRadius: 5
    });
    module.exports = theme
  });
  // source: src/utils/analytics.coffee
  require.define('./utils/analytics', function (module, exports, __dirname, __filename) {
    module.exports = {
      track: function (event, data) {
        if (window.analytics != null) {
          return window.analytics.track(event, data)
        }
      }
    }
  });
  // source: src/events.coffee
  require.define('./events', function (module, exports, __dirname, __filename) {
    var Events, crowdcontrol;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    Events.Screen = {
      TryNext: 'screen-try-next',
      Next: 'screen-next',
      Back: 'screen-back',
      UpdateScript: 'screen-update-script',
      DisableBack: 'screen-disable-back',
      EnableBack: 'screen-enable-back',
      SyncScript: 'screen-sync-script',
      Payment: {
        ChooseStripe: 'screen-payment-choose-stripe',
        ChoosePaypal: 'screen-payment-choose-paypal'
      }
    };
    Events.Checkout = {
      Update: 'checkout-update',
      Done: 'checkout-done'
    };
    Events.Modal = {
      Open: 'modal-open',
      Close: 'modal-close',
      DisableClose: 'modal-disable-close',
      EnableClose: 'modal-enable-close'
    };
    Events.Confirm = {
      Error: 'confirm-error',
      Hide: 'confirm-hide',
      Show: 'confirm-show',
      Lock: 'confirm-lock',
      Unlock: 'confirm-unlock'
    };
    Events.Invoice = {
      Hide: 'invoice-hide',
      Show: 'invoice-show'
    };
    Events.Country = { Set: 'country-set' }
  });
  // source: src/views/index.coffee
  require.define('./views', function (module, exports, __dirname, __filename) {
    module.exports = {
      Confirm: require('./views/confirm'),
      Header: require('./views/header'),
      Invoice: require('./views/invoice'),
      LineItem: require('./views/lineitem'),
      Modal: require('./views/modal'),
      Promo: require('./views/promo'),
      Tabs: require('./views/tabs'),
      Widget: require('./views/widget'),
      ScreenManager: require('./views/screenmanager'),
      Controls: require('./views/controls'),
      Screens: require('./views/screens')
    }
  });
  // source: src/views/confirm.coffee
  require.define('./views/confirm', function (module, exports, __dirname, __filename) {
    var Confirm, Events, FormView, crowdcontrol, input, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    FormView = crowdcontrol.view.form.FormView;
    input = require('./utils/input');
    Confirm = function (superClass) {
      var obj;
      extend(Confirm, superClass);
      function Confirm() {
        return Confirm.__super__.constructor.apply(this, arguments)
      }
      Confirm.prototype.tag = 'confirm';
      Confirm.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/confirm');
      Confirm.prototype.locked = false;
      Confirm.prototype.hide = false;
      Confirm.prototype.error = '';
      Confirm.prototype.index = 0;
      Confirm.prototype.model = { agreed: false };
      Confirm.prototype.inputConfigs = [input('agreed', '', 'checkbox terms')];
      Confirm.prototype.events = (obj = {}, obj['' + Events.Screen.SyncScript] = function (scriptRefs, index) {
        this.index = index;
        return this.update()
      }, obj['' + Events.Confirm.Error] = function (msg) {
        return this.error = msg
      }, obj['' + Events.Confirm.Hide] = function () {
        return this.setHide(true)
      }, obj['' + Events.Confirm.Show] = function () {
        return this.setHide(false)
      }, obj['' + Events.Confirm.Lock] = function () {
        return this.setLock(true)
      }, obj['' + Events.Confirm.Unlock] = function () {
        return this.setLock(false)
      }, obj);
      Confirm.prototype.setHide = function (state) {
        this.hide = state;
        return this.update()
      };
      Confirm.prototype.setLock = function (state) {
        this.locked = state;
        return this.update()
      };
      Confirm.prototype.hasError = function () {
        return this.error != null && this.error !== ''
      };
      Confirm.prototype.js = function (opts) {
        Confirm.__super__.js.apply(this, arguments);
        return this.config = opts.config
      };
      Confirm.prototype._submit = function (event) {
        if (this.locked) {
          return false
        }
        return this.obs.trigger(Events.Screen.TryNext, event)
      };
      return Confirm
    }(FormView);
    Confirm.register();
    module.exports = Confirm
  });
  // source: src/utils/input.coffee
  require.define('./utils/input', function (module, exports, __dirname, __filename) {
    var InputConfig, crowdcontrol;
    crowdcontrol = require('crowdcontrol/lib');
    InputConfig = crowdcontrol.view.form.InputConfig;
    module.exports = function (name, placeholder, hints, value) {
      if (value == null) {
        value = ''
      }
      return new InputConfig(name, value, placeholder, hints)
    }
  });
  // source: templates/confirm.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/confirm', function (module, exports, __dirname, __filename) {
    module.exports = '<div if="{ !hide }" class="crowdstart-terms"><control input="{ inputs.agreed }"></control>I have read and agree to&nbsp;<a target="_blank" href="{ config.termsUrl }">these terms and conditions.</a></div><div onclick="{ submit }" if="{ !hide }" class="crowdstart-button"><div if="{ locked }" class="crowdstart-loader"></div><div if="{ locked }">Processing</div><div if="{ !locked }">{ config.callToActions[index] || config.callToActions[0] || \'confirm\' }</div></div><div if="{ hasError() }" class="crowdstart-message">{ error }</div>'
  });
  // source: src/views/header.coffee
  require.define('./views/header', function (module, exports, __dirname, __filename) {
    var Events, Header, View, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    Header = function (superClass) {
      var obj;
      extend(Header, superClass);
      function Header() {
        return Header.__super__.constructor.apply(this, arguments)
      }
      Header.prototype.tag = 'header';
      Header.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/header');
      Header.prototype.showBack = true;
      Header.prototype.index = 0;
      Header.prototype.scriptRefs = null;
      Header.prototype.events = (obj = {}, obj['' + Events.Screen.SyncScript] = function (scriptRefs, index) {
        return this.syncScript(scriptRefs, index)
      }, obj);
      Header.prototype.syncScript = function (scriptRefs1, index1) {
        this.scriptRefs = scriptRefs1;
        this.index = index1;
        if (this.scriptRefs != null && this.scriptRefs[this.index] != null) {
          this.showBack = this.scriptRefs[this.index].showBack
        }
        return this.update()
      };
      Header.prototype.back = function () {
        return this.obs.trigger('' + Events.Screen.Back)
      };
      Header.prototype.close = function () {
        return this.obs.trigger('' + Events.Modal.Close)
      };
      return Header
    }(View);
    Header.register();
    module.exports = Header
  });
  // source: templates/header.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/header', function (module, exports, __dirname, __filename) {
    module.exports = '<div if="{ index > 0 && showBack }" onclick="{ back }" class="crowdstart-back"><span>&#10140;</span></div><ul class="crowdstart-progress"><li each="{ ref, i in scriptRefs }" class="{ active: this.parent.index >= i }">{ ref.title }</li></ul><div onclick="{ close }" class="crowdstart-close"></div>'
  });
  // source: src/views/invoice.coffee
  require.define('./views/invoice', function (module, exports, __dirname, __filename) {
    var Events, Invoice, View, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    Invoice = function (superClass) {
      var obj;
      extend(Invoice, superClass);
      function Invoice() {
        return Invoice.__super__.constructor.apply(this, arguments)
      }
      Invoice.prototype.tag = 'invoice';
      Invoice.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/invoice');
      Invoice.prototype.client = null;
      Invoice.prototype.config = null;
      Invoice.prototype.hide = false;
      Invoice.prototype.renderCurrency = require('./utils/currency').renderUICurrencyFromJSON;
      Invoice.prototype.events = (obj = {}, obj['' + Events.Invoice.Hide] = function () {
        return this.setHide(true)
      }, obj['' + Events.Invoice.Show] = function () {
        return this.setHide(false)
      }, obj);
      Invoice.prototype.setHide = function (state) {
        this.hide = state;
        return this.update()
      };
      Invoice.prototype.js = function (opts) {
        this.client = opts.client;
        return this.config = opts.config
      };
      Invoice.prototype.subtotal = function () {
        var i, item, items, len, subtotal;
        items = this.model.items;
        subtotal = -this.model.discount || 0;
        for (i = 0, len = items.length; i < len; i++) {
          item = items[i];
          subtotal += item.price * item.quantity
        }
        this.model.subtotal = subtotal;
        return subtotal
      };
      Invoice.prototype.shipping = function () {
        var items, shippingRate;
        items = this.model.items;
        shippingRate = this.model.shippingRate || 0;
        return this.model.shipping = shippingRate
      };
      Invoice.prototype.taxRate = function () {
        return (this.model.taxRate || 0) * 100
      };
      Invoice.prototype.tax = function () {
        return this.model.tax = Math.ceil((this.model.taxRate || 0) * this.subtotal())
      };
      Invoice.prototype.total = function () {
        var total;
        total = this.subtotal() + this.shipping() + this.tax();
        this.model.total = total;
        return total
      };
      return Invoice
    }(View);
    Invoice.register();
    module.exports = Invoice
  });
  // source: templates/invoice.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/invoice', function (module, exports, __dirname, __filename) {
    module.exports = '<div if="{ !hide }"><div class="crowdstart-items crowdstart-form-control"><label>Cart</label><div class="crowdstart-sep"></div><lineitem each="{ item, i in model.items }" currency="{ this.parent.model.currency }" model="{ item }" invoiceobs="{ this.parent.obs }"></lineitem></div><promo order="{ model }" client="{ client }" if="{ config.showPromoCode }"></promo><div class="crowdstart-totals"><div class="crowdstart-sep"></div><div class="crowdstart-subotal"><div class="column crowdstart-receipt-label">Subtotal</div><div class="column crowdstart-money">{ renderCurrency(model.currency, subtotal()) }</div></div><div class="crowdstart-shipping-and-handling"><div class="column crowdstart-receipt-label">Shipping & Handling</div><div class="column crowdstart-money">{ renderCurrency(model.currency, shipping()) }</div></div><div class="crowdstart-tax"><div class="column crowdstart-receipt-label">Taxes ({ taxRate() }%)</div><div class="column crowdstart-money">{ renderCurrency(model.currency, tax()) }</div></div><div class="crowdstart-sep"></div><div class="crowdstart-total"><div class="column crowdstart-receipt-label">Total</div><div class="column crowdstart-money">{ renderCurrency(model.currency, total()) } ({model.currency.toUpperCase()})</div></div></div></div><div if="{ !hide &amp;&amp; config.shippingDetails != &quot;&quot; }" class="crowdstart-shipping-details">{ config.shippingDetails }</div>'
  });
  // source: src/utils/currency.coffee
  require.define('./utils/currency', function (module, exports, __dirname, __filename) {
    var currencySeparator, currencySigns, digitsOnlyRe, isZeroDecimal;
    currencySigns = require('./data/currencies').data;
    currencySeparator = '.';
    digitsOnlyRe = new RegExp('[^\\d.-]', 'g');
    isZeroDecimal = function (code) {
      if (code === 'bif' || code === 'clp' || code === 'djf' || code === 'gnf' || code === 'jpy' || code === 'kmf' || code === 'krw' || code === 'mga' || code === 'pyg' || code === 'rwf' || code === 'vnd' || code === 'vuv' || code === 'xaf' || code === 'xof' || code === 'xpf') {
        return true
      }
      return false
    };
    module.exports = {
      renderUpdatedUICurrency: function (code, uiCurrency) {
        var currentCurrencySign;
        currentCurrencySign = currencySigns[code];
        return Util.renderUICurrencyFromJSON(Util.renderJSONCurrencyFromUI(uiCurrency))
      },
      renderUICurrencyFromJSON: function (code, jsonCurrency) {
        var currentCurrencySign;
        currentCurrencySign = currencySigns[code];
        jsonCurrency = '' + jsonCurrency;
        if (isZeroDecimal(code)) {
          return currentCurrencySign + jsonCurrency
        }
        while (jsonCurrency.length < 3) {
          jsonCurrency = '0' + jsonCurrency
        }
        return currentCurrencySign + jsonCurrency.substr(0, jsonCurrency.length - 2) + '.' + jsonCurrency.substr(-2)
      },
      renderJSONCurrencyFromUI: function (code, uiCurrency) {
        var currentCurrencySign, parts;
        currentCurrencySign = currencySigns[code];
        if (isZeroDecimal(code)) {
          return parseInt(('' + uiCurrency).replace(digitsOnlyRe, '').replace(currencySeparator, ''), 10)
        }
        parts = uiCurrency.split(currencySeparator);
        if (parts.length > 1) {
          parts[1] = parts[1].substr(0, 2);
          while (parts[1].length < 2) {
            parts[1] += '0'
          }
        } else {
          parts[1] = '00'
        }
        return parseInt(parseFloat(parts[0].replace(digitsOnlyRe, '')) * 100 + parseFloat(parts[1].replace(digitsOnlyRe, '')), 10)
      }
    }
  });
  // source: src/data/currencies.coffee
  require.define('./data/currencies', function (module, exports, __dirname, __filename) {
    module.exports = {
      data: {
        'aud': '$',
        'cad': '$',
        'eur': '€',
        'gbp': '£',
        'hkd': '$',
        'jpy': '¥',
        'nzd': '$',
        'sgd': '$',
        'usd': '$',
        'ghc': '¢',
        'ars': '$',
        'bsd': '$',
        'bbd': '$',
        'bmd': '$',
        'bnd': '$',
        'kyd': '$',
        'clp': '$',
        'cop': '$',
        'xcd': '$',
        'svc': '$',
        'fjd': '$',
        'gyd': '$',
        'lrd': '$',
        'mxn': '$',
        'nad': '$',
        'sbd': '$',
        'srd': '$',
        'tvd': '$',
        'bob': '$b',
        'uyu': '$u',
        'egp': '£',
        'fkp': '£',
        'gip': '£',
        'ggp': '£',
        'imp': '£',
        'jep': '£',
        'lbp': '£',
        'shp': '£',
        'syp': '£',
        'cny': '¥',
        'afn': '؋',
        'thb': '฿',
        'khr': '៛',
        'crc': '₡',
        'trl': '₤',
        'ngn': '₦',
        'kpw': '₩',
        'krw': '₩',
        'ils': '₪',
        'vnd': '₫',
        'lak': '₭',
        'mnt': '₮',
        'cup': '₱',
        'php': '₱',
        'uah': '₴',
        'mur': '₨',
        'npr': '₨',
        'pkr': '₨',
        'scr': '₨',
        'lkr': '₨',
        'irr': '﷼',
        'omr': '﷼',
        'qar': '﷼',
        'sar': '﷼',
        'yer': '﷼',
        'pab': 'b/.',
        'vef': 'bs',
        'bzd': 'bz$',
        'nio': 'c$',
        'chf': 'chf',
        'huf': 'ft',
        'awg': 'ƒ',
        'ang': 'ƒ',
        'pyg': 'gs',
        'jmd': 'j$',
        'czk': 'kč',
        'bam': 'km',
        'hrk': 'kn',
        'dkk': 'kr',
        'eek': 'kr',
        'isk': 'kr',
        'nok': 'kr',
        'sek': 'kr',
        'hnl': 'l',
        'ron': 'lei',
        'all': 'lek',
        'lvl': 'ls',
        'ltl': 'lt',
        'mzn': 'mt',
        'twd': 'nt$',
        'bwp': 'p',
        'byr': 'p.',
        'gtq': 'q',
        'zar': 'r',
        'brl': 'r$',
        'dop': 'rd$',
        'myr': 'rm',
        'idr': 'rp',
        'sos': 's',
        'pen': 's/.',
        'ttd': 'tt$',
        'zwd': 'z$',
        'pln': 'zł',
        'mkd': 'ден',
        'rsd': 'Дин.',
        'bgn': 'лв',
        'kzt': 'лв',
        'kgs': 'лв',
        'uzs': 'лв',
        'azn': 'ман',
        'rub': 'руб',
        'inr': '',
        'try': '',
        '': ''
      }
    }
  });
  // source: src/views/lineitem.coffee
  require.define('./views/lineitem', function (module, exports, __dirname, __filename) {
    var Events, FormView, LineItem, crowdcontrol, input, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    FormView = crowdcontrol.view.form.FormView;
    input = require('./utils/input');
    LineItem = function (superClass) {
      extend(LineItem, superClass);
      function LineItem() {
        return LineItem.__super__.constructor.apply(this, arguments)
      }
      LineItem.prototype.tag = 'lineitem';
      LineItem.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/lineitem');
      LineItem.prototype.renderCurrency = require('./utils/currency').renderUICurrencyFromJSON;
      LineItem.prototype.inputConfigs = [input('quantity', '', 'quantity-select parsenumber')];
      LineItem.prototype.invoiceObs = null;
      LineItem.prototype.js = function (opts) {
        LineItem.__super__.js.apply(this, arguments);
        return this.currency = opts.currency
      };
      return LineItem
    }(FormView);
    LineItem.register();
    module.exports = LineItem
  });
  // source: templates/lineitem.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/lineitem', function (module, exports, __dirname, __filename) {
    module.exports = '<div class="{ crowdstart-line-item: true, crowdstart-collapsed: model.quantity == 0, crowdstart-hidden: model.quantity == 0 }"><div class="crowdstart-quantity-select crowdstart-form-control"><control input="{ inputs.quantity }" style="{ "width:50px" }"></control></div><div class="crowdstart-item-description">{ model.productName }</div><div class="crowdstart-item-price crowdstart-money">x { renderCurrency(currency, model.price) }<div if="{ model.price < model.listPrice }" class="crowdstart-item-list-price crowdstart-money">{ renderCurrency(currency, model.listPrice) }</div></div><div class="crowdstart-item-total-price crowdstart-money">= { renderCurrency(currency, model.quantity * model.price) }</div></div>'
  });
  // source: src/views/modal.coffee
  require.define('./views/modal', function (module, exports, __dirname, __filename) {
    var Events, Modal, View, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    Modal = function (superClass) {
      var obj;
      extend(Modal, superClass);
      function Modal() {
        return Modal.__super__.constructor.apply(this, arguments)
      }
      Modal.prototype.tag = 'modal';
      Modal.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/modal');
      Modal.prototype.isOpen = false;
      Modal.prototype.canClose = true;
      Modal.prototype.events = (obj = {}, obj['' + Events.Modal.Open] = function () {
        return this.open()
      }, obj['' + Events.Modal.Close] = function () {
        return this.close()
      }, obj['' + Events.Modal.DisableClose] = function () {
        return this.canClose = false
      }, obj['' + Events.Modal.EnableClose] = function () {
        return this.canClose = true
      }, obj);
      Modal.prototype.js = function (opts) {
        this.client = opts.client;
        return $(document).on('keydown', this.closeOnEscape)
      };
      Modal.prototype.open = function () {
        this.isOpen = true;
        return this.update()
      };
      Modal.prototype.close = function () {
        if (this.canClose) {
          this.isOpen = false;
          return this.update()
        } else {
          return true
        }
      };
      Modal.prototype.closeOnEscape = function (event) {
        if (event.which === 27) {
          return this.close()
        }
      };
      return Modal
    }(View);
    Modal.register();
    module.exports = Modal
  });
  // source: templates/modal.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/modal', function (module, exports, __dirname, __filename) {
    module.exports = '<div class="{ crowdstart-active: isOpen }"><div class="crowdstart-modal-target"><yield></yield></div><div onclick="{ close }" class="crowdstart-modal"></div></div>'
  });
  // source: src/views/promo.coffee
  require.define('./views/promo', function (module, exports, __dirname, __filename) {
    var Events, FormView, Promo, crowdcontrol, input, requestAnimationFrame, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    riot = require('riot/riot');
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    FormView = crowdcontrol.view.form.FormView;
    requestAnimationFrame = require('raf');
    input = require('./utils/input');
    Promo = function (superClass) {
      extend(Promo, superClass);
      function Promo() {
        return Promo.__super__.constructor.apply(this, arguments)
      }
      Promo.prototype.tag = 'promo';
      Promo.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/promo');
      Promo.prototype.renderCurrency = require('./utils/currency').renderUICurrencyFromJSON;
      Promo.prototype.order = null;
      Promo.prototype.client = null;
      Promo.prototype.freeProduct = null;
      Promo.prototype.model = { promoCode: '' };
      Promo.prototype.codeApplied = false;
      Promo.prototype.clickedApplyPromoCode = true;
      Promo.prototype.locked = false;
      Promo.prototype.invalidCode = '';
      Promo.prototype.inputConfigs = [input('promoCode', 'Promo/Coupon Code', 'input uppercase trim')];
      Promo.prototype.js = function (opts) {
        Promo.__super__.js.apply(this, arguments);
        this.order = opts.order;
        this.coupon = opts.coupon;
        return this.client = opts.client
      };
      Promo.prototype.isApplicable = function () {
        var i, item, len, ref;
        if (this.order.coupon.productId == null || this.order.coupon.productId === '') {
          return true
        }
        ref = this.order.items;
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          if (item.productId === this.order.coupon.productId) {
            return true
          }
          return false
        }
      };
      Promo.prototype.discount = function () {
        var discount, i, item, j, k, len, len1, len2, ref, ref1, ref2;
        switch (this.order.coupon.type) {
        case 'flat':
          if (this.order.coupon.productId == null || this.order.coupon.productId === '') {
            this.order.discount = this.order.coupon.amount || 0;
            riot.update();
            return this.order.discount
          } else {
            discount = 0;
            ref = this.order.items;
            for (i = 0, len = ref.length; i < len; i++) {
              item = ref[i];
              if (item.productId === this.order.coupon.productId) {
                discount += (this.order.coupon.amount || 0) * item.quantity
              }
            }
            this.order.discount = discount;
            riot.update();
            return discount
          }
          break;
        case 'percent':
          discount = 0;
          if (this.order.coupon.productId == null || this.order.coupon.productId === '') {
            ref1 = this.order.items;
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              item = ref1[j];
              discount += (this.order.coupon.amount || 0) * item.price * item.quantity * 0.01
            }
          } else {
            ref2 = this.order.items;
            for (k = 0, len2 = ref2.length; k < len2; k++) {
              item = ref2[k];
              if (item.productId === this.order.coupon.productId) {
                discount += (this.order.coupon.amount || 0) * item.price * item.quantity * 0.01
              }
            }
          }
          discount = Math.floor(discount);
          this.order.discount = discount;
          riot.update();
          return discount
        }
        this.order.discount = 0;
        riot.update();
        return 0
      };
      Promo.prototype._change = function () {
        Promo.__super__._change.apply(this, arguments);
        return requestAnimationFrame(function (_this) {
          return function () {
            _this.clickedApplyPromoCode = false;
            return setTimeout(function () {
              return _this.update()
            }, 200)
          }
        }(this))
      };
      Promo.prototype.resetState = function () {
        return this.invalidCode = ''
      };
      Promo.prototype._submit = function () {
        if (this.model.promoCode === '') {
          return
        }
        this.locked = true;
        this.codeApplied = false;
        this.clickedApplyPromoCode = true;
        this.invalidCode = '';
        this.freeProduct = null;
        this.update();
        return this.client.coupon.get(this.model.promoCode).then(function (_this) {
          return function (coupon) {
            if (coupon.enabled) {
              _this.order.coupon = coupon;
              _this.order.couponCodes = [_this.model.promoCode];
              if (coupon.freeProductId !== '' && coupon.freeQuantity > 0) {
                _this.client.util.product(coupon.freeProductId).then(function (res) {
                  _this.freeProduct = res.responseText;
                  _this.freeProduct.quantity = coupon.freeQuantity;
                  _this.codeApplied = true;
                  _this.locked = false;
                  return _this.update()
                })['catch'](function (err) {
                  _this.codeApplied = true;
                  _this.locked = false;
                  _this.update();
                  return console.log('couponFreeProduct Error: ' + err)
                })
              } else {
                _this.codeApplied = true;
                _this.locked = false
              }
            } else {
              _this.invalidCode = 'expired';
              _this.clickedApplyPromoCode = false;
              _this.locked = false
            }
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.locked = false;
            _this.invalidCode = 'invalid';
            _this.clickedApplyPromoCode = false;
            return _this.update()
          }
        }(this))
      };
      return Promo
    }(FormView);
    Promo.register();
    module.exports = Promo
  });
  // source: templates/promo.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/promo', function (module, exports, __dirname, __filename) {
    module.exports = '<div class="crowdstart-form-control"><control input="{ inputs.promoCode }" onclick="{ resetState }"></control><div onclick="{ submit }" if="{ !hide }" class="crowdstart-button"><div if="{ locked }" class="crowdstart-loader"></div><div if="{ locked }">...</div><div if="{ !locked && !codeApplied }">Apply</div><div if="{ !locked && codeApplied }">Apply</div></div><div if="{ !locked && codeApplied && !freeProduct && isApplicable() }" class="crowdstart-promo-discount"><div class="crowdstart-promo-label">You Saved</div><div class="crowdstart-money">{ renderCurrency(order.currency, discount()) }</div></div><div if="{ !locked && codeApplied && !freeProduct && !isApplicable() }">Code Not Applicable</div><div if="{ !locked && codeApplied && freeProduct }" class="crowdstart-promo-item"><div if="{ freeProduct.quantity === 1 }" class="crowdstart-promo-label">Free</div><div if="{ freeProduct.quantity &gt; 1 }" class="crowdstart-promo-label">{ freeProduct.quantity } Free</div><div class="crowdstart-promo-item-name">{ freeProduct.name }</div></div><div if="{ !locked && invalidCode === \'\' && model.promoCode !== \'\' && !clickedApplyPromoCode}">Don\'t forget to apply your code!</div><div if="{ !locked && invalidCode === \'expired\'}">Expired</div><div if="{ !locked && invalidCode === \'invalid\'}">Invalid Code</div></div>'
  });
  // source: src/views/tabs.coffee
  require.define('./views/tabs', function (module, exports, __dirname, __filename) {
    var Events, Tabs, View, crowdcontrol, input, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    input = require('./utils/input');
    Tabs = function (superClass) {
      extend(Tabs, superClass);
      function Tabs() {
        return Tabs.__super__.constructor.apply(this, arguments)
      }
      Tabs.prototype.tag = 'tabs';
      Tabs.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/tabs');
      Tabs.prototype.selected = 'stripe';
      Tabs.prototype.chooseStripe = function () {
        this.selected = 'stripe';
        return this.obs.trigger(Events.Screen.Payment.ChooseStripe)
      };
      Tabs.prototype.choosePaypal = function () {
        this.selected = 'paypal';
        return this.obs.trigger(Events.Screen.Payment.ChoosePaypal)
      };
      return Tabs
    }(View);
    Tabs.register();
    module.exports = Tabs
  });
  // source: templates/tabs.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/tabs', function (module, exports, __dirname, __filename) {
    module.exports = '<div onclick="{ chooseStripe }" class="crowdstart-tab { crowdstart-tab-selected: selected == &quot;stripe&quot; }">Credit Card</div><div onclick="{ choosePaypal }" class="crowdstart-tab { crowdstart-tab-selected: selected == &quot;paypal&quot; }"><img src="https://www.paypalobjects.com/webstatic/i/logo/rebrand/ppcom.svg"/></div><div class="crowdstart-tab-padding"></div>'
  });
  // source: src/views/widget.coffee
  require.define('./views/widget', function (module, exports, __dirname, __filename) {
    var Events, View, Widget, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    Widget = function (superClass) {
      extend(Widget, superClass);
      function Widget() {
        return Widget.__super__.constructor.apply(this, arguments)
      }
      Widget.prototype.tag = 'widget';
      Widget.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/widget');
      Widget.prototype.js = function (opts) {
        return this.client = opts.client
      };
      return Widget
    }(View);
    Widget.register();
    module.exports = Widget
  });
  // source: templates/widget.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/widget', function (module, exports, __dirname, __filename) {
    module.exports = '<div class="crowdstart-checkout crowdstart-widget { crowdstart-narrow: model.config.narrow }"><div class="crowdstart-row"><header obs="{ obs }"></header></div><div class="crowdstart-row"><div class="crowdstart-column crowdstart-full-width"><screen-manager model="{ model }" obs="{ obs }" client="{ client }"></screen-manager></div><div class="crowdstart-column"><invoice model="{ model.order }" config="{ model.config }" client="{ client }" obs="{ obs }"></invoice></div></div><div class="crowdstart-row"><confirm obs="{ obs }" config="{ model.config }"></confirm></div></div>'
  });
  // source: src/views/screenmanager.coffee
  require.define('./views/screenmanager', function (module, exports, __dirname, __filename) {
    var Events, ScreenManager, View, crowdcontrol, requestAnimationFrame, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    riot = require('riot/riot');
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    View = crowdcontrol.view.View;
    requestAnimationFrame = require('raf');
    ScreenManager = function (superClass) {
      var obj;
      extend(ScreenManager, superClass);
      function ScreenManager() {
        return ScreenManager.__super__.constructor.apply(this, arguments)
      }
      ScreenManager.prototype.tag = 'screen-manager';
      ScreenManager.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/screenmanager');
      ScreenManager.prototype.index = 0;
      ScreenManager.prototype.script = null;
      ScreenManager.prototype.scriptRefs = null;
      ScreenManager.prototype.style = '';
      ScreenManager.prototype.events = (obj = {}, obj['' + Events.Screen.UpdateScript] = function (script, index) {
        return this.updateScript(script, index)
      }, obj['' + Events.Screen.TryNext] = function () {
        return this.tryNext()
      }, obj['' + Events.Screen.Next] = function () {
        return this.next()
      }, obj['' + Events.Screen.Back] = function () {
        return this.back()
      }, obj);
      ScreenManager.prototype.tryNext = function () {
        var ref1;
        if (this.index < this.script.length) {
          return (ref1 = this.scriptRefs[this.index]) != null ? ref1.submit() : void 0
        }
      };
      ScreenManager.prototype.next = function () {
        var ref1;
        if (this.index < this.script.length - 1) {
          this.index++;
          this.updateConfirmAndBackAndInvoice();
          if ((ref1 = this.scriptRefs[this.index]) != null) {
            ref1.show()
          }
          return this.update()
        }
      };
      ScreenManager.prototype.back = function () {
        var ref1;
        if (this.index > 0) {
          this.index--;
          this.updateConfirmAndBackAndInvoice();
          if ((ref1 = this.scriptRefs[this.index]) != null) {
            ref1.show()
          }
          return this.update()
        }
      };
      ScreenManager.prototype.updateConfirmAndBackAndInvoice = function () {
        var disable, show;
        show = true;
        disable = false;
        if (this.scriptRefs != null && this.scriptRefs[this.index]) {
          if (!this.scriptRefs[this.index].showInvoice) {
            disable = true;
            this.obs.trigger(Events.Invoice.Hide)
          }
          if (!this.scriptRefs[this.index].showConfirm) {
            show = false;
            this.obs.trigger(Events.Confirm.Hide)
          }
        }
        if (show) {
          this.obs.trigger(Events.Confirm.Show)
        }
        if (!disable) {
          return this.obs.trigger(Events.Invoice.Show)
        }
      };
      ScreenManager.prototype.updateScript = function (script, index) {
        if (index == null) {
          index = 0
        }
        if (this.script === script) {
          if (this.index !== index) {
            this.index = index;
            this.updateConfirmAndBackAndInvoice();
            this.update();
            return
          }
          return
        }
        this.script = script;
        this.index = index;
        return requestAnimationFrame(function (_this) {
          return function () {
            var $el, instance, j, k, len, len1, ref, ref1, ref2, ref3, total;
            if (_this.scriptRefs != null) {
              ref1 = _this.scriptRefs;
              for (j = 0, len = ref1.length; j < len; j++) {
                ref = ref1[j];
                if (ref != null) {
                  ref.unmount()
                }
              }
            }
            _this.scriptRefs = [];
            $el = $('.crowdstart-screen-strip');
            $el.html('');
            total = _this.script.length;
            ref2 = _this.script;
            for (k = 0, len1 = ref2.length; k < len1; k++) {
              script = ref2[k];
              $el.append($('<' + script + '>'));
              instance = riot.mount(script, {
                model: _this.model,
                total: total,
                screenManagerObs: _this.obs,
                client: _this.client
              });
              _this.scriptRefs.push(instance[0])
            }
            _this.updateConfirmAndBackAndInvoice();
            if ((ref3 = _this.scriptRefs[_this.index]) != null) {
              ref3.show()
            }
            _this.update();
            return riot.update()
          }
        }(this))
      };
      ScreenManager.prototype.js = function (opts) {
        var resizeFn;
        this.client = opts.client;
        this.updateScript(opts.script || []);
        resizeFn = function (_this) {
          return function () {
            var $root;
            $root = $(_this.root);
            $root.width($root.parent().outerWidth());
            $root.height($($root.find('.crowdstart-screen-strip').children()[_this.index]).outerHeight());
            return $root
          }
        }(this);
        $(window).on('resize', resizeFn);
        this.on('update', function (_this) {
          return function () {
            var $root, total;
            total = _this.script.length;
            $root = $(_this.root);
            return $root.find('.crowdstart-screen-strip').css({
              transform: 'translateX(-' + _this.index * 100 / total + '%)',
              width: total * 100 + '%'
            })
          }
        }(this));
        this.on('updated', function (_this) {
          return function () {
            var $child, $children, $root, child, i, j, len;
            $root = resizeFn();
            $children = $root.find('.crowdstart-screen-strip').children();
            for (i = j = 0, len = $children.length; j < len; i = ++j) {
              child = $children[i];
              $child = $(child).children();
              if (i === _this.index) {
                $child.css('display', '');
                (function ($child) {
                  return requestAnimationFrame(function () {
                    $child.css('opacity', 1);
                    return $root.height($child.outerHeight())
                  })
                }($child))
              } else {
                $child.css('opacity', 0);
                (function ($child) {
                  return setTimeout(function () {
                    return $child.css('display', 'none')
                  }, 500)
                }($child))
              }
            }
            _this.obs.trigger(Events.Screen.SyncScript, _this.scriptRefs, _this.index);
            return requestAnimationFrame(function () {
              return resizeFn()
            })
          }
        }(this));
        return this.on('unmount', function () {
          return $(window).off('resize', resizeFn)
        })
      };
      return ScreenManager
    }(View);
    ScreenManager.register();
    module.exports = ScreenManager
  });
  // source: templates/screenmanager.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/screenmanager', function (module, exports, __dirname, __filename) {
    module.exports = '<div class="crowdstart-screens crowdstart-form-control"><div class="crowdstart-screen-strip"></div></div>'
  });
  // source: src/views/controls/index.coffee
  require.define('./views/controls', function (module, exports, __dirname, __filename) {
    var CardNumber, Checkbox, CountrySelect, Events, Input, InputView, Promise, QuantitySelect, Select, StateSelect, Static, analytics, countryUtils, crowdcontrol, emailRe, helpers, isABrokenBrowser, isNumber, isObject, requestAnimationFrame, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    InputView = crowdcontrol.view.form.InputView;
    requestAnimationFrame = require('raf');
    Promise = require('broken/lib');
    analytics = require('./utils/analytics');
    helpers = crowdcontrol.view.form.helpers;
    helpers.defaultTagName = 'crowdstart-input';
    isObject = require('is-object');
    isNumber = require('is-number');
    Input = function (superClass) {
      extend(Input, superClass);
      function Input() {
        return Input.__super__.constructor.apply(this, arguments)
      }
      Input.prototype.tag = 'crowdstart-input';
      Input.prototype.errorHtml = require('./Users/zk/work/crowdstart/checkout.js/templates/control/error');
      Input.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/control/input');
      Input.prototype.js = function (opts) {
        return this.model = opts.input ? opts.input.model : this.model
      };
      return Input
    }(InputView);
    Input.register();
    CardNumber = function (superClass) {
      extend(CardNumber, superClass);
      function CardNumber() {
        return CardNumber.__super__.constructor.apply(this, arguments)
      }
      CardNumber.prototype.tag = 'crowdstart-card-number';
      CardNumber.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/control/cardnumber');
      return CardNumber
    }(Input);
    CardNumber.register();
    Static = function (superClass) {
      extend(Static, superClass);
      function Static() {
        return Static.__super__.constructor.apply(this, arguments)
      }
      Static.prototype.tag = 'crowdstart-static';
      Static.prototype.html = '<span>{ model.value }</span>';
      return Static
    }(Input);
    Static.register();
    Checkbox = function (superClass) {
      extend(Checkbox, superClass);
      function Checkbox() {
        return Checkbox.__super__.constructor.apply(this, arguments)
      }
      Checkbox.prototype.tag = 'crowdstart-checkbox';
      Checkbox.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/control/checkbox');
      Checkbox.prototype.change = function (event) {
        var value;
        value = event.target.checked;
        if (value !== this.model.value) {
          this.obs.trigger(Events.Input.Change, this.model.name, value);
          this.model.value = value;
          return this.update()
        }
      };
      return Checkbox
    }(Input);
    Checkbox.register();
    isABrokenBrowser = window.navigator.userAgent.indexOf('MSIE') > 0 || window.navigator.userAgent.indexOf('Trident') > 0;
    Select = function (superClass) {
      var obj;
      extend(Select, superClass);
      function Select() {
        return Select.__super__.constructor.apply(this, arguments)
      }
      Select.prototype.tag = 'crowdstart-select';
      Select.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/control/select');
      Select.prototype.tags = false;
      Select.prototype.min = 10;
      Select.prototype.lastValueSet = null;
      Select.prototype.events = (obj = {}, obj['' + Events.Input.Set] = function (name, value) {
        if (name === this.model.name && value != null) {
          this.clearError();
          this.model.value = value;
          return riot.update()
        }
      }, obj);
      Select.prototype.options = function () {
        return this.selectOptions
      };
      Select.prototype.changed = false;
      Select.prototype.change = function (event) {
        var value;
        value = $(event.target).val();
        if (value !== this.model.value && parseFloat(value) !== this.model.value) {
          this.obs.trigger(Events.Input.Change, this.model.name, value);
          this.model.value = value;
          this.changed = true;
          return this.update()
        }
      };
      Select.prototype.isCustom = function (o) {
        var name, options, value;
        options = o;
        if (options == null) {
          options = this.options()
        }
        for (name in options) {
          value = options[name];
          if (isObject(value)) {
            if (!this.isCustom(value)) {
              return false
            }
          } else if (name === this.model.value) {
            return false
          }
        }
        return true
      };
      Select.prototype.initSelect = function ($select) {
        return $select.select2({
          tags: this.tags,
          placeholder: this.model.placeholder,
          minimumResultsForSearch: this.min,
          width: isABrokenBrowser ? '100%' : void 0
        }).change(function (_this) {
          return function (event) {
            return _this.change(event)
          }
        }(this))
      };
      Select.prototype.js = function (opts) {
        Select.__super__.js.apply(this, arguments);
        opts.style = opts.style || 'width:100%';
        this.selectOptions = opts.options;
        this.on('updated', function (_this) {
          return function () {
            var $select;
            $select = $(_this.root).find('select');
            if ($select[0] != null) {
              if (isABrokenBrowser) {
                $(_this.root).children('.select2').css({ width: '100%' })
              }
              if (!_this.initialized) {
                return requestAnimationFrame(function () {
                  _this.initSelect($select);
                  _this.initialized = true;
                  return _this.changed = true
                })
              } else if (_this.changed) {
                return requestAnimationFrame(function () {
                  if (_this.isCustom()) {
                    $select.select('destroy');
                    _this.initSelect($select)
                  }
                  _this.changed = false;
                  return $select.select2('val', _this.model.value)
                })
              }
            } else {
              return requestAnimationFrame(function () {
                return _this.update()
              })
            }
          }
        }(this));
        return this.on('unmount', function (_this) {
          return function () {
            var $select;
            return $select = $(_this.root).find('select')
          }
        }(this))
      };
      return Select
    }(Input);
    Select.register();
    QuantitySelect = function (superClass) {
      extend(QuantitySelect, superClass);
      function QuantitySelect() {
        return QuantitySelect.__super__.constructor.apply(this, arguments)
      }
      QuantitySelect.prototype.tag = 'crowdstart-quantity-select';
      QuantitySelect.prototype.options = function () {
        return {
          1: 1,
          2: 2,
          3: 3,
          4: 4,
          5: 5,
          6: 6,
          7: 7,
          8: 8,
          9: 9
        }
      };
      QuantitySelect.prototype.change = function (event) {
        var deltaQuantity, newValue, oldValue;
        oldValue = this.model.value;
        QuantitySelect.__super__.change.apply(this, arguments);
        newValue = this.model.value;
        deltaQuantity = newValue - oldValue;
        if (deltaQuantity > 0) {
          return analytics.track('Added Product', {
            id: this.model.productId,
            sku: this.model.productSlug,
            name: this.model.productName,
            quantity: deltaQuantity,
            price: parseFloat(this.model.price / 100)
          })
        } else if (deltaQuantity < 0) {
          return analytics.track('Removed Product', {
            id: this.model.productId,
            sku: this.model.productSlug,
            name: this.model.productName,
            quantity: deltaQuantity,
            price: parseFloat(this.model.price / 100)
          })
        }
      };
      return QuantitySelect
    }(Select);
    QuantitySelect.register();
    StateSelect = function (superClass) {
      var obj;
      extend(StateSelect, superClass);
      function StateSelect() {
        return StateSelect.__super__.constructor.apply(this, arguments)
      }
      StateSelect.prototype.tag = 'crowdstart-state-select';
      StateSelect.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/control/stateselect');
      StateSelect.prototype.country = '';
      StateSelect.prototype.events = (obj = {}, obj['' + Events.Country.Set] = function (country) {
        this.country = country;
        if (this.country === 'us') {
          this.obs.trigger;
          return $(this.root).find('.select2').show()
        } else {
          $(this.root).find('.select2').hide();
          if (this.model.value != null) {
            return this.model.value = this.model.value.toUpperCase()
          }
        }
      }, obj);
      StateSelect.prototype.options = function () {
        return require('./data/states')
      };
      StateSelect.prototype.js = function () {
        StateSelect.__super__.js.apply(this, arguments);
        if (this.model.value != null) {
          return this.model.value = this.model.value.toLowerCase()
        }
      };
      return StateSelect
    }(Select);
    StateSelect.register();
    CountrySelect = function (superClass) {
      var obj;
      extend(CountrySelect, superClass);
      function CountrySelect() {
        return CountrySelect.__super__.constructor.apply(this, arguments)
      }
      CountrySelect.prototype.tag = 'crowdstart-country-select';
      CountrySelect.prototype.min = 1;
      CountrySelect.prototype.events = (obj = {}, obj['' + Events.Input.Set] = function (name, value) {
        if (name === this.model.name && value != null) {
          this.clearError();
          this.model.value = value;
          this.obs.trigger(Events.Country.Set, value);
          return riot.update()
        }
      }, obj);
      CountrySelect.prototype.options = function () {
        return require('./data/countries').data
      };
      CountrySelect.prototype.js = function () {
        CountrySelect.__super__.js.apply(this, arguments);
        if (this.model.value != null) {
          this.model.value = this.model.value.toLowerCase()
        }
        return this.obs.trigger(Events.Country.Set, this.model.value)
      };
      return CountrySelect
    }(Select);
    CountrySelect.register();
    helpers.registerTag(function (inputCfg) {
      return inputCfg.hints.input
    }, 'crowdstart-input');
    helpers.registerTag(function (inputCfg) {
      return inputCfg.hints.cardnumber
    }, 'crowdstart-card-number');
    helpers.registerTag(function (inputCfg) {
      return inputCfg.hints['static']
    }, 'crowdstart-static');
    helpers.registerTag(function (inputCfg) {
      return inputCfg.hints.checkbox
    }, 'crowdstart-checkbox');
    helpers.registerTag(function (inputCfg) {
      return inputCfg.hints.select
    }, 'crowdstart-select');
    helpers.registerTag(function (inputCfg) {
      return inputCfg.hints['state-select']
    }, 'crowdstart-state-select');
    helpers.registerTag(function (inputCfg) {
      return inputCfg.hints['country-select']
    }, 'crowdstart-country-select');
    helpers.registerTag(function (inputCfg) {
      return inputCfg.hints['quantity-select']
    }, 'crowdstart-quantity-select');
    countryUtils = require('./utils/country');
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.input || inputCfg.hints.password
    }, function (model, name) {
      var value;
      value = model[name];
      if (!isNumber(value)) {
        value = value != null ? typeof value.trim === 'function' ? value.trim() : void 0 : void 0
      }
      return value
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.postalRequired
    }, function (model, name) {
      var value;
      value = model[name];
      if (countryUtils.requiresPostalCode(model.country || '') && (value == null || value === '')) {
        throw new Error('Required for Selected Country')
      }
      return value
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.required
    }, function (model, name) {
      var value;
      value = model[name];
      if (isNumber(value)) {
        return parseFloat(value)
      }
      value = value != null ? typeof value.trim === 'function' ? value.trim() : void 0 : void 0;
      if (value == null || value === '') {
        throw new Error('Required')
      }
      return value
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.requiredstripe
    }, function (model, name) {
      var value;
      value = model[name];
      if (isNumber(value)) {
        return value
      }
      value = value != null ? typeof value.trim === 'function' ? value.trim() : void 0 : void 0;
      if (model._type === 'stripe' && (value == null || value === '')) {
        throw new Error('Required')
      }
      return value
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.uppercase
    }, function (model, name) {
      var value;
      value = model[name].toUpperCase();
      return value
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.terms
    }, function (model, name) {
      var value;
      value = model[name];
      if (!value) {
        throw new Error('Please read and agree to the terms and conditions.')
      }
      return value
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.name
    }, function (model, name) {
      var i, value;
      value = model[name];
      i = value.indexOf(' ');
      model.firstName = value.slice(0, i);
      model.lastName = value.slice(i + 1);
      return value
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.cardnumber
    }, function (model, name) {
      var value;
      value = model[name];
      value = value != null ? typeof value.trim === 'function' ? value.trim() : void 0 : void 0;
      if (model._type !== 'stripe') {
        return value
      }
      return new Promise(function (resolve, reject) {
        return requestAnimationFrame(function () {
          if ($('input[name=number]').hasClass('jp-card-invalid')) {
            reject(new Error('Enter a valid card number'))
          }
          return resolve(value)
        })
      })
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.expiration
    }, function (model, name) {
      var base, base1, date, value;
      value = model[name];
      value = value != null ? typeof value.trim === 'function' ? value.trim() : void 0 : void 0;
      if (model._type !== 'stripe') {
        return value
      }
      date = value.split('/');
      if (date.length < 2) {
        throw new Error('Enter a valid expiration date')
      }
      model.month = typeof (base = date[0]).trim === 'function' ? base.trim() : void 0;
      model.year = ('' + new Date().getFullYear()).substr(0, 2) + (typeof (base1 = date[1]).trim === 'function' ? base1.trim() : void 0);
      return new Promise(function (resolve, reject) {
        return requestAnimationFrame(function () {
          if ($('input[name=expiry]').hasClass('jp-card-invalid')) {
            reject(new Error('Enter a valid expiration date'))
          }
          return resolve(value)
        })
      })
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.cvc
    }, function (model, name) {
      var value;
      value = model[name];
      value = value != null ? typeof value.trim === 'function' ? value.trim() : void 0 : void 0;
      if (model._type !== 'stripe') {
        return value
      }
      return new Promise(function (resolve, reject) {
        return requestAnimationFrame(function () {
          if ($('input[name=cvc]').hasClass('jp-card-invalid')) {
            reject(new Error('Enter a valid CVC number'))
          }
          return resolve(value)
        })
      })
    });
    emailRe = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.email
    }, function (model, name) {
      var value;
      value = model[name];
      value = value != null ? typeof value.trim === 'function' ? value.trim() : void 0 : void 0;
      if (!emailRe.test(value)) {
        throw new Error('Enter a valid email')
      }
      return value
    });
    helpers.registerValidator(function (inputCfg) {
      return inputCfg.hints.parsenumber
    }, function (model, name) {
      var value;
      value = model[name];
      value = value != null ? typeof value.trim === 'function' ? value.trim() : void 0 : void 0;
      return parseFloat(value)
    })
  });
  // source: templates/control/error.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/control/error', function (module, exports, __dirname, __filename) {
    module.exports = '<div if="{ hasError() }" class="crowdstart-message">{ error }</div>'
  });
  // source: templates/control/input.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/control/input', function (module, exports, __dirname, __filename) {
    module.exports = '<label for="{ model.name }" if="{ opts.label }">{ opts.label }</label><input id="{ model.name }" name="{ opts.name || model.name }" onchange="{ change }" onblur="{ change }" value="{ model.value }" placeholder="{ model.placeholder }" class="{ crowdstart-error: hasError() }"/>'
  });
  // source: templates/control/cardnumber.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/control/cardnumber', function (module, exports, __dirname, __filename) {
    module.exports = '<label for="{ model.name }" if="{ opts.label }">{ opts.label }<br/><div class="crowdstart-fine-print">(Visa, Mastercard, AMEX, Discover, Diners Club, JCB)</div><div class="icon-lock"><div class="lock-top-1"></div><div class="lock-top-2"></div><div class="lock-body"></div><div class="lock-hole"></div></div><div class="stripe-branding">Powered by<strong><a href="http://www.stripe.com" target="_blank">&nbsp;Stripe</a></strong></div></label><input id="{ model.name }" name="{ opts.name || model.name }" onchange="{ change }" onblur="{ change }" value="{ model.value }" placeholder="{ model.placeholder }" class="{ crowdstart-error: hasError() }"/>'
  });
  // source: templates/control/checkbox.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/control/checkbox', function (module, exports, __dirname, __filename) {
    module.exports = '<div class="crowdstart-checkbox-control"><input id="{ model.name }" name="{ model.name }" type="checkbox" __checked="{ model.value }" onchange="{ change }" onblur="{ change }"/><label for="{ model.name }"><span class="crowdstart-checkbox"><div class="crowdstart-checkbox-parts"><div class="crowdstart-checkbox-short-part"></div><div class="crowdstart-checkbox-long-part"></div></div></span></label></div>'
  });
  // source: templates/control/select.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/control/select', function (module, exports, __dirname, __filename) {
    module.exports = '<label for="{ model.name }" if="{ opts.label }">{ opts.label }</label><select id="{ model.name }" style="{ opts.style }" name="{ model.name }" onchange="{ change }" onblur="{ change }" value="{ model.value }" data-placeholder="{ model.placeholder }"><option if="{ model.placeholder }"><option each="{ value, name in options() }" value="{value}" __selected="{ this.parent.model.value == value }">{name}</option></option><optgroup if="{ tags &amp;&amp; isCustom() }" label="Custom Events"><option value="{ model.value }" selected="true">{ model.value }</option></optgroup></select>'
  });
  // source: templates/control/stateselect.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/control/stateselect', function (module, exports, __dirname, __filename) {
    module.exports = '<label for="{ model.name }" if="{ opts.label }">{ opts.label }</label><input if="{ country !== &quot;us&quot; }" id="{ model.name }" name="{ opts.name || model.name }" onchange="{ change }" onblur="{ change }" value="{ model.value }" placeholder="{ model.placeholder }" class="{ crowdstart-error: hasError() }"/><select if="{ country == &quot;us&quot; }" id="{ model.name }" style="{ opts.style }" name="{ model.name }" onchange="{ change }" onblur="{ change }" value="{ model.value }" data-placeholder="{ model.placeholder }"><option if="{ model.placeholder }"><option each="{ value, name in options() }" value="{value}" __selected="{ this.parent.model.value == value }">{name}</option></option><optgroup if="{ tags &amp;&amp; isCustom() }" label="Custom Events"><option value="{ model.value }" selected="true">{ model.value }</option></optgroup></select>'
  });
  // source: src/data/states.coffee
  require.define('./data/states', function (module, exports, __dirname, __filename) {
    module.exports = {
      al: 'Alabama',
      ak: 'Alaska',
      az: 'Arizona',
      ar: 'Arkansas',
      ca: 'California',
      co: 'Colorado',
      ct: 'Connecticut',
      de: 'Delaware',
      dc: 'District of Columbia',
      fl: 'Florida',
      ga: 'Georgia',
      hi: 'Hawaii',
      id: 'Idaho',
      il: 'Illinois',
      'in': 'Indiana',
      ia: 'Iowa',
      ks: 'Kansas',
      ky: 'Kentucky',
      la: 'Louisiana',
      me: 'Maine',
      mt: 'Montana',
      ne: 'Nebraska',
      nv: 'Nevada',
      nh: 'New Hampshire',
      nj: 'New Jersey',
      nm: 'New Mexico',
      ny: 'New York',
      nc: 'North Carolina',
      nd: 'North Dakota',
      oh: 'Ohio',
      ok: 'Oklahoma',
      or: 'Oregon',
      md: 'Maryland',
      ma: 'Massachusetts',
      mi: 'Michigan',
      mn: 'Minnesota',
      ms: 'Mississippi',
      mo: 'Missouri',
      pa: 'Pennsylvania',
      ri: 'Rhode Island',
      sc: 'South Carolina',
      sd: 'South Dakota',
      tn: 'Tennessee',
      tx: 'Texas',
      ut: 'Utah',
      vt: 'Vermont',
      va: 'Virginia',
      wa: 'Washington',
      wv: 'West Virginia',
      wi: 'Wisconsin',
      wy: 'Wyoming',
      aa: 'U.S. Armed Forces – Americas',
      ae: 'U.S. Armed Forces – Europe',
      ap: 'U.S. Armed Forces – Pacific'
    }
  });
  // source: src/data/countries.coffee
  require.define('./data/countries', function (module, exports, __dirname, __filename) {
    module.exports = {
      data: {
        af: 'Afghanistan',
        ax: 'Åland Islands',
        al: 'Albania',
        dz: 'Algeria',
        as: 'American Samoa',
        ad: 'Andorra',
        ao: 'Angola',
        ai: 'Anguilla',
        aq: 'Antarctica',
        ag: 'Antigua and Barbuda',
        ar: 'Argentina',
        am: 'Armenia',
        aw: 'Aruba',
        au: 'Australia',
        at: 'Austria',
        az: 'Azerbaijan',
        bs: 'Bahamas',
        bh: 'Bahrain',
        bd: 'Bangladesh',
        bb: 'Barbados',
        by: 'Belarus',
        be: 'Belgium',
        bz: 'Belize',
        bj: 'Benin',
        bm: 'Bermuda',
        bt: 'Bhutan',
        bo: 'Bolivia',
        bq: 'Bonaire, Sint Eustatius and Saba',
        ba: 'Bosnia and Herzegovina',
        bw: 'Botswana',
        bv: 'Bouvet Island',
        br: 'Brazil',
        io: 'British Indian Ocean Territory',
        bn: 'Brunei Darussalam',
        bg: 'Bulgaria',
        bf: 'Burkina Faso',
        bi: 'Burundi',
        kh: 'Cambodia',
        cm: 'Cameroon',
        ca: 'Canada',
        cv: 'Cabo Verde',
        ky: 'Cayman Islands',
        cf: 'Central African Republic',
        td: 'Chad',
        cl: 'Chile',
        cn: 'China',
        cx: 'Christmas Island',
        cc: 'Cocos (Keeling) Islands',
        co: 'Colombia',
        km: 'Comoros',
        cg: 'Congo',
        cd: 'Congo (Democratic Republic)',
        ck: 'Cook Islands',
        cr: 'Costa Rica',
        ci: "Côte d'Ivoire",
        hr: 'Croatia',
        cu: 'Cuba',
        cw: 'Curaçao',
        cy: 'Cyprus',
        cz: 'Czech Republic',
        dk: 'Denmark',
        dj: 'Djibouti',
        dm: 'Dominica',
        'do': 'Dominican Republic',
        ec: 'Ecuador',
        eg: 'Egypt',
        sv: 'El Salvador',
        gq: 'Equatorial Guinea',
        er: 'Eritrea',
        ee: 'Estonia',
        et: 'Ethiopia',
        fk: 'Falkland Islands',
        fo: 'Faroe Islands',
        fj: 'Fiji',
        fi: 'Finland',
        fr: 'France',
        gf: 'French Guiana',
        pf: 'French Polynesia',
        tf: 'French Southern Territories',
        ga: 'Gabon',
        gm: 'Gambia',
        ge: 'Georgia',
        de: 'Germany',
        gh: 'Ghana',
        gi: 'Gibraltar',
        gr: 'Greece',
        gl: 'Greenland',
        gd: 'Grenada',
        gp: 'Guadeloupe',
        gu: 'Guam',
        gt: 'Guatemala',
        gg: 'Guernsey',
        gn: 'Guinea',
        gw: 'Guinea-Bissau',
        gy: 'Guyana',
        ht: 'Haiti',
        hm: 'Heard Island and McDonald Islands',
        va: 'Holy See',
        hn: 'Honduras',
        hk: 'Hong Kong',
        hu: 'Hungary',
        is: 'Iceland',
        'in': 'India',
        id: 'Indonesia',
        ir: 'Iran',
        iq: 'Iraq',
        ie: 'Ireland',
        im: 'Isle of Man',
        il: 'Israel',
        it: 'Italy',
        jm: 'Jamaica',
        jp: 'Japan',
        je: 'Jersey',
        jo: 'Jordan',
        kz: 'Kazakhstan',
        ke: 'Kenya',
        ki: 'Kiribati',
        kp: "Korea (Democratic People's Republic of)",
        kr: 'Korea (Republic of)',
        kw: 'Kuwait',
        kg: 'Kyrgyzstan',
        la: "Lao People's Democratic Republic",
        lv: 'Latvia',
        lb: 'Lebanon',
        ls: 'Lesotho',
        lr: 'Liberia',
        ly: 'Libya',
        li: 'Liechtenstein',
        lt: 'Lithuania',
        lu: 'Luxembourg',
        mo: 'Macao',
        mk: 'Macedonia',
        mg: 'Madagascar',
        mw: 'Malawi',
        my: 'Malaysia',
        mv: 'Maldives',
        ml: 'Mali',
        mt: 'Malta',
        mh: 'Marshall Islands',
        mq: 'Martinique',
        mr: 'Mauritania',
        mu: 'Mauritius',
        yt: 'Mayotte',
        mx: 'Mexico',
        fm: 'Micronesia',
        md: 'Moldova',
        mc: 'Monaco',
        mn: 'Mongolia',
        me: 'Montenegro',
        ms: 'Montserrat',
        ma: 'Morocco',
        mz: 'Mozambique',
        mm: 'Myanmar',
        na: 'Namibia',
        nr: 'Nauru',
        np: 'Nepal',
        nl: 'Netherlands',
        nc: 'New Caledonia',
        nz: 'New Zealand',
        ni: 'Nicaragua',
        ne: 'Niger',
        ng: 'Nigeria',
        nu: 'Niue',
        nf: 'Norfolk Island',
        mp: 'Northern Mariana Islands',
        no: 'Norway',
        om: 'Oman',
        pk: 'Pakistan',
        pw: 'Palau',
        ps: 'Palestine',
        pa: 'Panama',
        pg: 'Papua New Guinea',
        py: 'Paraguay',
        pe: 'Peru',
        ph: 'Philippines',
        pn: 'Pitcairn',
        pl: 'Poland',
        pt: 'Portugal',
        pr: 'Puerto Rico',
        qa: 'Qatar',
        re: 'Réunion',
        ro: 'Romania',
        ru: 'Russian Federation',
        rw: 'Rwanda',
        bl: 'Saint Barthélemy',
        sh: 'Saint Helena, Ascension and Tristan da Cunha',
        kn: 'Saint Kitts and Nevis',
        lc: 'Saint Lucia',
        mf: 'Saint Martin (French)',
        pm: 'Saint Pierre and Miquelon',
        vc: 'Saint Vincent and the Grenadines',
        ws: 'Samoa',
        sm: 'San Marino',
        st: 'Sao Tome and Principe',
        sa: 'Saudi Arabia',
        sn: 'Senegal',
        rs: 'Serbia',
        sc: 'Seychelles',
        sl: 'Sierra Leone',
        sg: 'Singapore',
        sx: 'Sint Maarten (Dutch)',
        sk: 'Slovakia',
        si: 'Slovenia',
        sb: 'Solomon Islands',
        so: 'Somalia',
        za: 'South Africa',
        gs: 'South Georgia and the South Sandwich Islands',
        ss: 'South Sudan',
        es: 'Spain',
        lk: 'Sri Lanka',
        sd: 'Sudan',
        sr: 'Suriname',
        sj: 'Svalbard and Jan Mayen',
        sz: 'Swaziland',
        se: 'Sweden',
        ch: 'Switzerland',
        sy: 'Syrian Arab Republic',
        tw: 'Taiwan',
        tj: 'Tajikistan',
        tz: 'Tanzania',
        th: 'Thailand',
        tl: 'Timor-Leste',
        tg: 'Togo',
        tk: 'Tokelau',
        to: 'Tonga',
        tt: 'Trinidad and Tobago',
        tn: 'Tunisia',
        tr: 'Turkey',
        tm: 'Turkmenistan',
        tc: 'Turks and Caicos Islands',
        tv: 'Tuvalu',
        ug: 'Uganda',
        ua: 'Ukraine',
        ae: 'United Arab Emirates',
        gb: 'United Kingdom of Great Britain and Northern Ireland',
        us: 'United States of America',
        um: 'United States Minor Outlying Islands',
        uy: 'Uruguay',
        uz: 'Uzbekistan',
        vu: 'Vanuatu',
        ve: 'Venezuela',
        vn: 'Viet Nam',
        vg: 'Virgin Islands (British)',
        vi: 'Virgin Islands (U.S.)',
        wf: 'Wallis and Futuna',
        eh: 'Western Sahara',
        ye: 'Yemen',
        zm: 'Zambia',
        zw: 'Zimbabwe'
      }
    }
  });
  // source: src/utils/country.coffee
  require.define('./utils/country', function (module, exports, __dirname, __filename) {
    module.exports = {
      requiresPostalCode: function (code) {
        code = code.toLowerCase();
        return code === 'dz' || code === 'ar' || code === 'am' || code === 'au' || code === 'at' || code === 'az' || code === 'a2' || code === 'bd' || code === 'by' || code === 'be' || code === 'ba' || code === 'br' || code === 'bn' || code === 'bg' || code === 'ca' || code === 'ic' || code === 'cn' || code === 'hr' || code === 'cy' || code === 'cz' || code === 'dk' || code === 'en' || code === 'ee' || code === 'fo' || code === 'fi' || code === 'fr' || code === 'ge' || code === 'de' || code === 'gr' || code === 'gl' || code === 'gu' || code === 'gg' || code === 'ho' || code === 'hu' || code === 'in' || code === 'id' || code === 'il' || code === 'it' || code === 'jp' || code === 'je' || code === 'kz' || code === 'kr' || code === 'ko' || code === 'kg' || code === 'lv' || code === 'li' || code === 'lt' || code === 'lu' || code === 'mk' || code === 'mg' || code === 'm3' || code === 'my' || code === 'mh' || code === 'mq' || code === 'yt' || code === 'mx' || code === 'mn' || code === 'me' || code === 'nl' || code === 'nz' || code === 'nb' || code === 'no' || code === 'pk' || code === 'ph' || code === 'pl' || code === 'po' || code === 'pt' || code === 'pr' || code === 're' || code === 'ru' || code === 'sa' || code === 'sf' || code === 'cs' || code === 'sg' || code === 'sk' || code === 'si' || code === 'za' || code === 'es' || code === 'lk' || code === 'nt' || code === 'sx' || code === 'uv' || code === 'vl' || code === 'se' || code === 'ch' || code === 'tw' || code === 'tj' || code === 'th' || code === 'tu' || code === 'tn' || code === 'tr' || code === 'tm' || code === 'vi' || code === 'ua' || code === 'gb' || code === 'us' || code === 'uy' || code === 'uz' || code === 'va' || code === 'vn' || code === 'wl' || code === 'ya'
      }
    }
  });
  // source: src/views/screens/index.coffee
  require.define('./views/screens', function (module, exports, __dirname, __filename) {
    module.exports = {
      Payment: require('./views/screens/payment'),
      Shipping: require('./views/screens/shipping'),
      ThankYou: require('./views/screens/thankyou')
    }
  });
  // source: src/views/screens/payment.coffee
  require.define('./views/screens/payment', function (module, exports, __dirname, __filename) {
    var Events, Payment, Screen, analytics, crowdcontrol, input, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    Screen = require('./views/screens/screen');
    analytics = require('./utils/analytics');
    input = require('./utils/input');
    require('card/src/coffee/card');
    require('style-inject')(require('card/src/scss/card'));
    Payment = function (superClass) {
      var obj;
      extend(Payment, superClass);
      function Payment() {
        return Payment.__super__.constructor.apply(this, arguments)
      }
      Payment.prototype.tag = 'payment';
      Payment.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/screens/payment');
      Payment.prototype.title = 'Payment Info';
      Payment.prototype.card = null;
      Payment.prototype.inputConfigs = [
        input('user.email', 'youremail@somewhere.com', 'email input required'),
        input('user.password', 'Password', 'password'),
        input('user.name', 'Full Name', 'input name required'),
        input('payment.account.number', 'XXXX XXXX XXXX XXXX', 'cardnumber requiredstripe'),
        input('payment.account.expiry', 'MM / YY', 'input requiredstripe expiration'),
        input('payment.account.cvc', 'CVC', 'input requiredstripe cvc')
      ];
      Payment.prototype.events = (obj = {}, obj['' + Events.Screen.Payment.ChooseStripe] = function () {
        return this.setSelected('stripe')
      }, obj['' + Events.Screen.Payment.ChoosePaypal] = function () {
        return this.setSelected('paypal')
      }, obj);
      Payment.prototype.hasProcessors = function () {
        return this.hasPaypal() && this.hasStripe()
      };
      Payment.prototype.hasPaypal = function () {
        return this.model.config.processors.paypal
      };
      Payment.prototype.hasStripe = function () {
        return this.model.config.processors.stripe
      };
      Payment.prototype.setSelected = function (selected) {
        this.model.order.type = selected;
        this.model.payment.account._type = selected;
        this.fullyValidated = false;
        return riot.update()
      };
      Payment.prototype.show = function () {
        return analytics.track('Viewed Checkout Step', { step: 1 })
      };
      Payment.prototype._submit = function () {
        Payment.__super__._submit.call(this);
        return analytics.track('Completed Checkout Step', { step: 1 })
      };
      Payment.prototype.js = function () {
        Payment.__super__.js.apply(this, arguments);
        this.model.payment.account._type = this.model.order.type;
        return this.on('updated', function (_this) {
          return function () {
            var $card;
            if (_this.card == null) {
              $card = $(_this.root).find('.crowdstart-card');
              if ($card[0] != null) {
                return _this.card = new window.Card({
                  form: 'form#payment',
                  container: '.crowdstart-card',
                  width: 180
                })
              }
            }
          }
        }(this))
      };
      return Payment
    }(Screen);
    Payment.register();
    module.exports = Payment
  });
  // source: src/views/screens/screen.coffee
  require.define('./views/screens/screen', function (module, exports, __dirname, __filename) {
    var Events, FormView, Screen, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    FormView = crowdcontrol.view.form.FormView;
    Screen = function (superClass) {
      extend(Screen, superClass);
      function Screen() {
        return Screen.__super__.constructor.apply(this, arguments)
      }
      Screen.prototype.tag = 'screen';
      Screen.prototype.title = 'Untitled';
      Screen.prototype.showConfirm = true;
      Screen.prototype.showBack = true;
      Screen.prototype.showInvoice = true;
      Screen.prototype.index = 0;
      Screen.prototype.total = 1;
      Screen.prototype.style = '';
      Screen.prototype.screenManagerObs = null;
      Screen.prototype.js = function (opts) {
        var ref, width;
        this.total = (ref = opts.total) != null ? ref : 1;
        width = 100 / this.total;
        this.on('updated', function (_this) {
          return function () {
            return $(_this.root).css('width', width + '%')
          }
        }(this));
        this.screenManagerObs = opts.screenManagerObs;
        this.client = opts.client;
        return Screen.__super__.js.apply(this, arguments)
      };
      Screen.prototype.show = function () {
      };
      Screen.prototype._submit = function () {
        return this.screenManagerObs.trigger(Events.Screen.Next)
      };
      return Screen
    }(FormView);
    module.exports = Screen
  });
  // source: node_modules/card/src/coffee/card.coffee
  require.define('card/src/coffee/card', function (module, exports, __dirname, __filename) {
    var Card, QJ, extend, payment;
    require('card/src/scss/card');
    QJ = require('qj/lib/qj');
    payment = require('payment/lib/payment');
    extend = require('node.extend');
    Card = function () {
      var bindVal;
      Card.prototype.cardTemplate = '' + '<div class="jp-card-container">' + '<div class="jp-card">' + '<div class="jp-card-front">' + '<div class="jp-card-logo jp-card-elo">' + '<div class="e">e</div>' + '<div class="l">l</div>' + '<div class="o">o</div>' + '</div>' + '<div class="jp-card-logo jp-card-visa">visa</div>' + '<div class="jp-card-logo jp-card-mastercard">MasterCard</div>' + '<div class="jp-card-logo jp-card-maestro">Maestro</div>' + '<div class="jp-card-logo jp-card-amex"></div>' + '<div class="jp-card-logo jp-card-discover">discover</div>' + '<div class="jp-card-logo jp-card-dankort"><div class="dk"><div class="d"></div><div class="k"></div></div></div>' + '<div class="jp-card-lower">' + '<div class="jp-card-shiny"></div>' + '<div class="jp-card-cvc jp-card-display">{{cvc}}</div>' + '<div class="jp-card-number jp-card-display">{{number}}</div>' + '<div class="jp-card-name jp-card-display">{{name}}</div>' + '<div class="jp-card-expiry jp-card-display" data-before="{{monthYear}}" data-after="{{validDate}}">{{expiry}}</div>' + '</div>' + '</div>' + '<div class="jp-card-back">' + '<div class="jp-card-bar"></div>' + '<div class="jp-card-cvc jp-card-display">{{cvc}}</div>' + '<div class="jp-card-shiny"></div>' + '</div>' + '</div>' + '</div>';
      Card.prototype.template = function (tpl, data) {
        return tpl.replace(/\{\{(.*?)\}\}/g, function (match, key, str) {
          return data[key]
        })
      };
      Card.prototype.cardTypes = [
        'jp-card-amex',
        'jp-card-dankort',
        'jp-card-dinersclub',
        'jp-card-discover',
        'jp-card-jcb',
        'jp-card-laser',
        'jp-card-maestro',
        'jp-card-mastercard',
        'jp-card-unionpay',
        'jp-card-visa',
        'jp-card-visaelectron',
        'jp-card-elo'
      ];
      Card.prototype.defaults = {
        formatting: true,
        formSelectors: {
          numberInput: 'input[name="number"]',
          expiryInput: 'input[name="expiry"]',
          cvcInput: 'input[name="cvc"]',
          nameInput: 'input[name="name"]'
        },
        cardSelectors: {
          cardContainer: '.jp-card-container',
          card: '.jp-card',
          numberDisplay: '.jp-card-number',
          expiryDisplay: '.jp-card-expiry',
          cvcDisplay: '.jp-card-cvc',
          nameDisplay: '.jp-card-name'
        },
        messages: {
          validDate: 'valid\nthru',
          monthYear: 'month/year'
        },
        placeholders: {
          number: '&bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull;',
          cvc: '&bull;&bull;&bull;',
          expiry: '&bull;&bull;/&bull;&bull;',
          name: 'Full Name'
        },
        classes: {
          valid: 'jp-card-valid',
          invalid: 'jp-card-invalid'
        },
        debug: false
      };
      function Card(opts) {
        this.options = extend(true, this.defaults, opts);
        if (!this.options.form) {
          console.log('Please provide a form');
          return
        }
        this.$el = QJ(this.options.form);
        if (!this.options.container) {
          console.log('Please provide a container');
          return
        }
        this.$container = QJ(this.options.container);
        this.render();
        this.attachHandlers();
        this.handleInitialPlaceholders()
      }
      Card.prototype.render = function () {
        var $cardContainer, baseWidth, name, obj, ref, ref1, selector, ua;
        QJ.append(this.$container, this.template(this.cardTemplate, extend({}, this.options.messages, this.options.placeholders)));
        ref = this.options.cardSelectors;
        for (name in ref) {
          selector = ref[name];
          this['$' + name] = QJ.find(this.$container, selector)
        }
        ref1 = this.options.formSelectors;
        for (name in ref1) {
          selector = ref1[name];
          selector = this.options[name] ? this.options[name] : selector;
          obj = QJ.find(this.$el, selector);
          if (!obj.length && this.options.debug) {
            console.error("Card can't find a " + name + ' in your form.')
          }
          this['$' + name] = obj
        }
        if (this.options.formatting) {
          Payment.formatCardNumber(this.$numberInput);
          Payment.formatCardCVC(this.$cvcInput);
          Payment.formatCardExpiry(this.$expiryInput)
        }
        if (this.options.width) {
          $cardContainer = QJ(this.options.cardSelectors.cardContainer)[0];
          baseWidth = parseInt($cardContainer.clientWidth);
          $cardContainer.style.transform = 'scale(' + this.options.width / baseWidth + ')'
        }
        if (typeof navigator !== 'undefined' && navigator !== null ? navigator.userAgent : void 0) {
          ua = navigator.userAgent.toLowerCase();
          if (ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1) {
            QJ.addClass(this.$card, 'jp-card-safari')
          }
        }
        if (/MSIE 10\./i.test(navigator.userAgent)) {
          QJ.addClass(this.$card, 'jp-card-ie-10')
        }
        if (/rv:11.0/i.test(navigator.userAgent)) {
          return QJ.addClass(this.$card, 'jp-card-ie-11')
        }
      };
      Card.prototype.attachHandlers = function () {
        var expiryFilters;
        bindVal(this.$numberInput, this.$numberDisplay, {
          fill: false,
          filters: this.validToggler('cardNumber')
        });
        QJ.on(this.$numberInput, 'payment.cardType', this.handle('setCardType'));
        expiryFilters = [function (val) {
            return val.replace(/(\s+)/g, '')
          }];
        expiryFilters.push(this.validToggler('cardExpiry'));
        bindVal(this.$expiryInput, this.$expiryDisplay, {
          join: function (text) {
            if (text[0].length === 2 || text[1]) {
              return '/'
            } else {
              return ''
            }
          },
          filters: expiryFilters
        });
        bindVal(this.$cvcInput, this.$cvcDisplay, { filters: this.validToggler('cardCVC') });
        QJ.on(this.$cvcInput, 'focus', this.handle('flipCard'));
        QJ.on(this.$cvcInput, 'blur', this.handle('unflipCard'));
        return bindVal(this.$nameInput, this.$nameDisplay, {
          fill: false,
          filters: this.validToggler('cardHolderName'),
          join: ' '
        })
      };
      Card.prototype.handleInitialPlaceholders = function () {
        var el, name, ref, results, selector;
        ref = this.options.formSelectors;
        results = [];
        for (name in ref) {
          selector = ref[name];
          el = this['$' + name];
          if (QJ.val(el)) {
            QJ.trigger(el, 'paste');
            results.push(setTimeout(function () {
              return QJ.trigger(el, 'keyup')
            }))
          } else {
            results.push(void 0)
          }
        }
        return results
      };
      Card.prototype.handle = function (fn) {
        return function (_this) {
          return function (e) {
            var args;
            args = Array.prototype.slice.call(arguments);
            args.unshift(e.target);
            return _this.handlers[fn].apply(_this, args)
          }
        }(this)
      };
      Card.prototype.validToggler = function (validatorName) {
        var isValid;
        if (validatorName === 'cardExpiry') {
          isValid = function (val) {
            var objVal;
            objVal = Payment.fns.cardExpiryVal(val);
            return Payment.fns.validateCardExpiry(objVal.month, objVal.year)
          }
        } else if (validatorName === 'cardCVC') {
          isValid = function (_this) {
            return function (val) {
              return Payment.fns.validateCardCVC(val, _this.cardType)
            }
          }(this)
        } else if (validatorName === 'cardNumber') {
          isValid = function (val) {
            return Payment.fns.validateCardNumber(val)
          }
        } else if (validatorName === 'cardHolderName') {
          isValid = function (val) {
            return val !== ''
          }
        }
        return function (_this) {
          return function (val, $in, $out) {
            var result;
            result = isValid(val);
            _this.toggleValidClass($in, result);
            _this.toggleValidClass($out, result);
            return val
          }
        }(this)
      };
      Card.prototype.toggleValidClass = function (el, test) {
        QJ.toggleClass(el, this.options.classes.valid, test);
        return QJ.toggleClass(el, this.options.classes.invalid, !test)
      };
      Card.prototype.handlers = {
        setCardType: function ($el, e) {
          var cardType;
          cardType = e.data;
          if (!QJ.hasClass(this.$card, cardType)) {
            QJ.removeClass(this.$card, 'jp-card-unknown');
            QJ.removeClass(this.$card, this.cardTypes.join(' '));
            QJ.addClass(this.$card, 'jp-card-' + cardType);
            QJ.toggleClass(this.$card, 'jp-card-identified', cardType !== 'unknown');
            return this.cardType = cardType
          }
        },
        flipCard: function () {
          return QJ.addClass(this.$card, 'jp-card-flipped')
        },
        unflipCard: function () {
          return QJ.removeClass(this.$card, 'jp-card-flipped')
        }
      };
      bindVal = function (el, out, opts) {
        var joiner, o, outDefaults;
        if (opts == null) {
          opts = {}
        }
        opts.fill = opts.fill || false;
        opts.filters = opts.filters || [];
        if (!(opts.filters instanceof Array)) {
          opts.filters = [opts.filters]
        }
        opts.join = opts.join || '';
        if (!(typeof opts.join === 'function')) {
          joiner = opts.join;
          opts.join = function () {
            return joiner
          }
        }
        outDefaults = function () {
          var j, len, results;
          results = [];
          for (j = 0, len = out.length; j < len; j++) {
            o = out[j];
            results.push(o.textContent)
          }
          return results
        }();
        QJ.on(el, 'focus', function () {
          return QJ.addClass(out, 'jp-card-focused')
        });
        QJ.on(el, 'blur', function () {
          return QJ.removeClass(out, 'jp-card-focused')
        });
        QJ.on(el, 'keyup change paste', function (e) {
          var elem, filter, i, j, join, k, len, len1, outEl, outVal, ref, results, val;
          val = function () {
            var j, len, results;
            results = [];
            for (j = 0, len = el.length; j < len; j++) {
              elem = el[j];
              results.push(QJ.val(elem))
            }
            return results
          }();
          join = opts.join(val);
          val = val.join(join);
          if (val === join) {
            val = ''
          }
          ref = opts.filters;
          for (j = 0, len = ref.length; j < len; j++) {
            filter = ref[j];
            val = filter(val, el, out)
          }
          results = [];
          for (i = k = 0, len1 = out.length; k < len1; i = ++k) {
            outEl = out[i];
            if (opts.fill) {
              outVal = val + outDefaults[i].substring(val.length)
            } else {
              outVal = val || outDefaults[i]
            }
            results.push(outEl.textContent = outVal)
          }
          return results
        });
        return el
      };
      return Card
    }();
    module.exports = Card;
    global.Card = Card
  });
  // source: node_modules/card/src/scss/card.scss
  require.define('card/src/scss/card', function (module, exports, __dirname, __filename) {
    module.exports = '.jp-card.jp-card-safari.jp-card-identified .jp-card-front:before, .jp-card.jp-card-safari.jp-card-identified .jp-card-back:before {\n  background-image: -webkit-linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%);\n  background-image: linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%); }\n\n.jp-card.jp-card-ie-10.jp-card-flipped, .jp-card.jp-card-ie-11.jp-card-flipped {\n  -webkit-transform: 0deg;\n  -moz-transform: 0deg;\n  -ms-transform: 0deg;\n  -o-transform: 0deg;\n  transform: 0deg; }\n  .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-front, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-front {\n    -webkit-transform: rotateY(0deg);\n    -moz-transform: rotateY(0deg);\n    -ms-transform: rotateY(0deg);\n    -o-transform: rotateY(0deg);\n    transform: rotateY(0deg); }\n  .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back {\n    -webkit-transform: rotateY(0deg);\n    -moz-transform: rotateY(0deg);\n    -ms-transform: rotateY(0deg);\n    -o-transform: rotateY(0deg);\n    transform: rotateY(0deg); }\n    .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back:after, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back:after {\n      left: 18%; }\n    .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back .jp-card-cvc, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back .jp-card-cvc {\n      -webkit-transform: rotateY(180deg);\n      -moz-transform: rotateY(180deg);\n      -ms-transform: rotateY(180deg);\n      -o-transform: rotateY(180deg);\n      transform: rotateY(180deg);\n      left: 5%; }\n    .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back .jp-card-shiny, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back .jp-card-shiny {\n      left: 84%; }\n      .jp-card.jp-card-ie-10.jp-card-flipped .jp-card-back .jp-card-shiny:after, .jp-card.jp-card-ie-11.jp-card-flipped .jp-card-back .jp-card-shiny:after {\n        left: -480%;\n        -webkit-transform: rotateY(180deg);\n        -moz-transform: rotateY(180deg);\n        -ms-transform: rotateY(180deg);\n        -o-transform: rotateY(180deg);\n        transform: rotateY(180deg); }\n\n.jp-card.jp-card-ie-10.jp-card-amex .jp-card-back, .jp-card.jp-card-ie-11.jp-card-amex .jp-card-back {\n  display: none; }\n\n.jp-card-logo {\n  height: 36px;\n  width: 60px;\n  font-style: italic; }\n  .jp-card-logo, .jp-card-logo:before, .jp-card-logo:after {\n    box-sizing: border-box; }\n\n.jp-card-logo.jp-card-amex {\n  text-transform: uppercase;\n  font-size: 4px;\n  font-weight: bold;\n  color: white;\n  border: 1px solid #EEE; }\n  .jp-card-logo.jp-card-amex:before, .jp-card-logo.jp-card-amex:after {\n    width: 28px;\n    display: block;\n    position: absolute;\n    left: 16px; }\n  .jp-card-logo.jp-card-amex:before {\n    height: 28px;\n    content: "american";\n    top: 3px;\n    text-align: left;\n    padding-left: 2px;\n    padding-top: 11px;\n    background: #267AC3; }\n  .jp-card-logo.jp-card-amex:after {\n    content: "express";\n    bottom: 11px;\n    text-align: right;\n    padding-right: 2px; }\n\n.jp-card.jp-card-amex.jp-card-flipped {\n  -webkit-transform: none;\n  -moz-transform: none;\n  -ms-transform: none;\n  -o-transform: none;\n  transform: none; }\n\n.jp-card.jp-card-amex.jp-card-identified .jp-card-front:before, .jp-card.jp-card-amex.jp-card-identified .jp-card-back:before {\n  background-color: #108168; }\n\n.jp-card.jp-card-amex.jp-card-identified .jp-card-front .jp-card-logo.jp-card-amex {\n  opacity: 1; }\n\n.jp-card.jp-card-amex.jp-card-identified .jp-card-front .jp-card-cvc {\n  visibility: visible; }\n\n.jp-card.jp-card-amex.jp-card-identified .jp-card-front:after {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-discover {\n  background: #FF6600;\n  color: #111;\n  text-transform: uppercase;\n  font-style: normal;\n  font-weight: bold;\n  font-size: 10px;\n  text-align: center;\n  overflow: hidden;\n  z-index: 1;\n  padding-top: 9px;\n  letter-spacing: .03em;\n  border: 1px solid #EEE; }\n  .jp-card-logo.jp-card-discover:before, .jp-card-logo.jp-card-discover:after {\n    content: " ";\n    display: block;\n    position: absolute; }\n  .jp-card-logo.jp-card-discover:before {\n    background: white;\n    width: 200px;\n    height: 200px;\n    border-radius: 200px;\n    bottom: -5%;\n    right: -80%;\n    z-index: -1; }\n  .jp-card-logo.jp-card-discover:after {\n    width: 8px;\n    height: 8px;\n    border-radius: 4px;\n    top: 10px;\n    left: 27px;\n    background-color: #FF6600;\n    background-image: -webkit-radial-gradient(#FF6600, #fff);\n    background-image: radial-gradient(  #FF6600, #fff);\n    content: "network";\n    font-size: 4px;\n    line-height: 24px;\n    text-indent: -7px; }\n\n.jp-card .jp-card-front .jp-card-logo.jp-card-discover {\n  right: 12%;\n  top: 18%; }\n\n.jp-card.jp-card-discover.jp-card-identified .jp-card-front:before, .jp-card.jp-card-discover.jp-card-identified .jp-card-back:before {\n  background-color: #86B8CF; }\n\n.jp-card.jp-card-discover.jp-card-identified .jp-card-logo.jp-card-discover {\n  opacity: 1; }\n\n.jp-card.jp-card-discover.jp-card-identified .jp-card-front:after {\n  -webkit-transition: 400ms;\n  -moz-transition: 400ms;\n  transition: 400ms;\n  content: " ";\n  display: block;\n  background-color: #FF6600;\n  background-image: -webkit-linear-gradient(#FF6600, #ffa366, #FF6600);\n  background-image: linear-gradient(#FF6600, #ffa366, #FF6600);\n  height: 50px;\n  width: 50px;\n  border-radius: 25px;\n  position: absolute;\n  left: 100%;\n  top: 15%;\n  margin-left: -25px;\n  box-shadow: inset 1px 1px 3px 1px rgba(0, 0, 0, 0.5); }\n\n.jp-card-logo.jp-card-visa {\n  background: white;\n  text-transform: uppercase;\n  color: #1A1876;\n  text-align: center;\n  font-weight: bold;\n  font-size: 15px;\n  line-height: 18px; }\n  .jp-card-logo.jp-card-visa:before, .jp-card-logo.jp-card-visa:after {\n    content: " ";\n    display: block;\n    width: 100%;\n    height: 25%; }\n  .jp-card-logo.jp-card-visa:before {\n    background: #1A1876; }\n  .jp-card-logo.jp-card-visa:after {\n    background: #E79800; }\n\n.jp-card.jp-card-visa.jp-card-identified .jp-card-front:before, .jp-card.jp-card-visa.jp-card-identified .jp-card-back:before {\n  background-color: #191278; }\n\n.jp-card.jp-card-visa.jp-card-identified .jp-card-logo.jp-card-visa {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-mastercard {\n  color: white;\n  font-weight: bold;\n  text-align: center;\n  font-size: 9px;\n  line-height: 36px;\n  z-index: 1;\n  text-shadow: 1px 1px rgba(0, 0, 0, 0.6); }\n  .jp-card-logo.jp-card-mastercard:before, .jp-card-logo.jp-card-mastercard:after {\n    content: " ";\n    display: block;\n    width: 36px;\n    top: 0;\n    position: absolute;\n    height: 36px;\n    border-radius: 18px; }\n  .jp-card-logo.jp-card-mastercard:before {\n    left: 0;\n    background: #FF0000;\n    z-index: -1; }\n  .jp-card-logo.jp-card-mastercard:after {\n    right: 0;\n    background: #FFAB00;\n    z-index: -2; }\n\n.jp-card.jp-card-mastercard.jp-card-identified .jp-card-front .jp-card-logo.jp-card-mastercard, .jp-card.jp-card-mastercard.jp-card-identified .jp-card-back .jp-card-logo.jp-card-mastercard {\n  box-shadow: none; }\n\n.jp-card.jp-card-mastercard.jp-card-identified .jp-card-front:before, .jp-card.jp-card-mastercard.jp-card-identified .jp-card-back:before {\n  background-color: #0061A8; }\n\n.jp-card.jp-card-mastercard.jp-card-identified .jp-card-logo.jp-card-mastercard {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-maestro {\n  color: white;\n  font-weight: bold;\n  text-align: center;\n  font-size: 14px;\n  line-height: 36px;\n  z-index: 1;\n  text-shadow: 1px 1px rgba(0, 0, 0, 0.6); }\n  .jp-card-logo.jp-card-maestro:before, .jp-card-logo.jp-card-maestro:after {\n    content: " ";\n    display: block;\n    width: 36px;\n    top: 0;\n    position: absolute;\n    height: 36px;\n    border-radius: 18px; }\n  .jp-card-logo.jp-card-maestro:before {\n    left: 0;\n    background: #0064CB;\n    z-index: -1; }\n  .jp-card-logo.jp-card-maestro:after {\n    right: 0;\n    background: #CC0000;\n    z-index: -2; }\n\n.jp-card.jp-card-maestro.jp-card-identified .jp-card-front .jp-card-logo.jp-card-maestro, .jp-card.jp-card-maestro.jp-card-identified .jp-card-back .jp-card-logo.jp-card-maestro {\n  box-shadow: none; }\n\n.jp-card.jp-card-maestro.jp-card-identified .jp-card-front:before, .jp-card.jp-card-maestro.jp-card-identified .jp-card-back:before {\n  background-color: #0B2C5F; }\n\n.jp-card.jp-card-maestro.jp-card-identified .jp-card-logo.jp-card-maestro {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-dankort {\n  width: 60px;\n  height: 36px;\n  padding: 3px;\n  border-radius: 8px;\n  border: #000000 1px solid;\n  background-color: #FFFFFF; }\n  .jp-card-logo.jp-card-dankort .dk {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    overflow: hidden; }\n    .jp-card-logo.jp-card-dankort .dk:before {\n      background-color: #ED1C24;\n      content: \'\';\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      display: block;\n      border-radius: 6px; }\n    .jp-card-logo.jp-card-dankort .dk:after {\n      content: \'\';\n      position: absolute;\n      top: 50%;\n      margin-top: -7.7px;\n      right: 0;\n      width: 0;\n      height: 0;\n      border-style: solid;\n      border-width: 7px 7px 10px 0;\n      border-color: transparent #ED1C24 transparent transparent;\n      z-index: 1; }\n  .jp-card-logo.jp-card-dankort .d, .jp-card-logo.jp-card-dankort .k {\n    position: absolute;\n    top: 50%;\n    width: 50%;\n    display: block;\n    height: 15.4px;\n    margin-top: -7.7px;\n    background: white; }\n  .jp-card-logo.jp-card-dankort .d {\n    left: 0;\n    border-radius: 0 8px 10px 0; }\n    .jp-card-logo.jp-card-dankort .d:before {\n      content: \'\';\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      display: block;\n      background: #ED1C24;\n      border-radius: 2px 4px 6px 0px;\n      height: 5px;\n      width: 7px;\n      margin: -3px 0 0 -4px; }\n  .jp-card-logo.jp-card-dankort .k {\n    right: 0; }\n    .jp-card-logo.jp-card-dankort .k:before, .jp-card-logo.jp-card-dankort .k:after {\n      content: \'\';\n      position: absolute;\n      right: 50%;\n      width: 0;\n      height: 0;\n      border-style: solid;\n      margin-right: -1px; }\n    .jp-card-logo.jp-card-dankort .k:before {\n      top: 0;\n      border-width: 8px 5px 0 0;\n      border-color: #ED1C24 transparent transparent transparent; }\n    .jp-card-logo.jp-card-dankort .k:after {\n      bottom: 0;\n      border-width: 0 5px 8px 0;\n      border-color: transparent transparent #ED1C24 transparent; }\n\n.jp-card.jp-card-dankort.jp-card-identified .jp-card-front:before, .jp-card.jp-card-dankort.jp-card-identified .jp-card-back:before {\n  background-color: #0055C7; }\n\n.jp-card.jp-card-dankort.jp-card-identified .jp-card-logo.jp-card-dankort {\n  opacity: 1; }\n\n.jp-card-logo.jp-card-elo {\n  height: 50px;\n  width: 50px;\n  border-radius: 100%;\n  background: black;\n  color: white;\n  text-align: center;\n  text-transform: lowercase;\n  font-size: 21px;\n  font-style: normal;\n  letter-spacing: 1px;\n  font-weight: bold;\n  padding-top: 13px; }\n  .jp-card-logo.jp-card-elo .e, .jp-card-logo.jp-card-elo .l, .jp-card-logo.jp-card-elo .o {\n    display: inline-block;\n    position: relative; }\n  .jp-card-logo.jp-card-elo .e {\n    -webkit-transform: rotate(-15deg);\n    -moz-transform: rotate(-15deg);\n    -ms-transform: rotate(-15deg);\n    -o-transform: rotate(-15deg);\n    transform: rotate(-15deg); }\n  .jp-card-logo.jp-card-elo .o {\n    position: relative;\n    display: inline-block;\n    width: 12px;\n    height: 12px;\n    right: 0;\n    top: 7px;\n    border-radius: 100%;\n    background-image: -webkit-linear-gradient(yellow 50%, red 50%);\n    background-image: linear-gradient(to   , red 50%);\n    -webkit-transform: rotate(40deg);\n    -moz-transform: rotate(40deg);\n    -ms-transform: rotate(40deg);\n    -o-transform: rotate(40deg);\n    transform: rotate(40deg);\n    text-indent: -9999px; }\n    .jp-card-logo.jp-card-elo .o:before {\n      content: "";\n      position: absolute;\n      width: 49%;\n      height: 49%;\n      background: black;\n      border-radius: 100%;\n      text-indent: -99999px;\n      top: 25%;\n      left: 25%; }\n\n.jp-card.jp-card-elo.jp-card-identified .jp-card-front:before, .jp-card.jp-card-elo.jp-card-identified .jp-card-back:before {\n  background-color: #6F6969; }\n\n.jp-card.jp-card-elo.jp-card-identified .jp-card-logo.jp-card-elo {\n  opacity: 1; }\n\n.jp-card-container {\n  -webkit-perspective: 1000px;\n  -moz-perspective: 1000px;\n  perspective: 1000px;\n  width: 350px;\n  max-width: 100%;\n  height: 200px;\n  margin: auto;\n  z-index: 1;\n  position: relative; }\n\n.jp-card {\n  font-family: "Helvetica Neue";\n  line-height: 1;\n  position: relative;\n  width: 100%;\n  height: 100%;\n  min-width: 315px;\n  border-radius: 10px;\n  -webkit-transform-style: preserve-3d;\n  -moz-transform-style: preserve-3d;\n  -ms-transform-style: preserve-3d;\n  -o-transform-style: preserve-3d;\n  transform-style: preserve-3d;\n  -webkit-transition: all 400ms linear;\n  -moz-transition: all 400ms linear;\n  transition: all 400ms linear; }\n  .jp-card > *, .jp-card > *:before, .jp-card > *:after {\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    font-family: inherit; }\n  .jp-card.jp-card-flipped {\n    -webkit-transform: rotateY(180deg);\n    -moz-transform: rotateY(180deg);\n    -ms-transform: rotateY(180deg);\n    -o-transform: rotateY(180deg);\n    transform: rotateY(180deg); }\n  .jp-card .jp-card-front, .jp-card .jp-card-back {\n    -webkit-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-transform-style: preserve-3d;\n    -moz-transform-style: preserve-3d;\n    -ms-transform-style: preserve-3d;\n    -o-transform-style: preserve-3d;\n    transform-style: preserve-3d;\n    -webkit-transition: all 400ms linear;\n    -moz-transition: all 400ms linear;\n    transition: all 400ms linear;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    top: 0;\n    left: 0;\n    overflow: hidden;\n    border-radius: 10px;\n    background: #DDD; }\n    .jp-card .jp-card-front:before, .jp-card .jp-card-back:before {\n      content: " ";\n      display: block;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      border-radius: 10px;\n      -webkit-transition: all 400ms ease;\n      -moz-transition: all 400ms ease;\n      transition: all 400ms ease; }\n    .jp-card .jp-card-front:after, .jp-card .jp-card-back:after {\n      content: " ";\n      display: block; }\n    .jp-card .jp-card-front .jp-card-display, .jp-card .jp-card-back .jp-card-display {\n      color: white;\n      font-weight: normal;\n      opacity: 0.5;\n      -webkit-transition: opacity 400ms linear;\n      -moz-transition: opacity 400ms linear;\n      transition: opacity 400ms linear; }\n      .jp-card .jp-card-front .jp-card-display.jp-card-focused, .jp-card .jp-card-back .jp-card-display.jp-card-focused {\n        opacity: 1;\n        font-weight: 700; }\n    .jp-card .jp-card-front .jp-card-cvc, .jp-card .jp-card-back .jp-card-cvc {\n      font-family: "Bitstream Vera Sans Mono", Consolas, Courier, monospace;\n      font-size: 14px; }\n    .jp-card .jp-card-front .jp-card-shiny, .jp-card .jp-card-back .jp-card-shiny {\n      width: 50px;\n      height: 35px;\n      border-radius: 5px;\n      background: #CCC;\n      position: relative; }\n      .jp-card .jp-card-front .jp-card-shiny:before, .jp-card .jp-card-back .jp-card-shiny:before {\n        content: " ";\n        display: block;\n        width: 70%;\n        height: 60%;\n        border-top-right-radius: 5px;\n        border-bottom-right-radius: 5px;\n        background: #d9d9d9;\n        position: absolute;\n        top: 20%; }\n  .jp-card .jp-card-front .jp-card-logo {\n    position: absolute;\n    opacity: 0;\n    right: 5%;\n    top: 8%;\n    -webkit-transition: 400ms;\n    -moz-transition: 400ms;\n    transition: 400ms; }\n  .jp-card .jp-card-front .jp-card-lower {\n    width: 80%;\n    position: absolute;\n    left: 10%;\n    bottom: 30px; }\n    @media only screen and (max-width: 480px) {\n      .jp-card .jp-card-front .jp-card-lower {\n        width: 90%;\n        left: 5%; } }\n    .jp-card .jp-card-front .jp-card-lower .jp-card-cvc {\n      visibility: hidden;\n      float: right;\n      position: relative;\n      bottom: 5px; }\n    .jp-card .jp-card-front .jp-card-lower .jp-card-number {\n      font-family: "Bitstream Vera Sans Mono", Consolas, Courier, monospace;\n      font-size: 24px;\n      clear: both;\n      margin-bottom: 30px; }\n    .jp-card .jp-card-front .jp-card-lower .jp-card-expiry {\n      font-family: "Bitstream Vera Sans Mono", Consolas, Courier, monospace;\n      letter-spacing: 0em;\n      position: relative;\n      float: right;\n      width: 25%; }\n      .jp-card .jp-card-front .jp-card-lower .jp-card-expiry:before, .jp-card .jp-card-front .jp-card-lower .jp-card-expiry:after {\n        font-family: "Helvetica Neue";\n        font-weight: bold;\n        font-size: 7px;\n        white-space: pre;\n        display: block;\n        opacity: .5; }\n      .jp-card .jp-card-front .jp-card-lower .jp-card-expiry:before {\n        content: attr(data-before);\n        margin-bottom: 2px;\n        font-size: 7px;\n        text-transform: uppercase; }\n      .jp-card .jp-card-front .jp-card-lower .jp-card-expiry:after {\n        position: absolute;\n        content: attr(data-after);\n        text-align: right;\n        right: 100%;\n        margin-right: 5px;\n        margin-top: 2px;\n        bottom: 0; }\n    .jp-card .jp-card-front .jp-card-lower .jp-card-name {\n      text-transform: uppercase;\n      font-family: "Bitstream Vera Sans Mono", Consolas, Courier, monospace;\n      font-size: 20px;\n      max-height: 45px;\n      position: absolute;\n      bottom: 0;\n      width: 190px;\n      display: -webkit-box;\n      -webkit-line-clamp: 2;\n      -webkit-box-orient: horizontal;\n      overflow: hidden;\n      text-overflow: ellipsis; }\n  .jp-card .jp-card-back {\n    -webkit-transform: rotateY(180deg);\n    -moz-transform: rotateY(180deg);\n    -ms-transform: rotateY(180deg);\n    -o-transform: rotateY(180deg);\n    transform: rotateY(180deg); }\n    .jp-card .jp-card-back .jp-card-bar {\n      background-color: #444;\n      background-image: -webkit-linear-gradient(#444, #333);\n      background-image: linear-gradient(#444, #333);\n      width: 100%;\n      height: 20%;\n      position: absolute;\n      top: 10%; }\n    .jp-card .jp-card-back:after {\n      content: " ";\n      display: block;\n      background-color: #FFF;\n      background-image: -webkit-linear-gradient(#FFF, #FFF);\n      background-image: linear-gradient(#FFF, #FFF);\n      width: 80%;\n      height: 16%;\n      position: absolute;\n      top: 40%;\n      left: 2%; }\n    .jp-card .jp-card-back .jp-card-cvc {\n      position: absolute;\n      top: 40%;\n      left: 85%;\n      -webkit-transition-delay: 600ms;\n      -moz-transition-delay: 600ms;\n      transition-delay: 600ms; }\n    .jp-card .jp-card-back .jp-card-shiny {\n      position: absolute;\n      top: 66%;\n      left: 2%; }\n      .jp-card .jp-card-back .jp-card-shiny:after {\n        content: "This card has been issued by Jesse Pollak and is licensed for anyone to use anywhere for free.\\AIt comes with no warranty.\\A For support issues, please visit: github.com/jessepollak/card.";\n        position: absolute;\n        left: 120%;\n        top: 5%;\n        color: white;\n        font-size: 7px;\n        width: 230px;\n        opacity: .5; }\n  .jp-card.jp-card-identified {\n    box-shadow: 0 0 20px rgba(0, 0, 0, 0.3); }\n    .jp-card.jp-card-identified .jp-card-front, .jp-card.jp-card-identified .jp-card-back {\n      background-color: #000;\n      background-color: rgba(0, 0, 0, 0.5); }\n      .jp-card.jp-card-identified .jp-card-front:before, .jp-card.jp-card-identified .jp-card-back:before {\n        -webkit-transition: all 400ms ease;\n        -moz-transition: all 400ms ease;\n        transition: all 400ms ease;\n        background-image: -webkit-linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%);\n        background-image: linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%);\n        opacity: 1; }\n      .jp-card.jp-card-identified .jp-card-front .jp-card-logo, .jp-card.jp-card-identified .jp-card-back .jp-card-logo {\n        box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.3); }\n    .jp-card.jp-card-identified.no-radial-gradient .jp-card-front:before, .jp-card.jp-card-identified.no-radial-gradient .jp-card-back:before {\n      background-image: -webkit-linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%);\n      background-image: linear-gradient(-25deg, rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.2) 70%, rgba(255, 255, 255, 0) 90%); }\n'
  });
  // source: node_modules/qj/lib/qj.js
  require.define('qj/lib/qj', function (module, exports, __dirname, __filename) {
    !function (e) {
      if ('object' == typeof exports && 'undefined' != typeof module)
        module.exports = e();
      else if ('function' == typeof define && define.amd)
        define([], e);
      else {
        var f;
        'undefined' != typeof window ? f = window : 'undefined' != typeof global ? f = global : 'undefined' != typeof self && (f = self), (f.qj || (f.qj = {})).js = e()
      }
    }(function () {
      var define, module, exports;
      return function e(t, n, r) {
        function s(o, u) {
          if (!n[o]) {
            if (!t[o]) {
              var a = typeof require == 'function' && require;
              if (!u && a)
                return a(o, !0);
              if (i)
                return i(o, !0);
              throw new Error("Cannot find module '" + o + "'")
            }
            var f = n[o] = { exports: {} };
            t[o][0].call(f.exports, function (e) {
              var n = t[o][1][e];
              return s(n ? n : e)
            }, f, f.exports, e, t, n, r)
          }
          return n[o].exports
        }
        var i = typeof require == 'function' && require;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s
      }({
        1: [
          function (_dereq_, module, exports) {
            var QJ, rreturn, rtrim;
            QJ = function (selector) {
              if (QJ.isDOMElement(selector)) {
                return selector
              }
              return document.querySelectorAll(selector)
            };
            QJ.isDOMElement = function (el) {
              return el && el.nodeName != null
            };
            rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
            QJ.trim = function (text) {
              if (text === null) {
                return ''
              } else {
                return (text + '').replace(rtrim, '')
              }
            };
            rreturn = /\r/g;
            QJ.val = function (el, val) {
              var ret;
              if (arguments.length > 1) {
                return el.value = val
              } else {
                ret = el.value;
                if (typeof ret === 'string') {
                  return ret.replace(rreturn, '')
                } else {
                  if (ret === null) {
                    return ''
                  } else {
                    return ret
                  }
                }
              }
            };
            QJ.preventDefault = function (eventObject) {
              if (typeof eventObject.preventDefault === 'function') {
                eventObject.preventDefault();
                return
              }
              eventObject.returnValue = false;
              return false
            };
            QJ.normalizeEvent = function (e) {
              var original;
              original = e;
              e = {
                which: original.which != null ? original.which : void 0,
                target: original.target || original.srcElement,
                preventDefault: function () {
                  return QJ.preventDefault(original)
                },
                originalEvent: original,
                data: original.data || original.detail
              };
              if (e.which == null) {
                e.which = original.charCode != null ? original.charCode : original.keyCode
              }
              return e
            };
            QJ.on = function (element, eventName, callback) {
              var el, multEventName, originalCallback, _i, _j, _len, _len1, _ref;
              if (element.length) {
                for (_i = 0, _len = element.length; _i < _len; _i++) {
                  el = element[_i];
                  QJ.on(el, eventName, callback)
                }
                return
              }
              if (eventName.match(' ')) {
                _ref = eventName.split(' ');
                for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                  multEventName = _ref[_j];
                  QJ.on(element, multEventName, callback)
                }
                return
              }
              originalCallback = callback;
              callback = function (e) {
                e = QJ.normalizeEvent(e);
                return originalCallback(e)
              };
              if (element.addEventListener) {
                return element.addEventListener(eventName, callback, false)
              }
              if (element.attachEvent) {
                eventName = 'on' + eventName;
                return element.attachEvent(eventName, callback)
              }
              element['on' + eventName] = callback
            };
            QJ.addClass = function (el, className) {
              var e;
              if (el.length) {
                return function () {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = el.length; _i < _len; _i++) {
                    e = el[_i];
                    _results.push(QJ.addClass(e, className))
                  }
                  return _results
                }()
              }
              if (el.classList) {
                return el.classList.add(className)
              } else {
                return el.className += ' ' + className
              }
            };
            QJ.hasClass = function (el, className) {
              var e, hasClass, _i, _len;
              if (el.length) {
                hasClass = true;
                for (_i = 0, _len = el.length; _i < _len; _i++) {
                  e = el[_i];
                  hasClass = hasClass && QJ.hasClass(e, className)
                }
                return hasClass
              }
              if (el.classList) {
                return el.classList.contains(className)
              } else {
                return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className)
              }
            };
            QJ.removeClass = function (el, className) {
              var cls, e, _i, _len, _ref, _results;
              if (el.length) {
                return function () {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = el.length; _i < _len; _i++) {
                    e = el[_i];
                    _results.push(QJ.removeClass(e, className))
                  }
                  return _results
                }()
              }
              if (el.classList) {
                _ref = className.split(' ');
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  cls = _ref[_i];
                  _results.push(el.classList.remove(cls))
                }
                return _results
              } else {
                return el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ')
              }
            };
            QJ.toggleClass = function (el, className, bool) {
              var e;
              if (el.length) {
                return function () {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = el.length; _i < _len; _i++) {
                    e = el[_i];
                    _results.push(QJ.toggleClass(e, className, bool))
                  }
                  return _results
                }()
              }
              if (bool) {
                if (!QJ.hasClass(el, className)) {
                  return QJ.addClass(el, className)
                }
              } else {
                return QJ.removeClass(el, className)
              }
            };
            QJ.append = function (el, toAppend) {
              var e;
              if (el.length) {
                return function () {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = el.length; _i < _len; _i++) {
                    e = el[_i];
                    _results.push(QJ.append(e, toAppend))
                  }
                  return _results
                }()
              }
              return el.insertAdjacentHTML('beforeend', toAppend)
            };
            QJ.find = function (el, selector) {
              if (el instanceof NodeList || el instanceof Array) {
                el = el[0]
              }
              return el.querySelectorAll(selector)
            };
            QJ.trigger = function (el, name, data) {
              var e, ev;
              try {
                ev = new CustomEvent(name, { detail: data })
              } catch (_error) {
                e = _error;
                ev = document.createEvent('CustomEvent');
                if (ev.initCustomEvent) {
                  ev.initCustomEvent(name, true, true, data)
                } else {
                  ev.initEvent(name, true, true, data)
                }
              }
              return el.dispatchEvent(ev)
            };
            module.exports = QJ
          },
          {}
        ]
      }, {}, [1])(1)
    })
  });
  // source: node_modules/payment/lib/payment.js
  require.define('payment/lib/payment', function (module, exports, __dirname, __filename) {
    (function (f) {
      if (typeof exports === 'object' && typeof module !== 'undefined') {
        module.exports = f()
      } else if (typeof define === 'function' && define.amd) {
        define([], f)
      } else {
        var g;
        if (typeof window !== 'undefined') {
          g = window
        } else if (typeof global !== 'undefined') {
          g = global
        } else if (typeof self !== 'undefined') {
          g = self
        } else {
          g = this
        }
        (g.payment || (g.payment = {})).js = f()
      }
    }(function () {
      var define, module, exports;
      return function e(t, n, r) {
        function s(o, u) {
          if (!n[o]) {
            if (!t[o]) {
              var a = typeof require == 'function' && require;
              if (!u && a)
                return a(o, !0);
              if (i)
                return i(o, !0);
              var f = new Error("Cannot find module '" + o + "'");
              throw f.code = 'MODULE_NOT_FOUND', f
            }
            var l = n[o] = { exports: {} };
            t[o][0].call(l.exports, function (e) {
              var n = t[o][1][e];
              return s(n ? n : e)
            }, l, l.exports, e, t, n, r)
          }
          return n[o].exports
        }
        var i = typeof require == 'function' && require;
        for (var o = 0; o < r.length; o++)
          s(r[o]);
        return s
      }({
        1: [
          function (require, module, exports) {
            var QJ, rreturn, rtrim;
            QJ = function (selector) {
              if (QJ.isDOMElement(selector)) {
                return selector
              }
              return document.querySelectorAll(selector)
            };
            QJ.isDOMElement = function (el) {
              return el && el.nodeName != null
            };
            rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
            QJ.trim = function (text) {
              if (text === null) {
                return ''
              } else {
                return (text + '').replace(rtrim, '')
              }
            };
            rreturn = /\r/g;
            QJ.val = function (el, val) {
              var ret;
              if (arguments.length > 1) {
                return el.value = val
              } else {
                ret = el.value;
                if (typeof ret === 'string') {
                  return ret.replace(rreturn, '')
                } else {
                  if (ret === null) {
                    return ''
                  } else {
                    return ret
                  }
                }
              }
            };
            QJ.preventDefault = function (eventObject) {
              if (typeof eventObject.preventDefault === 'function') {
                eventObject.preventDefault();
                return
              }
              eventObject.returnValue = false;
              return false
            };
            QJ.normalizeEvent = function (e) {
              var original;
              original = e;
              e = {
                which: original.which != null ? original.which : void 0,
                target: original.target || original.srcElement,
                preventDefault: function () {
                  return QJ.preventDefault(original)
                },
                originalEvent: original,
                data: original.data || original.detail
              };
              if (e.which == null) {
                e.which = original.charCode != null ? original.charCode : original.keyCode
              }
              return e
            };
            QJ.on = function (element, eventName, callback) {
              var el, i, j, len, len1, multEventName, originalCallback, ref;
              if (element.length) {
                for (i = 0, len = element.length; i < len; i++) {
                  el = element[i];
                  QJ.on(el, eventName, callback)
                }
                return
              }
              if (eventName.match(' ')) {
                ref = eventName.split(' ');
                for (j = 0, len1 = ref.length; j < len1; j++) {
                  multEventName = ref[j];
                  QJ.on(element, multEventName, callback)
                }
                return
              }
              originalCallback = callback;
              callback = function (e) {
                e = QJ.normalizeEvent(e);
                return originalCallback(e)
              };
              if (element.addEventListener) {
                return element.addEventListener(eventName, callback, false)
              }
              if (element.attachEvent) {
                eventName = 'on' + eventName;
                return element.attachEvent(eventName, callback)
              }
              element['on' + eventName] = callback
            };
            QJ.addClass = function (el, className) {
              var e;
              if (el.length) {
                return function () {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = el.length; i < len; i++) {
                    e = el[i];
                    results.push(QJ.addClass(e, className))
                  }
                  return results
                }()
              }
              if (el.classList) {
                return el.classList.add(className)
              } else {
                return el.className += ' ' + className
              }
            };
            QJ.hasClass = function (el, className) {
              var e, hasClass, i, len;
              if (el.length) {
                hasClass = true;
                for (i = 0, len = el.length; i < len; i++) {
                  e = el[i];
                  hasClass = hasClass && QJ.hasClass(e, className)
                }
                return hasClass
              }
              if (el.classList) {
                return el.classList.contains(className)
              } else {
                return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className)
              }
            };
            QJ.removeClass = function (el, className) {
              var cls, e, i, len, ref, results;
              if (el.length) {
                return function () {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = el.length; i < len; i++) {
                    e = el[i];
                    results.push(QJ.removeClass(e, className))
                  }
                  return results
                }()
              }
              if (el.classList) {
                ref = className.split(' ');
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  cls = ref[i];
                  results.push(el.classList.remove(cls))
                }
                return results
              } else {
                return el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ')
              }
            };
            QJ.toggleClass = function (el, className, bool) {
              var e;
              if (el.length) {
                return function () {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = el.length; i < len; i++) {
                    e = el[i];
                    results.push(QJ.toggleClass(e, className, bool))
                  }
                  return results
                }()
              }
              if (bool) {
                if (!QJ.hasClass(el, className)) {
                  return QJ.addClass(el, className)
                }
              } else {
                return QJ.removeClass(el, className)
              }
            };
            QJ.append = function (el, toAppend) {
              var e;
              if (el.length) {
                return function () {
                  var i, len, results;
                  results = [];
                  for (i = 0, len = el.length; i < len; i++) {
                    e = el[i];
                    results.push(QJ.append(e, toAppend))
                  }
                  return results
                }()
              }
              return el.insertAdjacentHTML('beforeend', toAppend)
            };
            QJ.find = function (el, selector) {
              if (el instanceof NodeList || el instanceof Array) {
                el = el[0]
              }
              return el.querySelectorAll(selector)
            };
            QJ.trigger = function (el, name, data) {
              var e, error, ev;
              try {
                ev = new CustomEvent(name, { detail: data })
              } catch (error) {
                e = error;
                ev = document.createEvent('CustomEvent');
                if (ev.initCustomEvent) {
                  ev.initCustomEvent(name, true, true, data)
                } else {
                  ev.initEvent(name, true, true, data)
                }
              }
              return el.dispatchEvent(ev)
            };
            module.exports = QJ
          },
          {}
        ],
        2: [
          function (require, module, exports) {
            (function (global) {
              var Payment, QJ, cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlash, formatMonthExpiry, hasTextSelected, luhnCheck, reFormatCardNumber, restrictCVC, restrictCardNumber, restrictCombinedExpiry, restrictExpiry, restrictMonthExpiry, restrictNumeric, restrictYearExpiry, setCardType, indexOf = [].indexOf || function (item) {
                  for (var i = 0, l = this.length; i < l; i++) {
                    if (i in this && this[i] === item)
                      return i
                  }
                  return -1
                };
              QJ = require('payment/node_modules/qj/src/qj');
              defaultFormat = /(\d{1,4})/g;
              cards = [
                {
                  type: 'amex',
                  pattern: /^3[47]/,
                  format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
                  length: [15],
                  cvcLength: [4],
                  luhn: true
                },
                {
                  type: 'dankort',
                  pattern: /^5019/,
                  format: defaultFormat,
                  length: [16],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'dinersclub',
                  pattern: /^(36|38|30[0-5])/,
                  format: defaultFormat,
                  length: [14],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'discover',
                  pattern: /^(6011|65|64[4-9]|622)/,
                  format: defaultFormat,
                  length: [16],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'jcb',
                  pattern: /^35/,
                  format: defaultFormat,
                  length: [16],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'laser',
                  pattern: /^(6706|6771|6709)/,
                  format: defaultFormat,
                  length: [
                    16,
                    17,
                    18,
                    19
                  ],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'maestro',
                  pattern: /^(5018|5020|5038|6304|6703|6759|676[1-3])/,
                  format: defaultFormat,
                  length: [
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19
                  ],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'mastercard',
                  pattern: /^5[1-5]/,
                  format: defaultFormat,
                  length: [16],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'unionpay',
                  pattern: /^62/,
                  format: defaultFormat,
                  length: [
                    16,
                    17,
                    18,
                    19
                  ],
                  cvcLength: [3],
                  luhn: false
                },
                {
                  type: 'visaelectron',
                  pattern: /^4(026|17500|405|508|844|91[37])/,
                  format: defaultFormat,
                  length: [16],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'visa',
                  pattern: /^4/,
                  format: defaultFormat,
                  length: [
                    13,
                    16
                  ],
                  cvcLength: [3],
                  luhn: true
                },
                {
                  type: 'elo',
                  pattern: /^4011|438935|45(1416|76)|50(4175|6699|67|90[4-7])|63(6297|6368)/,
                  format: defaultFormat,
                  length: [16],
                  cvcLength: [3],
                  luhn: true
                }
              ];
              cardFromNumber = function (num) {
                var card, i, len;
                num = (num + '').replace(/\D/g, '');
                for (i = 0, len = cards.length; i < len; i++) {
                  card = cards[i];
                  if (card.pattern.test(num)) {
                    return card
                  }
                }
              };
              cardFromType = function (type) {
                var card, i, len;
                for (i = 0, len = cards.length; i < len; i++) {
                  card = cards[i];
                  if (card.type === type) {
                    return card
                  }
                }
              };
              luhnCheck = function (num) {
                var digit, digits, i, len, odd, sum;
                odd = true;
                sum = 0;
                digits = (num + '').split('').reverse();
                for (i = 0, len = digits.length; i < len; i++) {
                  digit = digits[i];
                  digit = parseInt(digit, 10);
                  if (odd = !odd) {
                    digit *= 2
                  }
                  if (digit > 9) {
                    digit -= 9
                  }
                  sum += digit
                }
                return sum % 10 === 0
              };
              hasTextSelected = function (target) {
                var ref;
                if (target.selectionStart != null && target.selectionStart !== target.selectionEnd) {
                  return true
                }
                if ((typeof document !== 'undefined' && document !== null ? (ref = document.selection) != null ? ref.createRange : void 0 : void 0) != null) {
                  if (document.selection.createRange().text) {
                    return true
                  }
                }
                return false
              };
              reFormatCardNumber = function (e) {
                return setTimeout(function (_this) {
                  return function () {
                    var target, value;
                    target = e.target;
                    value = QJ.val(target);
                    value = Payment.fns.formatCardNumber(value);
                    return QJ.val(target, value)
                  }
                }(this))
              };
              formatCardNumber = function (e) {
                var card, digit, length, re, target, upperLength, value;
                digit = String.fromCharCode(e.which);
                if (!/^\d+$/.test(digit)) {
                  return
                }
                target = e.target;
                value = QJ.val(target);
                card = cardFromNumber(value + digit);
                length = (value.replace(/\D/g, '') + digit).length;
                upperLength = 16;
                if (card) {
                  upperLength = card.length[card.length.length - 1]
                }
                if (length >= upperLength) {
                  return
                }
                if (target.selectionStart != null && target.selectionStart !== value.length) {
                  return
                }
                if (card && card.type === 'amex') {
                  re = /^(\d{4}|\d{4}\s\d{6})$/
                } else {
                  re = /(?:^|\s)(\d{4})$/
                }
                if (re.test(value)) {
                  e.preventDefault();
                  return QJ.val(target, value + ' ' + digit)
                } else if (re.test(value + digit)) {
                  e.preventDefault();
                  return QJ.val(target, value + digit + ' ')
                }
              };
              formatBackCardNumber = function (e) {
                var target, value;
                target = e.target;
                value = QJ.val(target);
                if (e.meta) {
                  return
                }
                if (e.which !== 8) {
                  return
                }
                if (target.selectionStart != null && target.selectionStart !== value.length) {
                  return
                }
                if (/\d\s$/.test(value)) {
                  e.preventDefault();
                  return QJ.val(target, value.replace(/\d\s$/, ''))
                } else if (/\s\d?$/.test(value)) {
                  e.preventDefault();
                  return QJ.val(target, value.replace(/\s\d?$/, ''))
                }
              };
              formatExpiry = function (e) {
                var digit, target, val;
                digit = String.fromCharCode(e.which);
                if (!/^\d+$/.test(digit)) {
                  return
                }
                target = e.target;
                val = QJ.val(target) + digit;
                if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
                  e.preventDefault();
                  return QJ.val(target, '0' + val + ' / ')
                } else if (/^\d\d$/.test(val)) {
                  e.preventDefault();
                  return QJ.val(target, val + ' / ')
                }
              };
              formatMonthExpiry = function (e) {
                var digit, target, val;
                digit = String.fromCharCode(e.which);
                if (!/^\d+$/.test(digit)) {
                  return
                }
                target = e.target;
                val = QJ.val(target) + digit;
                if (/^\d$/.test(val) && (val !== '0' && val !== '1')) {
                  e.preventDefault();
                  return QJ.val(target, '0' + val)
                } else if (/^\d\d$/.test(val)) {
                  e.preventDefault();
                  return QJ.val(target, '' + val)
                }
              };
              formatForwardExpiry = function (e) {
                var digit, target, val;
                digit = String.fromCharCode(e.which);
                if (!/^\d+$/.test(digit)) {
                  return
                }
                target = e.target;
                val = QJ.val(target);
                if (/^\d\d$/.test(val)) {
                  return QJ.val(target, val + ' / ')
                }
              };
              formatForwardSlash = function (e) {
                var slash, target, val;
                slash = String.fromCharCode(e.which);
                if (slash !== '/') {
                  return
                }
                target = e.target;
                val = QJ.val(target);
                if (/^\d$/.test(val) && val !== '0') {
                  return QJ.val(target, '0' + val + ' / ')
                }
              };
              formatBackExpiry = function (e) {
                var target, value;
                if (e.metaKey) {
                  return
                }
                target = e.target;
                value = QJ.val(target);
                if (e.which !== 8) {
                  return
                }
                if (target.selectionStart != null && target.selectionStart !== value.length) {
                  return
                }
                if (/\d(\s|\/)+$/.test(value)) {
                  e.preventDefault();
                  return QJ.val(target, value.replace(/\d(\s|\/)*$/, ''))
                } else if (/\s\/\s?\d?$/.test(value)) {
                  e.preventDefault();
                  return QJ.val(target, value.replace(/\s\/\s?\d?$/, ''))
                }
              };
              restrictNumeric = function (e) {
                var input;
                if (e.metaKey || e.ctrlKey) {
                  return true
                }
                if (e.which === 32) {
                  return e.preventDefault()
                }
                if (e.which === 0) {
                  return true
                }
                if (e.which < 33) {
                  return true
                }
                input = String.fromCharCode(e.which);
                if (!/[\d\s]/.test(input)) {
                  return e.preventDefault()
                }
              };
              restrictCardNumber = function (e) {
                var card, digit, target, value;
                target = e.target;
                digit = String.fromCharCode(e.which);
                if (!/^\d+$/.test(digit)) {
                  return
                }
                if (hasTextSelected(target)) {
                  return
                }
                value = (QJ.val(target) + digit).replace(/\D/g, '');
                card = cardFromNumber(value);
                if (card) {
                  if (!(value.length <= card.length[card.length.length - 1])) {
                    return e.preventDefault()
                  }
                } else {
                  if (!(value.length <= 16)) {
                    return e.preventDefault()
                  }
                }
              };
              restrictExpiry = function (e, length) {
                var digit, target, value;
                target = e.target;
                digit = String.fromCharCode(e.which);
                if (!/^\d+$/.test(digit)) {
                  return
                }
                if (hasTextSelected(target)) {
                  return
                }
                value = QJ.val(target) + digit;
                value = value.replace(/\D/g, '');
                if (value.length > length) {
                  return e.preventDefault()
                }
              };
              restrictCombinedExpiry = function (e) {
                return restrictExpiry(e, 6)
              };
              restrictMonthExpiry = function (e) {
                return restrictExpiry(e, 2)
              };
              restrictYearExpiry = function (e) {
                return restrictExpiry(e, 4)
              };
              restrictCVC = function (e) {
                var digit, target, val;
                target = e.target;
                digit = String.fromCharCode(e.which);
                if (!/^\d+$/.test(digit)) {
                  return
                }
                if (hasTextSelected(target)) {
                  return
                }
                val = QJ.val(target) + digit;
                if (!(val.length <= 4)) {
                  return e.preventDefault()
                }
              };
              setCardType = function (e) {
                var allTypes, card, cardType, target, val;
                target = e.target;
                val = QJ.val(target);
                cardType = Payment.fns.cardType(val) || 'unknown';
                if (!QJ.hasClass(target, cardType)) {
                  allTypes = function () {
                    var i, len, results;
                    results = [];
                    for (i = 0, len = cards.length; i < len; i++) {
                      card = cards[i];
                      results.push(card.type)
                    }
                    return results
                  }();
                  QJ.removeClass(target, 'unknown');
                  QJ.removeClass(target, allTypes.join(' '));
                  QJ.addClass(target, cardType);
                  QJ.toggleClass(target, 'identified', cardType !== 'unknown');
                  return QJ.trigger(target, 'payment.cardType', cardType)
                }
              };
              Payment = function () {
                function Payment() {
                }
                Payment.fns = {
                  cardExpiryVal: function (value) {
                    var month, prefix, ref, year;
                    value = value.replace(/\s/g, '');
                    ref = value.split('/', 2), month = ref[0], year = ref[1];
                    if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) {
                      prefix = new Date().getFullYear();
                      prefix = prefix.toString().slice(0, 2);
                      year = prefix + year
                    }
                    month = parseInt(month, 10);
                    year = parseInt(year, 10);
                    return {
                      month: month,
                      year: year
                    }
                  },
                  validateCardNumber: function (num) {
                    var card, ref;
                    num = (num + '').replace(/\s+|-/g, '');
                    if (!/^\d+$/.test(num)) {
                      return false
                    }
                    card = cardFromNumber(num);
                    if (!card) {
                      return false
                    }
                    return (ref = num.length, indexOf.call(card.length, ref) >= 0) && (card.luhn === false || luhnCheck(num))
                  },
                  validateCardExpiry: function (month, year) {
                    var currentTime, expiry, prefix, ref;
                    if (typeof month === 'object' && 'month' in month) {
                      ref = month, month = ref.month, year = ref.year
                    }
                    if (!(month && year)) {
                      return false
                    }
                    month = QJ.trim(month);
                    year = QJ.trim(year);
                    if (!/^\d+$/.test(month)) {
                      return false
                    }
                    if (!/^\d+$/.test(year)) {
                      return false
                    }
                    if (!(parseInt(month, 10) <= 12)) {
                      return false
                    }
                    if (year.length === 2) {
                      prefix = new Date().getFullYear();
                      prefix = prefix.toString().slice(0, 2);
                      year = prefix + year
                    }
                    expiry = new Date(year, month);
                    currentTime = new Date;
                    expiry.setMonth(expiry.getMonth() - 1);
                    expiry.setMonth(expiry.getMonth() + 1, 1);
                    return expiry > currentTime
                  },
                  validateCardCVC: function (cvc, type) {
                    var ref, ref1;
                    cvc = QJ.trim(cvc);
                    if (!/^\d+$/.test(cvc)) {
                      return false
                    }
                    if (type && cardFromType(type)) {
                      return ref = cvc.length, indexOf.call((ref1 = cardFromType(type)) != null ? ref1.cvcLength : void 0, ref) >= 0
                    } else {
                      return cvc.length >= 3 && cvc.length <= 4
                    }
                  },
                  cardType: function (num) {
                    var ref;
                    if (!num) {
                      return null
                    }
                    return ((ref = cardFromNumber(num)) != null ? ref.type : void 0) || null
                  },
                  formatCardNumber: function (num) {
                    var card, groups, ref, upperLength;
                    card = cardFromNumber(num);
                    if (!card) {
                      return num
                    }
                    upperLength = card.length[card.length.length - 1];
                    num = num.replace(/\D/g, '');
                    num = num.slice(0, +upperLength + 1 || 9000000000);
                    if (card.format.global) {
                      return (ref = num.match(card.format)) != null ? ref.join(' ') : void 0
                    } else {
                      groups = card.format.exec(num);
                      if (groups != null) {
                        groups.shift()
                      }
                      return groups != null ? groups.join(' ') : void 0
                    }
                  }
                };
                Payment.restrictNumeric = function (el) {
                  return QJ.on(el, 'keypress', restrictNumeric)
                };
                Payment.cardExpiryVal = function (el) {
                  return Payment.fns.cardExpiryVal(QJ.val(el))
                };
                Payment.formatCardCVC = function (el) {
                  Payment.restrictNumeric(el);
                  QJ.on(el, 'keypress', restrictCVC);
                  return el
                };
                Payment.formatCardExpiry = function (el) {
                  var month, year;
                  Payment.restrictNumeric(el);
                  if (el.length && el.length === 2) {
                    month = el[0], year = el[1];
                    this.formatCardExpiryMultiple(month, year)
                  } else {
                    QJ.on(el, 'keypress', restrictCombinedExpiry);
                    QJ.on(el, 'keypress', formatExpiry);
                    QJ.on(el, 'keypress', formatForwardSlash);
                    QJ.on(el, 'keypress', formatForwardExpiry);
                    QJ.on(el, 'keydown', formatBackExpiry)
                  }
                  return el
                };
                Payment.formatCardExpiryMultiple = function (month, year) {
                  QJ.on(month, 'keypress', restrictMonthExpiry);
                  QJ.on(month, 'keypress', formatMonthExpiry);
                  return QJ.on(year, 'keypress', restrictYearExpiry)
                };
                Payment.formatCardNumber = function (el) {
                  Payment.restrictNumeric(el);
                  QJ.on(el, 'keypress', restrictCardNumber);
                  QJ.on(el, 'keypress', formatCardNumber);
                  QJ.on(el, 'keydown', formatBackCardNumber);
                  QJ.on(el, 'keyup', setCardType);
                  QJ.on(el, 'paste', reFormatCardNumber);
                  return el
                };
                Payment.getCardArray = function () {
                  return cards
                };
                Payment.setCardArray = function (cardArray) {
                  cards = cardArray;
                  return true
                };
                Payment.addToCardArray = function (cardObject) {
                  return cards.push(cardObject)
                };
                Payment.removeFromCardArray = function (type) {
                  var key, value;
                  for (key in cards) {
                    value = cards[key];
                    if (value.type === type) {
                      cards.splice(key, 1)
                    }
                  }
                  return true
                };
                return Payment
              }();
              module.exports = Payment;
              global.Payment = Payment
            }.call(this, typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {}))
          },
          { 'qj/src/qj.coffee': 1 }
        ]
      }, {}, [2])(2)
    }))
  });
  // source: node_modules/payment/node_modules/qj/src/qj.coffee
  require.define('payment/node_modules/qj/src/qj', function (module, exports, __dirname, __filename) {
    var QJ, rreturn, rtrim;
    QJ = function (selector) {
      if (QJ.isDOMElement(selector)) {
        return selector
      }
      return document.querySelectorAll(selector)
    };
    QJ.isDOMElement = function (el) {
      return el && el.nodeName != null
    };
    rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
    QJ.trim = function (text) {
      if (text === null) {
        return ''
      } else {
        return (text + '').replace(rtrim, '')
      }
    };
    rreturn = /\r/g;
    QJ.val = function (el, val) {
      var ret;
      if (arguments.length > 1) {
        return el.value = val
      } else {
        ret = el.value;
        if (typeof ret === 'string') {
          return ret.replace(rreturn, '')
        } else {
          if (ret === null) {
            return ''
          } else {
            return ret
          }
        }
      }
    };
    QJ.preventDefault = function (eventObject) {
      if (typeof eventObject.preventDefault === 'function') {
        eventObject.preventDefault();
        return
      }
      eventObject.returnValue = false;
      return false
    };
    QJ.normalizeEvent = function (e) {
      var original;
      original = e;
      e = {
        which: original.which != null ? original.which : void 0,
        target: original.target || original.srcElement,
        preventDefault: function () {
          return QJ.preventDefault(original)
        },
        originalEvent: original,
        data: original.data || original.detail
      };
      if (e.which == null) {
        e.which = original.charCode != null ? original.charCode : original.keyCode
      }
      return e
    };
    QJ.on = function (element, eventName, callback) {
      var el, i, j, len, len1, multEventName, originalCallback, ref;
      if (element.length) {
        for (i = 0, len = element.length; i < len; i++) {
          el = element[i];
          QJ.on(el, eventName, callback)
        }
        return
      }
      if (eventName.match(' ')) {
        ref = eventName.split(' ');
        for (j = 0, len1 = ref.length; j < len1; j++) {
          multEventName = ref[j];
          QJ.on(element, multEventName, callback)
        }
        return
      }
      originalCallback = callback;
      callback = function (e) {
        e = QJ.normalizeEvent(e);
        return originalCallback(e)
      };
      if (element.addEventListener) {
        return element.addEventListener(eventName, callback, false)
      }
      if (element.attachEvent) {
        eventName = 'on' + eventName;
        return element.attachEvent(eventName, callback)
      }
      element['on' + eventName] = callback
    };
    QJ.addClass = function (el, className) {
      var e;
      if (el.length) {
        return function () {
          var i, len, results;
          results = [];
          for (i = 0, len = el.length; i < len; i++) {
            e = el[i];
            results.push(QJ.addClass(e, className))
          }
          return results
        }()
      }
      if (el.classList) {
        return el.classList.add(className)
      } else {
        return el.className += ' ' + className
      }
    };
    QJ.hasClass = function (el, className) {
      var e, hasClass, i, len;
      if (el.length) {
        hasClass = true;
        for (i = 0, len = el.length; i < len; i++) {
          e = el[i];
          hasClass = hasClass && QJ.hasClass(e, className)
        }
        return hasClass
      }
      if (el.classList) {
        return el.classList.contains(className)
      } else {
        return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className)
      }
    };
    QJ.removeClass = function (el, className) {
      var cls, e, i, len, ref, results;
      if (el.length) {
        return function () {
          var i, len, results;
          results = [];
          for (i = 0, len = el.length; i < len; i++) {
            e = el[i];
            results.push(QJ.removeClass(e, className))
          }
          return results
        }()
      }
      if (el.classList) {
        ref = className.split(' ');
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          cls = ref[i];
          results.push(el.classList.remove(cls))
        }
        return results
      } else {
        return el.className = el.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ')
      }
    };
    QJ.toggleClass = function (el, className, bool) {
      var e;
      if (el.length) {
        return function () {
          var i, len, results;
          results = [];
          for (i = 0, len = el.length; i < len; i++) {
            e = el[i];
            results.push(QJ.toggleClass(e, className, bool))
          }
          return results
        }()
      }
      if (bool) {
        if (!QJ.hasClass(el, className)) {
          return QJ.addClass(el, className)
        }
      } else {
        return QJ.removeClass(el, className)
      }
    };
    QJ.append = function (el, toAppend) {
      var e;
      if (el.length) {
        return function () {
          var i, len, results;
          results = [];
          for (i = 0, len = el.length; i < len; i++) {
            e = el[i];
            results.push(QJ.append(e, toAppend))
          }
          return results
        }()
      }
      return el.insertAdjacentHTML('beforeend', toAppend)
    };
    QJ.find = function (el, selector) {
      if (el instanceof NodeList || el instanceof Array) {
        el = el[0]
      }
      return el.querySelectorAll(selector)
    };
    QJ.trigger = function (el, name, data) {
      var e, error, ev;
      try {
        ev = new CustomEvent(name, { detail: data })
      } catch (error) {
        e = error;
        ev = document.createEvent('CustomEvent');
        if (ev.initCustomEvent) {
          ev.initCustomEvent(name, true, true, data)
        } else {
          ev.initEvent(name, true, true, data)
        }
      }
      return el.dispatchEvent(ev)
    };
    module.exports = QJ
  });
  // source: node_modules/node.extend/index.js
  require.define('node.extend', function (module, exports, __dirname, __filename) {
    module.exports = require('node.extend/lib/extend')
  });
  // source: node_modules/node.extend/lib/extend.js
  require.define('node.extend/lib/extend', function (module, exports, __dirname, __filename) {
    /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
    var is = require('is');
    function extend() {
      var target = arguments[0] || {};
      var i = 1;
      var length = arguments.length;
      var deep = false;
      var options, name, src, copy, copy_is_array, clone;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      }
      // Handle case when target is a string or something (possible in deep copy)
      if (typeof target !== 'object' && !is.fn(target)) {
        target = {}
      }
      for (; i < length; i++) {
        // Only deal with non-null/undefined values
        options = arguments[i];
        if (options != null) {
          if (typeof options === 'string') {
            options = options.split('')
          }
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (is.hash(copy) || (copy_is_array = is.array(copy)))) {
              if (copy_is_array) {
                copy_is_array = false;
                clone = src && is.array(src) ? src : []
              } else {
                clone = src && is.hash(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    }
    ;
    /**
 * @public
 */
    extend.version = '1.1.3';
    /**
 * Exports module.
 */
    module.exports = extend
  });
  // source: node_modules/is/index.js
  require.define('is', function (module, exports, __dirname, __filename) {
    /* globals window, HTMLElement */
    /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
    var objProto = Object.prototype;
    var owns = objProto.hasOwnProperty;
    var toStr = objProto.toString;
    var symbolValueOf;
    if (typeof Symbol === 'function') {
      symbolValueOf = Symbol.prototype.valueOf
    }
    var isActualNaN = function (value) {
      return value !== value
    };
    var NON_HOST_TYPES = {
      'boolean': 1,
      number: 1,
      string: 1,
      undefined: 1
    };
    var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
    var hexRegex = /^[A-Fa-f0-9]+$/;
    /**
 * Expose `is`
 */
    var is = module.exports = {};
    /**
 * Test general.
 */
    /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
    is.a = is.type = function (value, type) {
      return typeof value === type
    };
    /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
    is.defined = function (value) {
      return typeof value !== 'undefined'
    };
    /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
    is.empty = function (value) {
      var type = toStr.call(value);
      var key;
      if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
        return value.length === 0
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (owns.call(value, key)) {
            return false
          }
        }
        return true
      }
      return !value
    };
    /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
    is.equal = function equal(value, other) {
      if (value === other) {
        return true
      }
      var type = toStr.call(value);
      var key;
      if (type !== toStr.call(other)) {
        return false
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (!is.equal(value[key], other[key]) || !(key in other)) {
            return false
          }
        }
        for (key in other) {
          if (!is.equal(value[key], other[key]) || !(key in value)) {
            return false
          }
        }
        return true
      }
      if (type === '[object Array]') {
        key = value.length;
        if (key !== other.length) {
          return false
        }
        while (--key) {
          if (!is.equal(value[key], other[key])) {
            return false
          }
        }
        return true
      }
      if (type === '[object Function]') {
        return value.prototype === other.prototype
      }
      if (type === '[object Date]') {
        return value.getTime() === other.getTime()
      }
      return false
    };
    /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
    is.hosted = function (value, host) {
      var type = typeof host[value];
      return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
    };
    /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
    is.instance = is['instanceof'] = function (value, constructor) {
      return value instanceof constructor
    };
    /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
    is.nil = is['null'] = function (value) {
      return value === null
    };
    /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
    is.undef = is.undefined = function (value) {
      return typeof value === 'undefined'
    };
    /**
 * Test arguments.
 */
    /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.args = is.arguments = function (value) {
      var isStandardArguments = toStr.call(value) === '[object Arguments]';
      var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
      return isStandardArguments || isOldArguments
    };
    /**
 * Test array.
 */
    /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
    is.array = Array.isArray || function (value) {
      return toStr.call(value) === '[object Array]'
    };
    /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
    is.args.empty = function (value) {
      return is.args(value) && value.length === 0
    };
    /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
    is.array.empty = function (value) {
      return is.array(value) && value.length === 0
    };
    /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.arraylike = function (value) {
      return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
    };
    /**
 * Test boolean.
 */
    /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
    is.bool = is['boolean'] = function (value) {
      return toStr.call(value) === '[object Boolean]'
    };
    /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
    is['false'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === false
    };
    /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
    is['true'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === true
    };
    /**
 * Test date.
 */
    /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
    is.date = function (value) {
      return toStr.call(value) === '[object Date]'
    };
    /**
 * Test element.
 */
    /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
    is.element = function (value) {
      return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
    };
    /**
 * Test error.
 */
    /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
    is.error = function (value) {
      return toStr.call(value) === '[object Error]'
    };
    /**
 * Test function.
 */
    /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
    is.fn = is['function'] = function (value) {
      var isAlert = typeof window !== 'undefined' && value === window.alert;
      return isAlert || toStr.call(value) === '[object Function]'
    };
    /**
 * Test number.
 */
    /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
    is.number = function (value) {
      return toStr.call(value) === '[object Number]'
    };
    /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
    is.infinite = function (value) {
      return value === Infinity || value === -Infinity
    };
    /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
    is.decimal = function (value) {
      return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
    };
    /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
    is.divisibleBy = function (value, n) {
      var isDividendInfinite = is.infinite(value);
      var isDivisorInfinite = is.infinite(n);
      var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
      return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
    };
    /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
    is.integer = is['int'] = function (value) {
      return is.number(value) && !isActualNaN(value) && value % 1 === 0
    };
    /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
    is.maximum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value < others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
    is.minimum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value > others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
    is.nan = function (value) {
      return !is.number(value) || value !== value
    };
    /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
    is.even = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
    };
    /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
    is.odd = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
    };
    /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.ge = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value >= other
    };
    /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.gt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value > other
    };
    /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
    is.le = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value <= other
    };
    /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
    is.lt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value < other
    };
    /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
    is.within = function (value, start, finish) {
      if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
        throw new TypeError('all arguments must be numbers')
      }
      var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
      return isAnyInfinite || value >= start && value <= finish
    };
    /**
 * Test object.
 */
    /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
    is.object = function (value) {
      return toStr.call(value) === '[object Object]'
    };
    /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
    is.hash = function (value) {
      return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
    };
    /**
 * Test regexp.
 */
    /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
    is.regexp = function (value) {
      return toStr.call(value) === '[object RegExp]'
    };
    /**
 * Test string.
 */
    /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
    is.string = function (value) {
      return toStr.call(value) === '[object String]'
    };
    /**
 * Test base64 string.
 */
    /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
    is.base64 = function (value) {
      return is.string(value) && (!value.length || base64Regex.test(value))
    };
    /**
 * Test base64 string.
 */
    /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
    is.hex = function (value) {
      return is.string(value) && (!value.length || hexRegex.test(value))
    };
    /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
    is.symbol = function (value) {
      return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
    }
  });
  // source: templates/screens/payment.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/screens/payment', function (module, exports, __dirname, __filename) {
    module.exports = '<form id="payment"><control label="{ &quot;Email&quot; }" input="{ inputs[&quot;user.email&quot;] }"></control><control label="{ &quot;Password&quot; }" input="{ inputs[&quot;user.password&quot;] }" if="{ config.login }"></control><control name="{ &quot;name&quot;}" label="{ &quot;Name&quot; }" input="{ inputs[&quot;user.name&quot;] }"></control><tabs model="{ model }" obs="{ obs }" if="{ hasProcessors() }"></tabs><div if="{ model.order.type  === &quot;stripe&quot; }" class="crowdstart-card-widget"><div class="crowdstart-card-details"><control name="{ &quot;number&quot; }" label="{ &quot;Card Number&quot; }" input="{ inputs[&quot;payment.account.number&quot;] }"></control><div class="crowdstart-card-expiry-cvc"><control name="{ &quot;expiry&quot; }" label="{ &quot;Expiration&quot; }" input="{ inputs[&quot;payment.account.expiry&quot;] }"></control><control name="{ &quot;cvc&quot; }" label="{ &quot;CVC Code&quot; }" input="{ inputs[&quot;payment.account.cvc&quot;] }"></control></div></div><div class="crowdstart-card"></div></div><div if="{ model.order.type === &quot;paypal&quot; }" class="crowdstart-paypal-widget"><svg><path d="M16.9,24.5c-1.3,0-2.4,1.1-2.4,2.4v46.2c0,1.3,1.1,2.4,2.4,2.4h66.2c1.3,0,2.4-1.1,2.4-2.4V26.9c0-1.3-1.1-2.4-2.4-2.4      H16.9z M16.9,26.1h8.2h12.2c0.6,0,1.4,0.6,1.7,1.1l2.5,6.7H16.1v-7C16.1,26.4,16.4,26.1,16.9,26.1L16.9,26.1z M40.2,26.1h43      c0.5,0,0.8,0.3,0.8,0.8v7H43.2l-2.7-7.3C40.4,26.5,40.3,26.3,40.2,26.1L40.2,26.1z M20.6,27.6c-1.3,0-2.3,1.1-2.3,2.4      s1.1,2.4,2.3,2.4c1.3,0,2.3-1.1,2.3-2.4C23,28.7,22,27.6,20.6,27.6L20.6,27.6z M27.1,27.6c-1.3,0-2.3,1.1-2.3,2.4s1.1,2.4,2.3,2.4      s2.3-1.1,2.3-2.4C29.5,28.7,28.4,27.6,27.1,27.6L27.1,27.6z M33.6,27.6c-1.3,0-2.4,1.1-2.4,2.4s1.1,2.4,2.4,2.4s2.3-1.1,2.3-2.4      C35.9,28.7,34.8,27.6,33.6,27.6L33.6,27.6z M20.6,29.2c0.4,0,0.8,0.3,0.8,0.8s-0.4,0.8-0.8,0.8s-0.8-0.3-0.8-0.8      S20.2,29.2,20.6,29.2L20.6,29.2z M27.1,29.2c0.4,0,0.8,0.3,0.8,0.8s-0.3,0.8-0.8,0.8s-0.8-0.3-0.8-0.8S26.7,29.2,27.1,29.2      L27.1,29.2z M33.6,29.2c0.4,0,0.8,0.3,0.8,0.8s-0.3,0.8-0.8,0.8s-0.8-0.3-0.8-0.8S33.1,29.2,33.6,29.2L33.6,29.2z M16.1,35.5H84V73      c0,0.5-0.3,0.8-0.8,0.8H16.9c-0.5,0-0.8-0.4-0.8-0.8V35.5z M58.9,54.9c0,0.2-0.1,0.3-0.2,0.4l-4,4.2c-0.3,0.3-0.8,0.3-1.1,0      s-0.3-0.8,0-1.1l2.7-2.9h-15c-0.4,0-0.8-0.4-0.8-0.8c0-0.4,0.4-0.8,0.8-0.8h15L53.6,51c-0.3-0.3-0.3-0.9,0-1.1      c0.3-0.3,0.9-0.3,1.2,0.1l4,4.2C58.9,54.4,59,54.6,58.9,54.9L58.9,54.9z"></path></svg><p>You will be redirected to Paypal to complete your purchase securely.</p></div></form>'
  });
  // source: src/views/screens/shipping.coffee
  require.define('./views/screens/shipping', function (module, exports, __dirname, __filename) {
    var Events, Screen, Shipping, analytics, crowdcontrol, input, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    Screen = require('./views/screens/screen');
    analytics = require('./utils/analytics');
    input = require('./utils/input');
    Shipping = function (superClass) {
      var obj;
      extend(Shipping, superClass);
      function Shipping() {
        return Shipping.__super__.constructor.apply(this, arguments)
      }
      Shipping.prototype.tag = 'shipping';
      Shipping.prototype.title = 'Shipping Address';
      Shipping.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/screens/shipping');
      Shipping.prototype.taxRates = null;
      Shipping.prototype.inputConfigs = [
        input('order.shippingAddress.line1', '123 Street', 'input required'),
        input('order.shippingAddress.line2', '123 Apt', 'input'),
        input('order.shippingAddress.city', 'City', 'input required'),
        input('order.shippingAddress.state', 'State', 'state-select required'),
        input('order.shippingAddress.postalCode', 'Zip/Postal Code', 'input postalRequired'),
        input('order.shippingAddress.country', '', 'country-select required')
      ];
      Shipping.prototype.updateTaxRate = function () {
        var j, len, ref, taxRate;
        this.model.order.taxRate = 0;
        ref = this.taxRates;
        for (j = 0, len = ref.length; j < len; j++) {
          taxRate = ref[j];
          if (taxRate.city != null && this.model.order.shippingAddress.city != null && taxRate.city.toLowerCase() !== this.model.order.shippingAddress.city.toLowerCase()) {
            continue
          }
          if (taxRate.state != null && this.model.order.shippingAddress.state != null && taxRate.state.toLowerCase() !== this.model.order.shippingAddress.state.toLowerCase()) {
            continue
          }
          if (taxRate.country != null && this.model.order.shippingAddress.country != null && taxRate.country.toLowerCase() !== this.model.order.shippingAddress.country.toLowerCase()) {
            continue
          }
          this.model.order.taxRate = taxRate.taxRate;
          break
        }
        return riot.update()
      };
      Shipping.prototype.events = (obj = {}, obj['' + Events.Input.Set] = function () {
        return this.updateTaxRate()
      }, obj);
      Shipping.prototype.js = function (opts) {
        var ref;
        Shipping.__super__.js.apply(this, arguments);
        return this.taxRates = (ref = this.model.taxRates) != null ? ref : []
      };
      Shipping.prototype.show = function () {
        analytics.track('Viewed Checkout Step', { step: 2 });
        return $('body').animate({ scrollTop: $('screen-manager').first().offset().top - 50 }, 500)
      };
      Shipping.prototype._submit = function () {
        this.screenManagerObs.trigger(Events.Confirm.Lock);
        this.screenManagerObs.trigger(Events.Confirm.Error, '');
        if (this.model.order.type === 'paypal') {
          return this.submitPaypal()
        } else {
          return this.submitStripe()
        }
      };
      Shipping.prototype.submitPaypal = function () {
        var data;
        data = {
          user: this.model.user,
          order: this.model.order,
          payment: this.model.payment
        };
        return this.client.checkout.paypal(data).then(function (_this) {
          return function (order) {
            _this.payKey = order.payKey;
            analytics.track('Completed Checkout Step', { step: 2 });
            if (_this.model.test.paypal) {
              return window.location.href = 'https://www.sandbox.paypal.com/cgi-bin/webscr?cmd=_ap-payment&paykey=' + _this.payKey
            } else {
              return window.location.href = 'https://www.paypal.com/cgi-bin/webscr?cmd=_ap-payment&paykey=' + _this.payKey
            }
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            console.log('shipping submit Error: ' + err);
            _this.screenManagerObs.trigger(Events.Confirm.Error, 'Sorry, Paypal is unavailable.  Please try again later.');
            _this.screenManagerObs.trigger(Events.Confirm.Unlock);
            return _this.screenManagerObs.trigger(Events.Checkout.Done)
          }
        }(this))
      };
      Shipping.prototype.submitStripe = function () {
        var data;
        data = {
          user: this.model.user,
          order: this.model.order,
          payment: this.model.payment
        };
        return this.client.checkout.charge(data).then(function (_this) {
          return function (order) {
            var coupon, i, item, j, len, options, ref, ref1, ref2, ref3;
            coupon = _this.model.order.coupon || {};
            _this.model.order = order;
            analytics.track('Completed Checkout Step', { step: 2 });
            options = {
              orderId: _this.model.order.id,
              total: parseFloat(_this.model.order.total / 100),
              shipping: parseFloat(_this.model.order.shipping / 100),
              tax: parseFloat(_this.model.order.tax / 100),
              discount: parseFloat(_this.model.order.discount / 100),
              coupon: coupon.code || '',
              currency: _this.model.order.currency,
              products: []
            };
            ref = _this.model.order.items;
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
              item = ref[i];
              options.products[i] = {
                id: item.productId,
                sku: item.productSlug,
                name: item.productName,
                quantity: item.quantity,
                price: parseFloat(item.price / 100)
              }
            }
            analytics.track('Completed Order', options);
            if (((ref1 = _this.model.analytics) != null ? (ref2 = ref1.pixels) != null ? ref2.checkout : void 0 : void 0) != null) {
              analytics.track((ref3 = _this.model.analytics.pixels) != null ? ref3.checkout : void 0)
            }
            if (_this.model.referralProgram != null) {
              _this.client.referrer.create({
                userId: _this.model.order.userId,
                orderId: _this.model.order.orderId,
                program: _this.model.referralProgram
              }).then(function (referrer) {
                return _this.model.referrerId = referrer.id
              })['catch'](function (err) {
                return console.log('new referralProgram Error: ' + err)
              })
            }
            _this.screenManagerObs.trigger(Events.Screen.Next);
            _this.screenManagerObs.trigger(Events.Confirm.Unlock);
            _this.screenManagerObs.trigger(Events.Checkout.Done);
            return riot.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            var res;
            console.log('shipping submit Error: ' + err);
            res = _this.client.lastResponse.responseText;
            if (res.error.code === 'card-declined') {
              _this.screenManagerObs.trigger(Events.Confirm.Error, 'Sorry, your card was declined. Please check your payment information.')
            } else {
              _this.screenManagerObs.trigger(Events.Confirm.Error, 'Sorry, unable to complete your transaction. Please try again later.')
            }
            _this.screenManagerObs.trigger(Events.Confirm.Unlock);
            return _this.screenManagerObs.trigger(Events.Checkout.Done)
          }
        }(this))
      };
      return Shipping
    }(Screen);
    Shipping.register();
    module.exports = Shipping
  });
  // source: templates/screens/shipping.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/screens/shipping', function (module, exports, __dirname, __filename) {
    module.exports = '<form id="shipping"><div class="crowdstart-shipping-address-line"><control label="{ &quot;Shipping Address&quot; }" input="{ inputs[&quot;order.shippingAddress.line1&quot;] }"></control><control label="{ &quot;Suite&quot; }" input="{ inputs[&quot;order.shippingAddress.line2&quot;] }"></control></div><control label="{ &quot;City&quot; }" input="{ inputs[&quot;order.shippingAddress.city&quot;] }"></control><div class="crowdstart-shipping-state-postal"><control label="{ &quot;State&quot; }" input="{ inputs[&quot;order.shippingAddress.state&quot;] }"></control><control label="{ &quot;Postal Code&quot; }" input="{ inputs[&quot;order.shippingAddress.postalCode&quot;] }"></control></div><control label="{ &quot;Country&quot; }" input="{ inputs[&quot;order.shippingAddress.country&quot;] }"></control></form>'
  });
  // source: src/views/screens/thankyou.coffee
  require.define('./views/screens/thankyou', function (module, exports, __dirname, __filename) {
    var Events, Screen, ThankYou, analytics, crowdcontrol, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    crowdcontrol = require('crowdcontrol/lib');
    Events = crowdcontrol.Events;
    Screen = require('./views/screens/screen');
    analytics = require('./utils/analytics');
    ThankYou = function (superClass) {
      extend(ThankYou, superClass);
      function ThankYou() {
        return ThankYou.__super__.constructor.apply(this, arguments)
      }
      ThankYou.prototype.tag = 'thankyou';
      ThankYou.prototype.title = 'Done!';
      ThankYou.prototype.html = require('./Users/zk/work/crowdstart/checkout.js/templates/screens/thankyou');
      ThankYou.prototype.showConfirm = false;
      ThankYou.prototype.showBack = false;
      ThankYou.prototype.showInvoice = false;
      ThankYou.prototype._submit = function () {
      };
      ThankYou.prototype.show = function () {
        analytics.track('Viewed Checkout Step', { step: 3 });
        return $('body').animate({ scrollTop: $('screen-manager').first().offset().top - 50 }, 500)
      };
      return ThankYou
    }(Screen);
    ThankYou.register();
    module.exports = ThankYou
  });
  // source: templates/screens/thankyou.jade
  require.define('./Users/zk/work/crowdstart/checkout.js/templates/screens/thankyou', function (module, exports, __dirname, __filename) {
    module.exports = '<div><h1>{ model.thankyou.header }</h1><p>{ model.thankyou.body }</p><p if="{ model.order.number != null }">Your Order Confirmation:<strong>&nbsp;{ model.order.number }</strong></p><div class="social__container"><div if="{ model.thankyou.facebook }" class="social__item"><a target="_blank" href="https://www.facebook.com/sharer/sharer.php?u={ model.thankyou.facebook }" class="social__icon--facebook"><i class="icon--facebook"></i></a></div><div if="{ model.thankyou.twitter }" class="social__item"><a target="_blank" href="https://twitter.com/intent/tweet?url={ model.thankyou.twitter }&amp;text={ model.thankyou.twitterMsg}" class="social__icon--twitter"><i class="icon--twitter"></i></a></div><div if="{ model.thankyou.googlePlus }" class="social__item"><a target="_blank" href="https://plus.google.com/u/0/{ model.thankyou.googlePlus }" class="social__icon--googleplus"><i class="icon--googleplus"></i></a></div><div if="{ model.thankyou.pinterest }" class="social__item"><a href="javascript:void((function()%7Bvar%20e=document.createElement(\'script\');e.setAttribute(\'type\',\'text/javascript\');e.setAttribute(\'charset\',\'UTF-8\');e.setAttribute(\'src\',\'https://assets.pinterest.com/js/pinmarklet.js?r=\'+Math.random()*99999999);document.body.appendChild(e)%7D)());" class="social__icon--pintrest"><i class="icon--pintrest"></i></a></div><div if="{ model.thankyou.emailSubject }" class="social__item"><a href="mailto:%20?subject={ model.thankyou.emailSubject }&amp;body={ model.thankyou.emailBody }" class="social__icon--email"><i class="icon--email"></i></a></div></div></div>'
  });
  // source: src/index.coffee
  require.define('./index', function (module, exports, __dirname, __filename) {
    var Checkout, Crowdstart, Events, Views, Widget, analytics, crowdcontrol, requestAnimationFrame, riot, theme;
    Crowdstart = require('crowdstart/lib/browser.js');
    crowdcontrol = require('crowdcontrol/lib');
    requestAnimationFrame = require('raf');
    riot = window.riot = require('riot/riot');
    require('./Users/zk/work/crowdstart/checkout/vendor/js/select2.js');
    require('style-inject')(require('./Users/zk/work/crowdstart/checkout.js/vendor/css/select2'));
    theme = require('./utils/theme');
    analytics = require('./utils/analytics');
    Events = crowdcontrol.Events;
    require('./events');
    Views = require('./views');
    Widget = Views.Widget;
    Checkout = function () {
      Checkout.prototype.key = '';
      Checkout.prototype.order = null;
      Checkout.prototype.payment = null;
      Checkout.prototype.user = null;
      Checkout.prototype.itemUpdateQueue = null;
      Checkout.prototype.obs = null;
      Checkout.prototype.model = null;
      Checkout.prototype.config = null;
      Checkout.prototype.thankyou = null;
      Checkout.prototype.theme = null;
      Checkout.prototype.analytics = null;
      Checkout.prototype.referralProgram = null;
      Checkout.prototype.taxRates = null;
      Checkout.prototype.reset = true;
      Checkout.prototype.waits = 0;
      Checkout.prototype.currentScript = null;
      Checkout.prototype.script = [
        'payment',
        'shipping',
        'thankyou'
      ];
      function Checkout(key, opts) {
        var id, match, modal, q, qs, ref, ref1, ref2, ref3, search, widget, widgetTag;
        this.key = key;
        if (opts == null) {
          opts = {}
        }
        this.client = new Crowdstart.Api({
          key: this.key,
          endpoint: opts != null ? (ref = opts.test) != null ? ref.endpoint : void 0 : void 0
        });
        search = /([^&=]+)=?([^&]*)/g;
        q = window.location.href.split('?')[1];
        qs = {};
        if (q != null) {
          while (match = search.exec(q)) {
            qs[decodeURIComponent(match[1])] = decodeURIComponent(match[2])
          }
        }
        this.config = {
          showPromoCode: true,
          termsUrl: '',
          callToActions: [],
          processors: {
            stripe: true,
            paypal: true
          }
        };
        if (opts.config != null) {
          this.config = $.extend(this.config, opts.config)
        }
        this.user = opts.user || {};
        this.order = {};
        if (opts.order != null) {
          this.order = $.extend(this.order, opts.order)
        }
        this.order.items = [];
        this.order.currency = ((ref1 = opts.config) != null ? ref1.currency : void 0) || this.order.currency || 'usd';
        this.order.taxRate = ((ref2 = opts.config) != null ? ref2.taxRate : void 0) || this.order.taxRate || 0;
        this.order.shippingRate = ((ref3 = opts.config) != null ? ref3.shippingRate : void 0) || this.order.shippingRate || 0;
        this.order.shippingAddress = { country: 'us' };
        this.order.discount = 0;
        if (this.config.processors.stripe) {
          this.order.type = 'stripe'
        } else if (this.config.processors.paypal) {
          this.order.type = 'paypal'
        }
        if (qs.referrer != null) {
          this.order.referrerId = qs.referrer || this.order.referrerId
        }
        this.payment = { account: { _type: 'stripe' } };
        this.itemUpdateQueue = [];
        this.thankyou = {
          header: 'Thank You!',
          body: 'Check Your Email For The Order Confirmation.'
        };
        if (opts.thankyou != null) {
          this.thankyou = $.extend(this.thankyou, opts.thankyou)
        }
        this.theme = {};
        if (opts.theme != null) {
          this.theme = $.extend(this.theme, opts.theme)
        }
        this.test = {};
        if (opts.test != null) {
          this.test = $.extend(this.test, opts.test)
        }
        this.analytics = {};
        if (opts.analytics != null) {
          this.analytics = $.extend(this.analytics, opts.analytics)
        }
        this.referralProgram = opts.referralProgram;
        this.taxRates = opts.taxRates || [];
        this.model = {
          user: this.user,
          order: this.order,
          payment: this.payment,
          config: this.config,
          thankyou: this.thankyou,
          test: this.test,
          analytics: this.analytics,
          referralProgram: this.referralProgram,
          taxRates: this.taxRates,
          scripts: { basic: this.script }
        };
        this.obs = {};
        riot.observable(this.obs);
        modal = document.createElement('MODAL');
        widgetTag = Widget.prototype.tag;
        widget = document.createElement(widgetTag.toUpperCase());
        widget.setAttribute('model', '{ model }');
        widget.setAttribute('obs', '{ obs }');
        widget.setAttribute('client', '{ client }');
        modal.appendChild(widget);
        document.body.appendChild(modal);
        theme.setTheme(this.theme);
        riot.mount('modal', {
          obs: this.obs,
          model: this.model,
          client: this.client
        });
        this.obs.on(Events.Checkout.Done, function (_this) {
          return function () {
            return _this.reset = true
          }
        }(this));
        if (window.location.hash === '#checkoutsuccess') {
          this.obs.trigger(Events.Screen.UpdateScript, this.script, 2);
          this.reset = false;
          this.open();
          id = setInterval(function () {
            return $(window).resize()
          }, 50);
          setTimeout(function (_this) {
            return function () {
              clearInterval(id);
              riot.update();
              return _this.reset = true
            }
          }(this), 1000)
        } else {
          this.obs.trigger(Events.Screen.UpdateScript, this.script)
        }
      }
      Checkout.prototype.open = function () {
        var item, j, len, ref;
        if (this.reset) {
          this.obs.trigger(Events.Screen.UpdateScript, this.script);
          this.reset = false
        }
        this.obs.trigger(Events.Modal.Open);
        this.obs.trigger(Events.Modal.DisableClose);
        setTimeout(function (_this) {
          return function () {
            return _this.obs.trigger(Events.Modal.EnableClose)
          }
        }(this), 600);
        ref = this.order.items;
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          analytics.track('Added Product', {
            id: item.productId,
            sku: item.productSlug,
            name: item.productName,
            quantity: item.quantity,
            price: parseFloat(item.price / 100)
          })
        }
        analytics.track('Viewed Checkout Step', { step: 1 });
        $('.crowdstart-modal-target').css('top', $(window).scrollTop() + 'px');
        return false
      };
      Checkout.prototype.one = function () {
        return this.obs.one.apply(this.obs, arguments)
      };
      Checkout.prototype.on = function () {
        return this.obs.on.apply(this.obs, arguments)
      };
      Checkout.prototype.off = function () {
        return this.obs.off.apply(this.obs, arguments)
      };
      Checkout.prototype.update = function () {
        var items;
        if (this.waits === 0) {
          items = this.order.items;
          this.order.items = [];
          riot.update();
          this.order.items = items;
          riot.update();
          this.obs.trigger(Events.Checkout.Update, {
            user: this.user,
            order: this.order,
            config: this.config
          });
          return riot.update()
        }
      };
      Checkout.prototype.setConfig = function (config) {
        this.config = config;
        return this.update()
      };
      Checkout.prototype.setUser = function (user) {
        if (user == null) {
          user = {}
        }
        if (user == null) {
          return
        }
        this.user = $.extend(this.user, user);
        this.model.user = this.user;
        return this.update()
      };
      Checkout.prototype.setItem = function (id, quantity) {
        this.itemUpdateQueue.push([
          id,
          quantity
        ]);
        if (this.itemUpdateQueue.length === 1) {
          return this._setItem()
        }
      };
      Checkout.prototype._setItem = function () {
        var i, id, item, j, k, len, len1, quantity, ref, ref1, ref2;
        if (this.itemUpdateQueue.length === 0) {
          this.update();
          return
        }
        ref = this.itemUpdateQueue.shift(), id = ref[0], quantity = ref[1];
        if (quantity === 0) {
          ref1 = this.order.items;
          for (i = j = 0, len = ref1.length; j < len; i = ++j) {
            item = ref1[i];
            if (item.productId === id || item.productSlug === id) {
              break
            }
          }
          if (i < this.order.items.length) {
            this.order.items.splice(i, 1)
          }
          this._setItem();
          return
        }
        ref2 = this.order.items;
        for (i = k = 0, len1 = ref2.length; k < len1; i = ++k) {
          item = ref2[i];
          if (item.productId !== id && item.productSlug !== id) {
            continue
          }
          item.quantity = quantity;
          this._setItem();
          return
        }
        this.order.items.push({
          id: id,
          quantity: quantity
        });
        this.waits++;
        return this.client.product.get(id).then(function (_this) {
          return function (product) {
            var l, len2, ref3;
            _this.waits--;
            ref3 = _this.order.items;
            for (i = l = 0, len2 = ref3.length; l < len2; i = ++l) {
              item = ref3[i];
              if (product.id === item.id || product.slug === item.id) {
                _this._updateItem(product, item);
                break
              }
            }
            return _this._setItem()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.waits--;
            console.log('setItem Error: ' + err);
            return _this._setItem()
          }
        }(this))
      };
      Checkout.prototype._updateItem = function (product, item) {
        item.id = void 0;
        item.productId = product.id;
        item.productSlug = product.slug;
        item.productName = product.name;
        item.price = product.price;
        return item.listPrice = product.listPrice
      };
      return Checkout
    }();
    Checkout.countries = require('./data/countries');
    Checkout.currencies = require('./data/currencies');
    if (window.Crowdstart != null) {
      window.Crowdstart.Checkout = Checkout
    } else {
      window.Crowdstart = { Checkout: Checkout }
    }
    if (typeof module !== 'undefined' && module !== null) {
      module.exports = Checkout
    }
  });
  require('./index')
}.call(this, this))//# sourceMappingURL=data:application/json;base64,